{"version":3,"sources":["D:\\Projects\\family-oriented\\src\\utils\\analyticsDebug.ts"],"sourcesContent":["/**\r\n * Analytics debugging and testing utilities\r\n * Helps diagnose issues with analytics service and database connectivity\r\n */\r\n\r\nimport { createClient } from '@/lib/supabase/client';\r\nimport { analyticsService } from './analyticsService';\r\nimport { mockDataGenerator } from './mockDataGenerator';\r\nimport { User } from '@supabase/supabase-js';\r\nimport { LearningProgressData, LearningPathRecommendation, PerformanceMetrics } from './analyticsService';\r\nimport { logger } from './logger';\r\n\r\ninterface Avatar {\r\n  id: string;\r\n  user_id: string;\r\n  name: string;\r\n  [key: string]: unknown;\r\n}\r\n\r\nexport class AnalyticsDebugger {\r\n  private supabase = createClient();\r\n\r\n  /**\r\n   * Test basic Supabase connectivity and permissions\r\n   */\r\n  async testSupabaseConnection(): Promise<{ success: boolean; error?: string; user?: User | null }> {\r\n    try {\r\n      // Test auth status\r\n      const { data: { session }, error: authError } = await this.supabase.auth.getSession();\r\n      if (authError) throw authError;\r\n\r\n      logger.info('Supabase Auth Session:', session);\r\n\r\n      // Test basic query (should work without auth)\r\n      const { error } = await this.supabase\r\n        .from('subscription_plans')\r\n        .select('id, name')\r\n        .limit(1);\r\n\r\n      if (error) throw error;\r\n\r\n      return {\r\n        success: true,\r\n        user: session?.user || null\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        success: false,\r\n        error: err instanceof Error ? err.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test avatar access and RLS policies\r\n   */\r\n  async testAvatarAccess(avatarId: string): Promise<{ success: boolean; error?: string; avatar?: Avatar }> {\r\n    try {\r\n      logger.info('Testing avatar access for:', avatarId);\r\n\r\n      const { data, error } = await this.supabase\r\n        .from('avatars')\r\n        .select('*')\r\n        .eq('id', avatarId)\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      return {\r\n        success: true,\r\n        avatar: data\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        success: false,\r\n        error: err instanceof Error ? err.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test analytics table access\r\n   */\r\n  async testAnalyticsTablesAccess(avatarId: string): Promise<{\r\n    gameSessions: { success: boolean; count: number; error?: string };\r\n    gameEvents: { success: boolean; count: number; error?: string };\r\n    learningProgress: { success: boolean; count: number; error?: string };\r\n  }> {\r\n    const results = {\r\n      gameSessions: { success: false, count: 0, error: '' },\r\n      gameEvents: { success: false, count: 0, error: '' },\r\n      learningProgress: { success: false, count: 0, error: '' }\r\n    };\r\n\r\n    // Test game_sessions table\r\n    try {\r\n      const { data, error } = await this.supabase\r\n        .from('game_sessions')\r\n        .select('*')\r\n        .eq('avatar_id', avatarId);\r\n\r\n      if (error) throw error;\r\n      results.gameSessions = { success: true, count: data?.length || 0, error: '' };\r\n    } catch (err) {\r\n      results.gameSessions = {\r\n        success: false,\r\n        count: 0,\r\n        error: err instanceof Error ? err.message : 'Unknown error'\r\n      };\r\n    }\r\n\r\n    // Test game_events table\r\n    try {\r\n      const { data, error } = await this.supabase\r\n        .from('game_events')\r\n        .select('*')\r\n        .eq('avatar_id', avatarId)\r\n        .limit(10);\r\n\r\n      if (error) throw error;\r\n      results.gameEvents = { success: true, count: data?.length || 0, error: '' };\r\n    } catch (err) {\r\n      results.gameEvents = {\r\n        success: false,\r\n        count: 0,\r\n        error: err instanceof Error ? err.message : 'Unknown error'\r\n      };\r\n    }\r\n\r\n    // Test learning_progress table\r\n    try {\r\n      const { data, error } = await this.supabase\r\n        .from('learning_progress')\r\n        .select('*')\r\n        .eq('avatar_id', avatarId);\r\n\r\n      if (error) throw error;\r\n      results.learningProgress = { success: true, count: data?.length || 0, error: '' };\r\n    } catch (err) {\r\n      results.learningProgress = {\r\n        success: false,\r\n        count: 0,\r\n        error: err instanceof Error ? err.message : 'Unknown error'\r\n      };\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Test analytics service methods\r\n   */\r\n  async testAnalyticsService(avatarId: string): Promise<{\r\n    progress: { success: boolean; data?: LearningProgressData[]; error?: string };\r\n    recommendations: { success: boolean; data?: LearningPathRecommendation[]; error?: string };\r\n    metrics: { success: boolean; data?: PerformanceMetrics; error?: string };\r\n  }> {\r\n    const results: {\r\n      progress: { success: boolean; data?: LearningProgressData[]; error?: string };\r\n      recommendations: { success: boolean; data?: LearningPathRecommendation[]; error?: string };\r\n      metrics: { success: boolean; data?: PerformanceMetrics; error?: string };\r\n    } = {\r\n      progress: { success: false, error: '' },\r\n      recommendations: { success: false, error: '' },\r\n      metrics: { success: false, error: '' }\r\n    };\r\n\r\n    // Test getAvatarProgress\r\n    try {\r\n      const data = await analyticsService.getAvatarProgress(avatarId);\r\n      results.progress = { success: true, data, error: '' };\r\n    } catch (err) {\r\n      results.progress = {\r\n        success: false,\r\n        error: err instanceof Error ? err.message : 'Unknown error'\r\n      };\r\n    }\r\n\r\n    // Test getLearningPathRecommendations\r\n    try {\r\n      const data = await analyticsService.getLearningPathRecommendations(avatarId, 3);\r\n      results.recommendations = { success: true, data, error: '' };\r\n    } catch (err) {\r\n      results.recommendations = {\r\n        success: false,\r\n        error: err instanceof Error ? err.message : 'Unknown error'\r\n      };\r\n    }\r\n\r\n    // Test getPerformanceMetrics\r\n    try {\r\n      const data = await analyticsService.getPerformanceMetrics(avatarId);\r\n      results.metrics = { success: true, data, error: '' };\r\n    } catch (err) {\r\n      results.metrics = {\r\n        success: false,\r\n        error: err instanceof Error ? err.message : 'Unknown error'\r\n      };\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Create test session data for the demo avatar (simple version)\r\n   */\r\n  async createTestSessionData(avatarId: string): Promise<{ success: boolean; sessionId?: string; error?: string }> {\r\n    try {\r\n      logger.info('Creating simple test session for avatar:', avatarId);\r\n      return await mockDataGenerator.generateQuickTestData(avatarId);\r\n    } catch (err) {\r\n      return {\r\n        success: false,\r\n        error: err instanceof Error ? err.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate comprehensive mock data for testing\r\n   */\r\n  async generateComprehensiveMockData(): Promise<{ \r\n    success: boolean; \r\n    summary?: { \r\n      avatarsProcessed: number; \r\n      totalSessions: number; \r\n      abandonedSessions: number; \r\n    }; \r\n    error?: string \r\n  }> {\r\n    try {\r\n      return await mockDataGenerator.generateComprehensiveMockData();\r\n    } catch (err) {\r\n      return {\r\n        success: false,\r\n        error: err instanceof Error ? err.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all analytics data (requires manual database cleanup)\r\n   */\r\n  async clearAllAnalyticsData(): Promise<{ success: boolean; error?: string }> {\r\n    try {\r\n      return await mockDataGenerator.clearAllAnalyticsData();\r\n    } catch (err) {\r\n      return {\r\n        success: false,\r\n        error: err instanceof Error ? err.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run comprehensive analytics diagnostics\r\n   */\r\n  async runFullDiagnostic(avatarId: string): Promise<void> {\r\n    logger.info('=== Analytics Diagnostic Report ===');\r\n    logger.info('Avatar ID:', avatarId);\r\n\r\n    // Test Supabase connection\r\n    logger.info('\\n1. Testing Supabase Connection...');\r\n    const connectionTest = await this.testSupabaseConnection();\r\n    logger.info('Connection:', connectionTest);\r\n\r\n    // Test avatar access\r\n    logger.info('\\n2. Testing Avatar Access...');\r\n    const avatarTest = await this.testAvatarAccess(avatarId);\r\n    logger.info('Avatar Access:', avatarTest);\r\n\r\n    // Test analytics tables\r\n    logger.info('\\n3. Testing Analytics Tables Access...');\r\n    const tablesTest = await this.testAnalyticsTablesAccess(avatarId);\r\n    logger.info('Tables Access:', tablesTest);\r\n\r\n    // Test analytics service methods with detailed logging\r\n    logger.info('\\n4. Testing Analytics Service Methods...');\r\n    const serviceTest = await this.testAnalyticsServiceWithDetails(avatarId);\r\n    logger.info('Service Methods:', serviceTest);\r\n\r\n    // If no data exists, create test data\r\n    if (tablesTest.gameSessions.success && tablesTest.gameSessions.count === 0) {\r\n      logger.info('\\n5. No analytics data found. Creating test data...');\r\n      const testDataResult = await this.createTestSessionData(avatarId);\r\n      logger.info('Test Data Creation:', testDataResult);\r\n\r\n      if (testDataResult.success) {\r\n        logger.info('\\n6. Re-testing Analytics Service after test data creation...');\r\n        const retestService = await this.testAnalyticsServiceWithDetails(avatarId);\r\n        logger.info('Service Methods (After Test Data):', retestService);\r\n      }\r\n    }\r\n\r\n    logger.info('\\n=== End Diagnostic Report ===');\r\n  }\r\n\r\n  /**\r\n   * Enhanced test of analytics service methods with detailed diagnostics\r\n   */\r\n  private async testAnalyticsServiceWithDetails(avatarId: string): Promise<{\r\n    progress: { success: boolean; data?: LearningProgressData[]; error?: string; details?: string };\r\n    recommendations: { success: boolean; data?: LearningPathRecommendation[]; error?: string; details?: string };\r\n    metrics: { success: boolean; data?: PerformanceMetrics; error?: string; details?: string };\r\n  }> {\r\n    const results: {\r\n      progress: { success: boolean; data?: LearningProgressData[]; error: string; details: string };\r\n      recommendations: { success: boolean; data?: LearningPathRecommendation[]; error: string; details: string };\r\n      metrics: { success: boolean; data?: PerformanceMetrics; error: string; details: string };\r\n    } = {\r\n      progress: { success: false, error: '', details: '' },\r\n      recommendations: { success: false, error: '', details: '' },\r\n      metrics: { success: false, error: '', details: '' }\r\n    };\r\n\r\n    // Test getAvatarProgress with details\r\n    try {\r\n      const data = await analyticsService.getAvatarProgress(avatarId);\r\n      results.progress = { \r\n        success: true, \r\n        data, \r\n        error: '',\r\n        details: `Found ${data.length} progress records. Latest: ${data[0]?.gameId || 'none'}`\r\n      };\r\n    } catch (err) {\r\n      results.progress = {\r\n        success: false,\r\n        error: err instanceof Error ? err.message : 'Unknown error',\r\n        details: 'Failed to fetch progress data'\r\n      };\r\n    }\r\n\r\n    // Test getLearningPathRecommendations with details\r\n    try {\r\n      const data = await analyticsService.getLearningPathRecommendations(avatarId, 3);\r\n      results.recommendations = { \r\n        success: true, \r\n        data, \r\n        error: '',\r\n        details: `Generated ${data.length} recommendations. Top: ${data[0]?.gameId || 'none'}`\r\n      };\r\n    } catch (err) {\r\n      results.recommendations = {\r\n        success: false,\r\n        error: err instanceof Error ? err.message : 'Unknown error',\r\n        details: 'Failed to generate recommendations'\r\n      };\r\n    }\r\n\r\n    // Test getPerformanceMetrics with details\r\n    try {\r\n      const data = await analyticsService.getPerformanceMetrics(avatarId);\r\n      results.metrics = { \r\n        success: true, \r\n        data, \r\n        error: '',\r\n        details: `Games played: ${data.totalGamesPlayed}, Engagement: ${data.engagementScore}`\r\n      };\r\n    } catch (err) {\r\n      results.metrics = {\r\n        success: false,\r\n        error: err instanceof Error ? err.message : 'Unknown error',\r\n        details: 'Failed to calculate metrics'\r\n      };\r\n    }\r\n\r\n    return results;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const analyticsDebugger = new AnalyticsDebugger(); "],"names":["AnalyticsDebugger","analyticsDebugger","testSupabaseConnection","data","session","error","authError","supabase","auth","getSession","logger","info","from","select","limit","success","user","err","Error","message","testAvatarAccess","avatarId","eq","single","avatar","testAnalyticsTablesAccess","results","gameSessions","count","gameEvents","learningProgress","length","testAnalyticsService","progress","recommendations","metrics","analyticsService","getAvatarProgress","getLearningPathRecommendations","getPerformanceMetrics","createTestSessionData","mockDataGenerator","generateQuickTestData","generateComprehensiveMockData","clearAllAnalyticsData","runFullDiagnostic","connectionTest","avatarTest","tablesTest","serviceTest","testAnalyticsServiceWithDetails","testDataResult","retestService","details","gameId","totalGamesPlayed","engagementScore","createClient"],"mappings":"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"}