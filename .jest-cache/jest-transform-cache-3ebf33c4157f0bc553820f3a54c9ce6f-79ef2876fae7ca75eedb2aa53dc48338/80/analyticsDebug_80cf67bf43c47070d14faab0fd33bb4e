e1379e6c94c00c4a54887684c6d54f33
/**
 * Analytics debugging and testing utilities
 * Helps diagnose issues with analytics service and database connectivity
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AnalyticsDebugger: function() {
        return AnalyticsDebugger;
    },
    analyticsDebugger: function() {
        return analyticsDebugger;
    }
});
const _client = require("../lib/supabase/client");
const _analyticsService = require("./analyticsService");
const _mockDataGenerator = require("./mockDataGenerator");
const _logger = require("./logger");
class AnalyticsDebugger {
    /**
   * Test basic Supabase connectivity and permissions
   */ async testSupabaseConnection() {
        try {
            // Test auth status
            const { data: { session }, error: authError } = await this.supabase.auth.getSession();
            if (authError) throw authError;
            _logger.logger.info('Supabase Auth Session:', session);
            // Test basic query (should work without auth)
            const { error } = await this.supabase.from('subscription_plans').select('id, name').limit(1);
            if (error) throw error;
            return {
                success: true,
                user: session?.user || null
            };
        } catch (err) {
            return {
                success: false,
                error: err instanceof Error ? err.message : 'Unknown error'
            };
        }
    }
    /**
   * Test avatar access and RLS policies
   */ async testAvatarAccess(avatarId) {
        try {
            _logger.logger.info('Testing avatar access for:', avatarId);
            const { data, error } = await this.supabase.from('avatars').select('*').eq('id', avatarId).single();
            if (error) throw error;
            return {
                success: true,
                avatar: data
            };
        } catch (err) {
            return {
                success: false,
                error: err instanceof Error ? err.message : 'Unknown error'
            };
        }
    }
    /**
   * Test analytics table access
   */ async testAnalyticsTablesAccess(avatarId) {
        const results = {
            gameSessions: {
                success: false,
                count: 0,
                error: ''
            },
            gameEvents: {
                success: false,
                count: 0,
                error: ''
            },
            learningProgress: {
                success: false,
                count: 0,
                error: ''
            }
        };
        // Test game_sessions table
        try {
            const { data, error } = await this.supabase.from('game_sessions').select('*').eq('avatar_id', avatarId);
            if (error) throw error;
            results.gameSessions = {
                success: true,
                count: data?.length || 0,
                error: ''
            };
        } catch (err) {
            results.gameSessions = {
                success: false,
                count: 0,
                error: err instanceof Error ? err.message : 'Unknown error'
            };
        }
        // Test game_events table
        try {
            const { data, error } = await this.supabase.from('game_events').select('*').eq('avatar_id', avatarId).limit(10);
            if (error) throw error;
            results.gameEvents = {
                success: true,
                count: data?.length || 0,
                error: ''
            };
        } catch (err) {
            results.gameEvents = {
                success: false,
                count: 0,
                error: err instanceof Error ? err.message : 'Unknown error'
            };
        }
        // Test learning_progress table
        try {
            const { data, error } = await this.supabase.from('learning_progress').select('*').eq('avatar_id', avatarId);
            if (error) throw error;
            results.learningProgress = {
                success: true,
                count: data?.length || 0,
                error: ''
            };
        } catch (err) {
            results.learningProgress = {
                success: false,
                count: 0,
                error: err instanceof Error ? err.message : 'Unknown error'
            };
        }
        return results;
    }
    /**
   * Test analytics service methods
   */ async testAnalyticsService(avatarId) {
        const results = {
            progress: {
                success: false,
                error: ''
            },
            recommendations: {
                success: false,
                error: ''
            },
            metrics: {
                success: false,
                error: ''
            }
        };
        // Test getAvatarProgress
        try {
            const data = await _analyticsService.analyticsService.getAvatarProgress(avatarId);
            results.progress = {
                success: true,
                data,
                error: ''
            };
        } catch (err) {
            results.progress = {
                success: false,
                error: err instanceof Error ? err.message : 'Unknown error'
            };
        }
        // Test getLearningPathRecommendations
        try {
            const data = await _analyticsService.analyticsService.getLearningPathRecommendations(avatarId, 3);
            results.recommendations = {
                success: true,
                data,
                error: ''
            };
        } catch (err) {
            results.recommendations = {
                success: false,
                error: err instanceof Error ? err.message : 'Unknown error'
            };
        }
        // Test getPerformanceMetrics
        try {
            const data = await _analyticsService.analyticsService.getPerformanceMetrics(avatarId);
            results.metrics = {
                success: true,
                data,
                error: ''
            };
        } catch (err) {
            results.metrics = {
                success: false,
                error: err instanceof Error ? err.message : 'Unknown error'
            };
        }
        return results;
    }
    /**
   * Create test session data for the demo avatar (simple version)
   */ async createTestSessionData(avatarId) {
        try {
            _logger.logger.info('Creating simple test session for avatar:', avatarId);
            return await _mockDataGenerator.mockDataGenerator.generateQuickTestData(avatarId);
        } catch (err) {
            return {
                success: false,
                error: err instanceof Error ? err.message : 'Unknown error'
            };
        }
    }
    /**
   * Generate comprehensive mock data for testing
   */ async generateComprehensiveMockData() {
        try {
            return await _mockDataGenerator.mockDataGenerator.generateComprehensiveMockData();
        } catch (err) {
            return {
                success: false,
                error: err instanceof Error ? err.message : 'Unknown error'
            };
        }
    }
    /**
   * Clear all analytics data (requires manual database cleanup)
   */ async clearAllAnalyticsData() {
        try {
            return await _mockDataGenerator.mockDataGenerator.clearAllAnalyticsData();
        } catch (err) {
            return {
                success: false,
                error: err instanceof Error ? err.message : 'Unknown error'
            };
        }
    }
    /**
   * Run comprehensive analytics diagnostics
   */ async runFullDiagnostic(avatarId) {
        _logger.logger.info('=== Analytics Diagnostic Report ===');
        _logger.logger.info('Avatar ID:', avatarId);
        // Test Supabase connection
        _logger.logger.info('\n1. Testing Supabase Connection...');
        const connectionTest = await this.testSupabaseConnection();
        _logger.logger.info('Connection:', connectionTest);
        // Test avatar access
        _logger.logger.info('\n2. Testing Avatar Access...');
        const avatarTest = await this.testAvatarAccess(avatarId);
        _logger.logger.info('Avatar Access:', avatarTest);
        // Test analytics tables
        _logger.logger.info('\n3. Testing Analytics Tables Access...');
        const tablesTest = await this.testAnalyticsTablesAccess(avatarId);
        _logger.logger.info('Tables Access:', tablesTest);
        // Test analytics service methods with detailed logging
        _logger.logger.info('\n4. Testing Analytics Service Methods...');
        const serviceTest = await this.testAnalyticsServiceWithDetails(avatarId);
        _logger.logger.info('Service Methods:', serviceTest);
        // If no data exists, create test data
        if (tablesTest.gameSessions.success && tablesTest.gameSessions.count === 0) {
            _logger.logger.info('\n5. No analytics data found. Creating test data...');
            const testDataResult = await this.createTestSessionData(avatarId);
            _logger.logger.info('Test Data Creation:', testDataResult);
            if (testDataResult.success) {
                _logger.logger.info('\n6. Re-testing Analytics Service after test data creation...');
                const retestService = await this.testAnalyticsServiceWithDetails(avatarId);
                _logger.logger.info('Service Methods (After Test Data):', retestService);
            }
        }
        _logger.logger.info('\n=== End Diagnostic Report ===');
    }
    /**
   * Enhanced test of analytics service methods with detailed diagnostics
   */ async testAnalyticsServiceWithDetails(avatarId) {
        const results = {
            progress: {
                success: false,
                error: '',
                details: ''
            },
            recommendations: {
                success: false,
                error: '',
                details: ''
            },
            metrics: {
                success: false,
                error: '',
                details: ''
            }
        };
        // Test getAvatarProgress with details
        try {
            const data = await _analyticsService.analyticsService.getAvatarProgress(avatarId);
            results.progress = {
                success: true,
                data,
                error: '',
                details: `Found ${data.length} progress records. Latest: ${data[0]?.gameId || 'none'}`
            };
        } catch (err) {
            results.progress = {
                success: false,
                error: err instanceof Error ? err.message : 'Unknown error',
                details: 'Failed to fetch progress data'
            };
        }
        // Test getLearningPathRecommendations with details
        try {
            const data = await _analyticsService.analyticsService.getLearningPathRecommendations(avatarId, 3);
            results.recommendations = {
                success: true,
                data,
                error: '',
                details: `Generated ${data.length} recommendations. Top: ${data[0]?.gameId || 'none'}`
            };
        } catch (err) {
            results.recommendations = {
                success: false,
                error: err instanceof Error ? err.message : 'Unknown error',
                details: 'Failed to generate recommendations'
            };
        }
        // Test getPerformanceMetrics with details
        try {
            const data = await _analyticsService.analyticsService.getPerformanceMetrics(avatarId);
            results.metrics = {
                success: true,
                data,
                error: '',
                details: `Games played: ${data.totalGamesPlayed}, Engagement: ${data.engagementScore}`
            };
        } catch (err) {
            results.metrics = {
                success: false,
                error: err instanceof Error ? err.message : 'Unknown error',
                details: 'Failed to calculate metrics'
            };
        }
        return results;
    }
    constructor(){
        this.supabase = (0, _client.createClient)();
    }
}
const analyticsDebugger = new AnalyticsDebugger();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxQcm9qZWN0c1xcZmFtaWx5LW9yaWVudGVkXFxzcmNcXHV0aWxzXFxhbmFseXRpY3NEZWJ1Zy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQW5hbHl0aWNzIGRlYnVnZ2luZyBhbmQgdGVzdGluZyB1dGlsaXRpZXNcclxuICogSGVscHMgZGlhZ25vc2UgaXNzdWVzIHdpdGggYW5hbHl0aWNzIHNlcnZpY2UgYW5kIGRhdGFiYXNlIGNvbm5lY3Rpdml0eVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ0AvbGliL3N1cGFiYXNlL2NsaWVudCc7XHJcbmltcG9ydCB7IGFuYWx5dGljc1NlcnZpY2UgfSBmcm9tICcuL2FuYWx5dGljc1NlcnZpY2UnO1xyXG5pbXBvcnQgeyBtb2NrRGF0YUdlbmVyYXRvciB9IGZyb20gJy4vbW9ja0RhdGFHZW5lcmF0b3InO1xyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnQHN1cGFiYXNlL3N1cGFiYXNlLWpzJztcclxuaW1wb3J0IHsgTGVhcm5pbmdQcm9ncmVzc0RhdGEsIExlYXJuaW5nUGF0aFJlY29tbWVuZGF0aW9uLCBQZXJmb3JtYW5jZU1ldHJpY3MgfSBmcm9tICcuL2FuYWx5dGljc1NlcnZpY2UnO1xyXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XHJcblxyXG5pbnRlcmZhY2UgQXZhdGFyIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIHVzZXJfaWQ6IHN0cmluZztcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgW2tleTogc3RyaW5nXTogdW5rbm93bjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFuYWx5dGljc0RlYnVnZ2VyIHtcclxuICBwcml2YXRlIHN1cGFiYXNlID0gY3JlYXRlQ2xpZW50KCk7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRlc3QgYmFzaWMgU3VwYWJhc2UgY29ubmVjdGl2aXR5IGFuZCBwZXJtaXNzaW9uc1xyXG4gICAqL1xyXG4gIGFzeW5jIHRlc3RTdXBhYmFzZUNvbm5lY3Rpb24oKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nOyB1c2VyPzogVXNlciB8IG51bGwgfT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gVGVzdCBhdXRoIHN0YXR1c1xyXG4gICAgICBjb25zdCB7IGRhdGE6IHsgc2Vzc2lvbiB9LCBlcnJvcjogYXV0aEVycm9yIH0gPSBhd2FpdCB0aGlzLnN1cGFiYXNlLmF1dGguZ2V0U2Vzc2lvbigpO1xyXG4gICAgICBpZiAoYXV0aEVycm9yKSB0aHJvdyBhdXRoRXJyb3I7XHJcblxyXG4gICAgICBsb2dnZXIuaW5mbygnU3VwYWJhc2UgQXV0aCBTZXNzaW9uOicsIHNlc3Npb24pO1xyXG5cclxuICAgICAgLy8gVGVzdCBiYXNpYyBxdWVyeSAoc2hvdWxkIHdvcmsgd2l0aG91dCBhdXRoKVxyXG4gICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCB0aGlzLnN1cGFiYXNlXHJcbiAgICAgICAgLmZyb20oJ3N1YnNjcmlwdGlvbl9wbGFucycpXHJcbiAgICAgICAgLnNlbGVjdCgnaWQsIG5hbWUnKVxyXG4gICAgICAgIC5saW1pdCgxKTtcclxuXHJcbiAgICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgdXNlcjogc2Vzc2lvbj8udXNlciB8fCBudWxsXHJcbiAgICAgIH07XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICBlcnJvcjogZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGVzdCBhdmF0YXIgYWNjZXNzIGFuZCBSTFMgcG9saWNpZXNcclxuICAgKi9cclxuICBhc3luYyB0ZXN0QXZhdGFyQWNjZXNzKGF2YXRhcklkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgZXJyb3I/OiBzdHJpbmc7IGF2YXRhcj86IEF2YXRhciB9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBsb2dnZXIuaW5mbygnVGVzdGluZyBhdmF0YXIgYWNjZXNzIGZvcjonLCBhdmF0YXJJZCk7XHJcblxyXG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCB0aGlzLnN1cGFiYXNlXHJcbiAgICAgICAgLmZyb20oJ2F2YXRhcnMnKVxyXG4gICAgICAgIC5zZWxlY3QoJyonKVxyXG4gICAgICAgIC5lcSgnaWQnLCBhdmF0YXJJZClcclxuICAgICAgICAuc2luZ2xlKCk7XHJcblxyXG4gICAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgIGF2YXRhcjogZGF0YVxyXG4gICAgICB9O1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgZXJyb3I6IGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRlc3QgYW5hbHl0aWNzIHRhYmxlIGFjY2Vzc1xyXG4gICAqL1xyXG4gIGFzeW5jIHRlc3RBbmFseXRpY3NUYWJsZXNBY2Nlc3MoYXZhdGFySWQ6IHN0cmluZyk6IFByb21pc2U8e1xyXG4gICAgZ2FtZVNlc3Npb25zOiB7IHN1Y2Nlc3M6IGJvb2xlYW47IGNvdW50OiBudW1iZXI7IGVycm9yPzogc3RyaW5nIH07XHJcbiAgICBnYW1lRXZlbnRzOiB7IHN1Y2Nlc3M6IGJvb2xlYW47IGNvdW50OiBudW1iZXI7IGVycm9yPzogc3RyaW5nIH07XHJcbiAgICBsZWFybmluZ1Byb2dyZXNzOiB7IHN1Y2Nlc3M6IGJvb2xlYW47IGNvdW50OiBudW1iZXI7IGVycm9yPzogc3RyaW5nIH07XHJcbiAgfT4ge1xyXG4gICAgY29uc3QgcmVzdWx0cyA9IHtcclxuICAgICAgZ2FtZVNlc3Npb25zOiB7IHN1Y2Nlc3M6IGZhbHNlLCBjb3VudDogMCwgZXJyb3I6ICcnIH0sXHJcbiAgICAgIGdhbWVFdmVudHM6IHsgc3VjY2VzczogZmFsc2UsIGNvdW50OiAwLCBlcnJvcjogJycgfSxcclxuICAgICAgbGVhcm5pbmdQcm9ncmVzczogeyBzdWNjZXNzOiBmYWxzZSwgY291bnQ6IDAsIGVycm9yOiAnJyB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFRlc3QgZ2FtZV9zZXNzaW9ucyB0YWJsZVxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgdGhpcy5zdXBhYmFzZVxyXG4gICAgICAgIC5mcm9tKCdnYW1lX3Nlc3Npb25zJylcclxuICAgICAgICAuc2VsZWN0KCcqJylcclxuICAgICAgICAuZXEoJ2F2YXRhcl9pZCcsIGF2YXRhcklkKTtcclxuXHJcbiAgICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XHJcbiAgICAgIHJlc3VsdHMuZ2FtZVNlc3Npb25zID0geyBzdWNjZXNzOiB0cnVlLCBjb3VudDogZGF0YT8ubGVuZ3RoIHx8IDAsIGVycm9yOiAnJyB9O1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIHJlc3VsdHMuZ2FtZVNlc3Npb25zID0ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgIGVycm9yOiBlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGVzdCBnYW1lX2V2ZW50cyB0YWJsZVxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgdGhpcy5zdXBhYmFzZVxyXG4gICAgICAgIC5mcm9tKCdnYW1lX2V2ZW50cycpXHJcbiAgICAgICAgLnNlbGVjdCgnKicpXHJcbiAgICAgICAgLmVxKCdhdmF0YXJfaWQnLCBhdmF0YXJJZClcclxuICAgICAgICAubGltaXQoMTApO1xyXG5cclxuICAgICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcclxuICAgICAgcmVzdWx0cy5nYW1lRXZlbnRzID0geyBzdWNjZXNzOiB0cnVlLCBjb3VudDogZGF0YT8ubGVuZ3RoIHx8IDAsIGVycm9yOiAnJyB9O1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIHJlc3VsdHMuZ2FtZUV2ZW50cyA9IHtcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICBlcnJvcjogZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRlc3QgbGVhcm5pbmdfcHJvZ3Jlc3MgdGFibGVcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHRoaXMuc3VwYWJhc2VcclxuICAgICAgICAuZnJvbSgnbGVhcm5pbmdfcHJvZ3Jlc3MnKVxyXG4gICAgICAgIC5zZWxlY3QoJyonKVxyXG4gICAgICAgIC5lcSgnYXZhdGFyX2lkJywgYXZhdGFySWQpO1xyXG5cclxuICAgICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcclxuICAgICAgcmVzdWx0cy5sZWFybmluZ1Byb2dyZXNzID0geyBzdWNjZXNzOiB0cnVlLCBjb3VudDogZGF0YT8ubGVuZ3RoIHx8IDAsIGVycm9yOiAnJyB9O1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIHJlc3VsdHMubGVhcm5pbmdQcm9ncmVzcyA9IHtcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICBjb3VudDogMCxcclxuICAgICAgICBlcnJvcjogZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHRzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGVzdCBhbmFseXRpY3Mgc2VydmljZSBtZXRob2RzXHJcbiAgICovXHJcbiAgYXN5bmMgdGVzdEFuYWx5dGljc1NlcnZpY2UoYXZhdGFySWQ6IHN0cmluZyk6IFByb21pc2U8e1xyXG4gICAgcHJvZ3Jlc3M6IHsgc3VjY2VzczogYm9vbGVhbjsgZGF0YT86IExlYXJuaW5nUHJvZ3Jlc3NEYXRhW107IGVycm9yPzogc3RyaW5nIH07XHJcbiAgICByZWNvbW1lbmRhdGlvbnM6IHsgc3VjY2VzczogYm9vbGVhbjsgZGF0YT86IExlYXJuaW5nUGF0aFJlY29tbWVuZGF0aW9uW107IGVycm9yPzogc3RyaW5nIH07XHJcbiAgICBtZXRyaWNzOiB7IHN1Y2Nlc3M6IGJvb2xlYW47IGRhdGE/OiBQZXJmb3JtYW5jZU1ldHJpY3M7IGVycm9yPzogc3RyaW5nIH07XHJcbiAgfT4ge1xyXG4gICAgY29uc3QgcmVzdWx0czoge1xyXG4gICAgICBwcm9ncmVzczogeyBzdWNjZXNzOiBib29sZWFuOyBkYXRhPzogTGVhcm5pbmdQcm9ncmVzc0RhdGFbXTsgZXJyb3I/OiBzdHJpbmcgfTtcclxuICAgICAgcmVjb21tZW5kYXRpb25zOiB7IHN1Y2Nlc3M6IGJvb2xlYW47IGRhdGE/OiBMZWFybmluZ1BhdGhSZWNvbW1lbmRhdGlvbltdOyBlcnJvcj86IHN0cmluZyB9O1xyXG4gICAgICBtZXRyaWNzOiB7IHN1Y2Nlc3M6IGJvb2xlYW47IGRhdGE/OiBQZXJmb3JtYW5jZU1ldHJpY3M7IGVycm9yPzogc3RyaW5nIH07XHJcbiAgICB9ID0ge1xyXG4gICAgICBwcm9ncmVzczogeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICcnIH0sXHJcbiAgICAgIHJlY29tbWVuZGF0aW9uczogeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICcnIH0sXHJcbiAgICAgIG1ldHJpY3M6IHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnJyB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFRlc3QgZ2V0QXZhdGFyUHJvZ3Jlc3NcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBhbmFseXRpY3NTZXJ2aWNlLmdldEF2YXRhclByb2dyZXNzKGF2YXRhcklkKTtcclxuICAgICAgcmVzdWx0cy5wcm9ncmVzcyA9IHsgc3VjY2VzczogdHJ1ZSwgZGF0YSwgZXJyb3I6ICcnIH07XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgcmVzdWx0cy5wcm9ncmVzcyA9IHtcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICBlcnJvcjogZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRlc3QgZ2V0TGVhcm5pbmdQYXRoUmVjb21tZW5kYXRpb25zXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgYW5hbHl0aWNzU2VydmljZS5nZXRMZWFybmluZ1BhdGhSZWNvbW1lbmRhdGlvbnMoYXZhdGFySWQsIDMpO1xyXG4gICAgICByZXN1bHRzLnJlY29tbWVuZGF0aW9ucyA9IHsgc3VjY2VzczogdHJ1ZSwgZGF0YSwgZXJyb3I6ICcnIH07XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgcmVzdWx0cy5yZWNvbW1lbmRhdGlvbnMgPSB7XHJcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgZXJyb3I6IGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUZXN0IGdldFBlcmZvcm1hbmNlTWV0cmljc1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGFuYWx5dGljc1NlcnZpY2UuZ2V0UGVyZm9ybWFuY2VNZXRyaWNzKGF2YXRhcklkKTtcclxuICAgICAgcmVzdWx0cy5tZXRyaWNzID0geyBzdWNjZXNzOiB0cnVlLCBkYXRhLCBlcnJvcjogJycgfTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICByZXN1bHRzLm1ldHJpY3MgPSB7XHJcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgZXJyb3I6IGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0cztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSB0ZXN0IHNlc3Npb24gZGF0YSBmb3IgdGhlIGRlbW8gYXZhdGFyIChzaW1wbGUgdmVyc2lvbilcclxuICAgKi9cclxuICBhc3luYyBjcmVhdGVUZXN0U2Vzc2lvbkRhdGEoYXZhdGFySWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBzZXNzaW9uSWQ/OiBzdHJpbmc7IGVycm9yPzogc3RyaW5nIH0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGxvZ2dlci5pbmZvKCdDcmVhdGluZyBzaW1wbGUgdGVzdCBzZXNzaW9uIGZvciBhdmF0YXI6JywgYXZhdGFySWQpO1xyXG4gICAgICByZXR1cm4gYXdhaXQgbW9ja0RhdGFHZW5lcmF0b3IuZ2VuZXJhdGVRdWlja1Rlc3REYXRhKGF2YXRhcklkKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIGVycm9yOiBlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZW5lcmF0ZSBjb21wcmVoZW5zaXZlIG1vY2sgZGF0YSBmb3IgdGVzdGluZ1xyXG4gICAqL1xyXG4gIGFzeW5jIGdlbmVyYXRlQ29tcHJlaGVuc2l2ZU1vY2tEYXRhKCk6IFByb21pc2U8eyBcclxuICAgIHN1Y2Nlc3M6IGJvb2xlYW47IFxyXG4gICAgc3VtbWFyeT86IHsgXHJcbiAgICAgIGF2YXRhcnNQcm9jZXNzZWQ6IG51bWJlcjsgXHJcbiAgICAgIHRvdGFsU2Vzc2lvbnM6IG51bWJlcjsgXHJcbiAgICAgIGFiYW5kb25lZFNlc3Npb25zOiBudW1iZXI7IFxyXG4gICAgfTsgXHJcbiAgICBlcnJvcj86IHN0cmluZyBcclxuICB9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICByZXR1cm4gYXdhaXQgbW9ja0RhdGFHZW5lcmF0b3IuZ2VuZXJhdGVDb21wcmVoZW5zaXZlTW9ja0RhdGEoKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIGVycm9yOiBlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbGVhciBhbGwgYW5hbHl0aWNzIGRhdGEgKHJlcXVpcmVzIG1hbnVhbCBkYXRhYmFzZSBjbGVhbnVwKVxyXG4gICAqL1xyXG4gIGFzeW5jIGNsZWFyQWxsQW5hbHl0aWNzRGF0YSgpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgZXJyb3I/OiBzdHJpbmcgfT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgcmV0dXJuIGF3YWl0IG1vY2tEYXRhR2VuZXJhdG9yLmNsZWFyQWxsQW5hbHl0aWNzRGF0YSgpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgZXJyb3I6IGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJ1biBjb21wcmVoZW5zaXZlIGFuYWx5dGljcyBkaWFnbm9zdGljc1xyXG4gICAqL1xyXG4gIGFzeW5jIHJ1bkZ1bGxEaWFnbm9zdGljKGF2YXRhcklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGxvZ2dlci5pbmZvKCc9PT0gQW5hbHl0aWNzIERpYWdub3N0aWMgUmVwb3J0ID09PScpO1xyXG4gICAgbG9nZ2VyLmluZm8oJ0F2YXRhciBJRDonLCBhdmF0YXJJZCk7XHJcblxyXG4gICAgLy8gVGVzdCBTdXBhYmFzZSBjb25uZWN0aW9uXHJcbiAgICBsb2dnZXIuaW5mbygnXFxuMS4gVGVzdGluZyBTdXBhYmFzZSBDb25uZWN0aW9uLi4uJyk7XHJcbiAgICBjb25zdCBjb25uZWN0aW9uVGVzdCA9IGF3YWl0IHRoaXMudGVzdFN1cGFiYXNlQ29ubmVjdGlvbigpO1xyXG4gICAgbG9nZ2VyLmluZm8oJ0Nvbm5lY3Rpb246JywgY29ubmVjdGlvblRlc3QpO1xyXG5cclxuICAgIC8vIFRlc3QgYXZhdGFyIGFjY2Vzc1xyXG4gICAgbG9nZ2VyLmluZm8oJ1xcbjIuIFRlc3RpbmcgQXZhdGFyIEFjY2Vzcy4uLicpO1xyXG4gICAgY29uc3QgYXZhdGFyVGVzdCA9IGF3YWl0IHRoaXMudGVzdEF2YXRhckFjY2VzcyhhdmF0YXJJZCk7XHJcbiAgICBsb2dnZXIuaW5mbygnQXZhdGFyIEFjY2VzczonLCBhdmF0YXJUZXN0KTtcclxuXHJcbiAgICAvLyBUZXN0IGFuYWx5dGljcyB0YWJsZXNcclxuICAgIGxvZ2dlci5pbmZvKCdcXG4zLiBUZXN0aW5nIEFuYWx5dGljcyBUYWJsZXMgQWNjZXNzLi4uJyk7XHJcbiAgICBjb25zdCB0YWJsZXNUZXN0ID0gYXdhaXQgdGhpcy50ZXN0QW5hbHl0aWNzVGFibGVzQWNjZXNzKGF2YXRhcklkKTtcclxuICAgIGxvZ2dlci5pbmZvKCdUYWJsZXMgQWNjZXNzOicsIHRhYmxlc1Rlc3QpO1xyXG5cclxuICAgIC8vIFRlc3QgYW5hbHl0aWNzIHNlcnZpY2UgbWV0aG9kcyB3aXRoIGRldGFpbGVkIGxvZ2dpbmdcclxuICAgIGxvZ2dlci5pbmZvKCdcXG40LiBUZXN0aW5nIEFuYWx5dGljcyBTZXJ2aWNlIE1ldGhvZHMuLi4nKTtcclxuICAgIGNvbnN0IHNlcnZpY2VUZXN0ID0gYXdhaXQgdGhpcy50ZXN0QW5hbHl0aWNzU2VydmljZVdpdGhEZXRhaWxzKGF2YXRhcklkKTtcclxuICAgIGxvZ2dlci5pbmZvKCdTZXJ2aWNlIE1ldGhvZHM6Jywgc2VydmljZVRlc3QpO1xyXG5cclxuICAgIC8vIElmIG5vIGRhdGEgZXhpc3RzLCBjcmVhdGUgdGVzdCBkYXRhXHJcbiAgICBpZiAodGFibGVzVGVzdC5nYW1lU2Vzc2lvbnMuc3VjY2VzcyAmJiB0YWJsZXNUZXN0LmdhbWVTZXNzaW9ucy5jb3VudCA9PT0gMCkge1xyXG4gICAgICBsb2dnZXIuaW5mbygnXFxuNS4gTm8gYW5hbHl0aWNzIGRhdGEgZm91bmQuIENyZWF0aW5nIHRlc3QgZGF0YS4uLicpO1xyXG4gICAgICBjb25zdCB0ZXN0RGF0YVJlc3VsdCA9IGF3YWl0IHRoaXMuY3JlYXRlVGVzdFNlc3Npb25EYXRhKGF2YXRhcklkKTtcclxuICAgICAgbG9nZ2VyLmluZm8oJ1Rlc3QgRGF0YSBDcmVhdGlvbjonLCB0ZXN0RGF0YVJlc3VsdCk7XHJcblxyXG4gICAgICBpZiAodGVzdERhdGFSZXN1bHQuc3VjY2Vzcykge1xyXG4gICAgICAgIGxvZ2dlci5pbmZvKCdcXG42LiBSZS10ZXN0aW5nIEFuYWx5dGljcyBTZXJ2aWNlIGFmdGVyIHRlc3QgZGF0YSBjcmVhdGlvbi4uLicpO1xyXG4gICAgICAgIGNvbnN0IHJldGVzdFNlcnZpY2UgPSBhd2FpdCB0aGlzLnRlc3RBbmFseXRpY3NTZXJ2aWNlV2l0aERldGFpbHMoYXZhdGFySWQpO1xyXG4gICAgICAgIGxvZ2dlci5pbmZvKCdTZXJ2aWNlIE1ldGhvZHMgKEFmdGVyIFRlc3QgRGF0YSk6JywgcmV0ZXN0U2VydmljZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsb2dnZXIuaW5mbygnXFxuPT09IEVuZCBEaWFnbm9zdGljIFJlcG9ydCA9PT0nKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEVuaGFuY2VkIHRlc3Qgb2YgYW5hbHl0aWNzIHNlcnZpY2UgbWV0aG9kcyB3aXRoIGRldGFpbGVkIGRpYWdub3N0aWNzXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhc3luYyB0ZXN0QW5hbHl0aWNzU2VydmljZVdpdGhEZXRhaWxzKGF2YXRhcklkOiBzdHJpbmcpOiBQcm9taXNlPHtcclxuICAgIHByb2dyZXNzOiB7IHN1Y2Nlc3M6IGJvb2xlYW47IGRhdGE/OiBMZWFybmluZ1Byb2dyZXNzRGF0YVtdOyBlcnJvcj86IHN0cmluZzsgZGV0YWlscz86IHN0cmluZyB9O1xyXG4gICAgcmVjb21tZW5kYXRpb25zOiB7IHN1Y2Nlc3M6IGJvb2xlYW47IGRhdGE/OiBMZWFybmluZ1BhdGhSZWNvbW1lbmRhdGlvbltdOyBlcnJvcj86IHN0cmluZzsgZGV0YWlscz86IHN0cmluZyB9O1xyXG4gICAgbWV0cmljczogeyBzdWNjZXNzOiBib29sZWFuOyBkYXRhPzogUGVyZm9ybWFuY2VNZXRyaWNzOyBlcnJvcj86IHN0cmluZzsgZGV0YWlscz86IHN0cmluZyB9O1xyXG4gIH0+IHtcclxuICAgIGNvbnN0IHJlc3VsdHM6IHtcclxuICAgICAgcHJvZ3Jlc3M6IHsgc3VjY2VzczogYm9vbGVhbjsgZGF0YT86IExlYXJuaW5nUHJvZ3Jlc3NEYXRhW107IGVycm9yOiBzdHJpbmc7IGRldGFpbHM6IHN0cmluZyB9O1xyXG4gICAgICByZWNvbW1lbmRhdGlvbnM6IHsgc3VjY2VzczogYm9vbGVhbjsgZGF0YT86IExlYXJuaW5nUGF0aFJlY29tbWVuZGF0aW9uW107IGVycm9yOiBzdHJpbmc7IGRldGFpbHM6IHN0cmluZyB9O1xyXG4gICAgICBtZXRyaWNzOiB7IHN1Y2Nlc3M6IGJvb2xlYW47IGRhdGE/OiBQZXJmb3JtYW5jZU1ldHJpY3M7IGVycm9yOiBzdHJpbmc7IGRldGFpbHM6IHN0cmluZyB9O1xyXG4gICAgfSA9IHtcclxuICAgICAgcHJvZ3Jlc3M6IHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnJywgZGV0YWlsczogJycgfSxcclxuICAgICAgcmVjb21tZW5kYXRpb25zOiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJycsIGRldGFpbHM6ICcnIH0sXHJcbiAgICAgIG1ldHJpY3M6IHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnJywgZGV0YWlsczogJycgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBUZXN0IGdldEF2YXRhclByb2dyZXNzIHdpdGggZGV0YWlsc1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGFuYWx5dGljc1NlcnZpY2UuZ2V0QXZhdGFyUHJvZ3Jlc3MoYXZhdGFySWQpO1xyXG4gICAgICByZXN1bHRzLnByb2dyZXNzID0geyBcclxuICAgICAgICBzdWNjZXNzOiB0cnVlLCBcclxuICAgICAgICBkYXRhLCBcclxuICAgICAgICBlcnJvcjogJycsXHJcbiAgICAgICAgZGV0YWlsczogYEZvdW5kICR7ZGF0YS5sZW5ndGh9IHByb2dyZXNzIHJlY29yZHMuIExhdGVzdDogJHtkYXRhWzBdPy5nYW1lSWQgfHwgJ25vbmUnfWBcclxuICAgICAgfTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICByZXN1bHRzLnByb2dyZXNzID0ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIGVycm9yOiBlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InLFxyXG4gICAgICAgIGRldGFpbHM6ICdGYWlsZWQgdG8gZmV0Y2ggcHJvZ3Jlc3MgZGF0YSdcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUZXN0IGdldExlYXJuaW5nUGF0aFJlY29tbWVuZGF0aW9ucyB3aXRoIGRldGFpbHNcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBhbmFseXRpY3NTZXJ2aWNlLmdldExlYXJuaW5nUGF0aFJlY29tbWVuZGF0aW9ucyhhdmF0YXJJZCwgMyk7XHJcbiAgICAgIHJlc3VsdHMucmVjb21tZW5kYXRpb25zID0geyBcclxuICAgICAgICBzdWNjZXNzOiB0cnVlLCBcclxuICAgICAgICBkYXRhLCBcclxuICAgICAgICBlcnJvcjogJycsXHJcbiAgICAgICAgZGV0YWlsczogYEdlbmVyYXRlZCAke2RhdGEubGVuZ3RofSByZWNvbW1lbmRhdGlvbnMuIFRvcDogJHtkYXRhWzBdPy5nYW1lSWQgfHwgJ25vbmUnfWBcclxuICAgICAgfTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICByZXN1bHRzLnJlY29tbWVuZGF0aW9ucyA9IHtcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICBlcnJvcjogZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyxcclxuICAgICAgICBkZXRhaWxzOiAnRmFpbGVkIHRvIGdlbmVyYXRlIHJlY29tbWVuZGF0aW9ucydcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUZXN0IGdldFBlcmZvcm1hbmNlTWV0cmljcyB3aXRoIGRldGFpbHNcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBhbmFseXRpY3NTZXJ2aWNlLmdldFBlcmZvcm1hbmNlTWV0cmljcyhhdmF0YXJJZCk7XHJcbiAgICAgIHJlc3VsdHMubWV0cmljcyA9IHsgXHJcbiAgICAgICAgc3VjY2VzczogdHJ1ZSwgXHJcbiAgICAgICAgZGF0YSwgXHJcbiAgICAgICAgZXJyb3I6ICcnLFxyXG4gICAgICAgIGRldGFpbHM6IGBHYW1lcyBwbGF5ZWQ6ICR7ZGF0YS50b3RhbEdhbWVzUGxheWVkfSwgRW5nYWdlbWVudDogJHtkYXRhLmVuZ2FnZW1lbnRTY29yZX1gXHJcbiAgICAgIH07XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgcmVzdWx0cy5tZXRyaWNzID0ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIGVycm9yOiBlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InLFxyXG4gICAgICAgIGRldGFpbHM6ICdGYWlsZWQgdG8gY2FsY3VsYXRlIG1ldHJpY3MnXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdHM7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBFeHBvcnQgc2luZ2xldG9uIGluc3RhbmNlXHJcbmV4cG9ydCBjb25zdCBhbmFseXRpY3NEZWJ1Z2dlciA9IG5ldyBBbmFseXRpY3NEZWJ1Z2dlcigpOyAiXSwibmFtZXMiOlsiQW5hbHl0aWNzRGVidWdnZXIiLCJhbmFseXRpY3NEZWJ1Z2dlciIsInRlc3RTdXBhYmFzZUNvbm5lY3Rpb24iLCJkYXRhIiwic2Vzc2lvbiIsImVycm9yIiwiYXV0aEVycm9yIiwic3VwYWJhc2UiLCJhdXRoIiwiZ2V0U2Vzc2lvbiIsImxvZ2dlciIsImluZm8iLCJmcm9tIiwic2VsZWN0IiwibGltaXQiLCJzdWNjZXNzIiwidXNlciIsImVyciIsIkVycm9yIiwibWVzc2FnZSIsInRlc3RBdmF0YXJBY2Nlc3MiLCJhdmF0YXJJZCIsImVxIiwic2luZ2xlIiwiYXZhdGFyIiwidGVzdEFuYWx5dGljc1RhYmxlc0FjY2VzcyIsInJlc3VsdHMiLCJnYW1lU2Vzc2lvbnMiLCJjb3VudCIsImdhbWVFdmVudHMiLCJsZWFybmluZ1Byb2dyZXNzIiwibGVuZ3RoIiwidGVzdEFuYWx5dGljc1NlcnZpY2UiLCJwcm9ncmVzcyIsInJlY29tbWVuZGF0aW9ucyIsIm1ldHJpY3MiLCJhbmFseXRpY3NTZXJ2aWNlIiwiZ2V0QXZhdGFyUHJvZ3Jlc3MiLCJnZXRMZWFybmluZ1BhdGhSZWNvbW1lbmRhdGlvbnMiLCJnZXRQZXJmb3JtYW5jZU1ldHJpY3MiLCJjcmVhdGVUZXN0U2Vzc2lvbkRhdGEiLCJtb2NrRGF0YUdlbmVyYXRvciIsImdlbmVyYXRlUXVpY2tUZXN0RGF0YSIsImdlbmVyYXRlQ29tcHJlaGVuc2l2ZU1vY2tEYXRhIiwiY2xlYXJBbGxBbmFseXRpY3NEYXRhIiwicnVuRnVsbERpYWdub3N0aWMiLCJjb25uZWN0aW9uVGVzdCIsImF2YXRhclRlc3QiLCJ0YWJsZXNUZXN0Iiwic2VydmljZVRlc3QiLCJ0ZXN0QW5hbHl0aWNzU2VydmljZVdpdGhEZXRhaWxzIiwidGVzdERhdGFSZXN1bHQiLCJyZXRlc3RTZXJ2aWNlIiwiZGV0YWlscyIsImdhbWVJZCIsInRvdGFsR2FtZXNQbGF5ZWQiLCJlbmdhZ2VtZW50U2NvcmUiLCJjcmVhdGVDbGllbnQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Q0FHQzs7Ozs7Ozs7Ozs7SUFnQllBLGlCQUFpQjtlQUFqQkE7O0lBZ1dBQyxpQkFBaUI7ZUFBakJBOzs7d0JBOVdnQjtrQ0FDSTttQ0FDQzt3QkFHWDtBQVNoQixNQUFNRDtJQUdYOztHQUVDLEdBQ0QsTUFBTUUseUJBQTRGO1FBQ2hHLElBQUk7WUFDRixtQkFBbUI7WUFDbkIsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRSxFQUFFQyxPQUFPQyxTQUFTLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQ0MsUUFBUSxDQUFDQyxJQUFJLENBQUNDLFVBQVU7WUFDbkYsSUFBSUgsV0FBVyxNQUFNQTtZQUVyQkksY0FBTSxDQUFDQyxJQUFJLENBQUMsMEJBQTBCUDtZQUV0Qyw4Q0FBOEM7WUFDOUMsTUFBTSxFQUFFQyxLQUFLLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQ0UsUUFBUSxDQUNsQ0ssSUFBSSxDQUFDLHNCQUNMQyxNQUFN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