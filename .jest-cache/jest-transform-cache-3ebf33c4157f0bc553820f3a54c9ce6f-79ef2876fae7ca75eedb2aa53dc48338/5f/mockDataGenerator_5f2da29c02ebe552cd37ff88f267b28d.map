{"version":3,"sources":["D:\\Projects\\family-oriented\\src\\utils\\mockDataGenerator.ts"],"sourcesContent":["/**\r\n * Mock Data Generator for Analytics Testing\r\n * Creates realistic analytics data using the demo user with multiple avatars\r\n * representing different learning levels and gameplay patterns\r\n */\r\n\r\nimport { analyticsService } from './analyticsService';\r\nimport { GameType } from './gameUtils';\r\nimport { createClient } from '@/lib/supabase/client';\r\nimport { logger } from './logger';\r\n\r\ntype AvatarProfile = {\r\n  id: string;\r\n  name: string;\r\n  level: SkillLevel;\r\n  pattern: LearningPattern;\r\n};\r\n\r\n// Avatar profiles representing different learning levels and patterns\r\nconst AVATAR_PROFILES: AvatarProfile[] = [\r\n  {\r\n    id: '00000000-0000-0000-0000-000000000002', // Existing demo avatar\r\n    name: 'My Child',\r\n    level: 'beginner',\r\n    pattern: 'steady_improvement'\r\n  },\r\n  {\r\n    id: '00000000-0000-0000-0000-000000000012',\r\n    name: 'Quick Learner',\r\n    level: 'advanced',\r\n    pattern: 'high_performer'\r\n  },\r\n  {\r\n    id: '00000000-0000-0000-0000-000000000013',\r\n    name: 'Struggling Student',\r\n    level: 'beginner',\r\n    pattern: 'needs_support'\r\n  },\r\n  {\r\n    id: '00000000-0000-0000-0000-000000000014',\r\n    name: 'Consistent Player',\r\n    level: 'intermediate',\r\n    pattern: 'steady_player'\r\n  },\r\n  {\r\n    id: '00000000-0000-0000-0000-000000000015',\r\n    name: 'Math Enthusiast',\r\n    level: 'intermediate',\r\n    pattern: 'subject_focused'\r\n  }\r\n] as const;\r\n\r\ntype LearningPattern = 'steady_improvement' | 'high_performer' | 'needs_support' | 'steady_player' | 'subject_focused';\r\ntype SkillLevel = 'beginner' | 'intermediate' | 'advanced';\r\n\r\ninterface GameSessionTemplate {\r\n  gameId: GameType;\r\n  difficulty: string;\r\n  baseScore: number;\r\n  variance: number;\r\n  duration: number;\r\n  questionsCount: number;\r\n}\r\n\r\n\r\ninterface QuickTestResult {\r\n  success: boolean;\r\n  sessionId?: string;\r\n  error?: string;\r\n}\r\n\r\ninterface ClearDataResult {\r\n  success: boolean;\r\n  error?: string;\r\n}\r\n\r\ninterface SessionForProgress {\r\n  game_type: GameType;\r\n  completion_status: string;\r\n  score_data?: { finalScore?: number } | null;\r\n}\r\n\r\ninterface ProgressSummary {\r\n  skillLevel: 'beginner' | 'intermediate' | 'advanced';\r\n  masteryScore: number;\r\n  learningObjectivesMet: string[];\r\n  prerequisiteCompletion: Record<string, boolean>;\r\n  totalSessions: number;\r\n  averagePerformance: number;\r\n  improvementTrend: 'improving' | 'stable' | 'declining';\r\n}\r\n\r\n/**\r\n * Enhanced Mock Data Generator Class\r\n */\r\nexport class MockDataGenerator {\r\n  private supabase = createClient();\r\n  \r\n  /**\r\n   * Generate realistic session templates based on avatar profile\r\n   */\r\n  private getSessionTemplatesForProfile(level: SkillLevel, pattern: LearningPattern): GameSessionTemplate[] {\r\n    const baseTemplates: Record<SkillLevel, GameSessionTemplate[]> = {\r\n      beginner: [\r\n        { gameId: 'numbers', difficulty: 'beginner', baseScore: 60, variance: 20, duration: 120, questionsCount: 5 },\r\n        { gameId: 'letters', difficulty: 'beginner', baseScore: 65, variance: 15, duration: 90, questionsCount: 4 },\r\n        { gameId: 'colors', difficulty: 'beginner', baseScore: 75, variance: 10, duration: 60, questionsCount: 6 },\r\n        { gameId: 'shapes', difficulty: 'beginner', baseScore: 70, variance: 15, duration: 80, questionsCount: 5 }\r\n      ],\r\n      intermediate: [\r\n        { gameId: 'math', difficulty: 'intermediate', baseScore: 75, variance: 15, duration: 180, questionsCount: 8 },\r\n        { gameId: 'math', difficulty: 'intermediate', baseScore: 70, variance: 20, duration: 200, questionsCount: 8 },\r\n        { gameId: 'fill-in-the-blank', difficulty: 'intermediate', baseScore: 80, variance: 12, duration: 150, questionsCount: 6 },\r\n        { gameId: 'rhyming', difficulty: 'intermediate', baseScore: 72, variance: 18, duration: 120, questionsCount: 7 },\r\n        { gameId: 'patterns', difficulty: 'intermediate', baseScore: 78, variance: 15, duration: 140, questionsCount: 6 }\r\n      ],\r\n      advanced: [\r\n        { gameId: 'math', difficulty: 'advanced', baseScore: 90, variance: 8, duration: 240, questionsCount: 12 },\r\n        { gameId: 'math', difficulty: 'advanced', baseScore: 88, variance: 10, duration: 220, questionsCount: 10 },\r\n        { gameId: 'geography', difficulty: 'advanced', baseScore: 85, variance: 12, duration: 300, questionsCount: 15 },\r\n        { gameId: 'fill-in-the-blank', difficulty: 'advanced', baseScore: 92, variance: 6, duration: 180, questionsCount: 8 }\r\n      ]\r\n    };\r\n\r\n    let templates = [...baseTemplates[level]];\r\n\r\n    // Modify templates based on learning pattern\r\n    switch (pattern) {\r\n      case 'high_performer':\r\n        templates = templates.map(t => ({ ...t, baseScore: t.baseScore + 15, variance: t.variance - 5 }));\r\n        break;\r\n      case 'needs_support':\r\n        templates = templates.map(t => ({ ...t, baseScore: t.baseScore - 20, variance: t.variance + 10 }));\r\n        break;\r\n      case 'subject_focused':\r\n        // Focus on math games\r\n        templates = templates.filter(t => ['numbers', 'math'].includes(t.gameId));\r\n        templates = templates.map(t => ({ ...t, baseScore: t.baseScore + 10 }));\r\n        break;\r\n    }\r\n\r\n    return templates;\r\n  }\r\n\r\n  /**\r\n   * Generate score with realistic progression over time\r\n   */\r\n  private generateProgressiveScore(\r\n    baseScore: number, \r\n    variance: number, \r\n    sessionNumber: number, \r\n    pattern: LearningPattern\r\n  ): number {\r\n    let progressionFactor = 0;\r\n    \r\n    switch (pattern) {\r\n      case 'steady_improvement':\r\n        progressionFactor = Math.min(sessionNumber * 2, 20); // Improve by 2% per session, max 20%\r\n        break;\r\n      case 'high_performer':\r\n        progressionFactor = Math.min(sessionNumber * 1, 10); // Already high, small improvements\r\n        break;\r\n      case 'needs_support':\r\n        progressionFactor = Math.min(sessionNumber * 0.5, 10); // Slow improvement\r\n        break;\r\n      case 'steady_player':\r\n        progressionFactor = Math.min(sessionNumber * 1.5, 15); // Steady improvement\r\n        break;\r\n      case 'subject_focused':\r\n        progressionFactor = Math.min(sessionNumber * 3, 25); // Fast improvement in focused area\r\n        break;\r\n    }\r\n\r\n    const randomVariance = (Math.random() - 0.5) * variance;\r\n    const score = Math.max(0, Math.min(100, baseScore + progressionFactor + randomVariance));\r\n    \r\n    return Math.round(score);\r\n  }\r\n\r\n  /**\r\n   * Generate realistic question attempt data\r\n   */\r\n  private generateQuestionAttempts(finalScore: number, questionsCount: number): { correct: number; attempted: number } {\r\n    const accuracy = finalScore / 100;\r\n    const attempted = questionsCount;\r\n    const correct = Math.round(attempted * accuracy);\r\n    \r\n    return { correct: Math.min(correct, attempted), attempted };\r\n  }\r\n\r\n  /**\r\n   * Generate a realistic game session with events\r\n   */\r\n  private async generateGameSession(\r\n    avatarId: string,\r\n    template: GameSessionTemplate,\r\n    sessionNumber: number,\r\n    pattern: LearningPattern\r\n  ): Promise<string> {\r\n    const finalScore = this.generateProgressiveScore(\r\n      template.baseScore,\r\n      template.variance,\r\n      sessionNumber,\r\n      pattern\r\n    );\r\n\r\n    const { correct, attempted } = this.generateQuestionAttempts(finalScore, template.questionsCount);\r\n\r\n    // Start session\r\n    const sessionId = await analyticsService.startGameSession(\r\n      avatarId,\r\n      template.gameId,\r\n      {\r\n        difficulty: template.difficulty,\r\n        questionsPerSession: template.questionsCount\r\n      }\r\n    );\r\n\r\n    // Generate realistic question events\r\n    for (let i = 0; i < attempted; i++) {\r\n      const isCorrect = i < correct || Math.random() < (finalScore / 100);\r\n      \r\n      await analyticsService.trackEvent(sessionId, avatarId, 'question_answer', {\r\n        correct: isCorrect,\r\n        questionNumber: i + 1,\r\n        timeSpent: Math.round(Math.random() * 15 + 5), // 5-20 seconds per question\r\n        hintsUsed: isCorrect ? 0 : Math.floor(Math.random() * 2) // 0-1 hints if incorrect\r\n      });\r\n\r\n      // Occasionally track other events\r\n      if (Math.random() < 0.1) {\r\n        await analyticsService.trackEvent(sessionId, avatarId, 'game_pause', {\r\n          questionNumber: i + 1\r\n        });\r\n      }\r\n    }\r\n\r\n    await analyticsService.completeGameSession(sessionId, finalScore, attempted, correct);\r\n\r\n    return sessionId;\r\n  }\r\n\r\n  /**\r\n   * Generate sessions over time for realistic progression\r\n   */\r\n  private async generateSessionsForAvatar(\r\n    profile: AvatarProfile,\r\n    sessionCount: number = 15\r\n  ): Promise<void> {\r\n    logger.info(`Generating ${sessionCount} sessions for ${profile.name} (${profile.level}, ${profile.pattern})`);\r\n    \r\n    const templates = this.getSessionTemplatesForProfile(profile.level, profile.pattern);\r\n    \r\n    for (let i = 0; i < sessionCount; i++) {\r\n      // Pick a random game template with some preference for variety\r\n      const template = templates[Math.floor(Math.random() * templates.length)];\r\n      \r\n      try {\r\n        const sessionId = await this.generateGameSession(profile.id, template, i + 1, profile.pattern);\r\n        logger.info(`  Session ${i + 1}/${sessionCount}: ${template.gameId} - ${sessionId}`);\r\n        \r\n        // Small delay to avoid overwhelming the database\r\n        await new Promise(resolve => setTimeout(resolve, 100));\r\n      } catch (error) {\r\n        logger.error(`Failed to generate session ${i + 1} for ${profile.name}:`, error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate some abandoned sessions for realistic data\r\n   */\r\n  private async generateAbandonedSessions(avatarId: string, count: number = 2): Promise<void> {\r\n    logger.info(`Generating ${count} abandoned sessions for avatar ${avatarId}`);\r\n    \r\n    for (let i = 0; i < count; i++) {\r\n      try {\r\n        const sessionId = await analyticsService.startGameSession(\r\n          avatarId,\r\n          'numbers',\r\n          { difficulty: 'beginner', questionsPerSession: 5 }\r\n        );\r\n\r\n        // Track a few events then abandon\r\n        await analyticsService.trackEvent(sessionId, avatarId, 'question_answer', {\r\n          correct: Math.random() > 0.5,\r\n          questionNumber: 1\r\n        });\r\n\r\n        if (Math.random() > 0.5) {\r\n          await analyticsService.trackEvent(sessionId, avatarId, 'question_answer', {\r\n            correct: Math.random() > 0.5,\r\n            questionNumber: 2\r\n          });\r\n        }\r\n\r\n        // Don't complete the session - it will remain as abandoned\r\n        logger.info(`  Abandoned session: ${sessionId}`);\r\n      } catch (error) {\r\n        logger.error(`Failed to generate abandoned session ${i + 1}:`, error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate validation scenarios for specific test cases\r\n   */\r\n  private async generateValidationScenarios(): Promise<void> {\r\n    logger.info('Generating validation scenarios...');\r\n\r\n    // Scenario 1: Rapid skill advancement\r\n    await this.generateRapidAdvancementScenario();\r\n    \r\n    // Scenario 2: Cross-subject learning\r\n    await this.generateCrossSubjectScenario();\r\n    \r\n    // Scenario 3: Regression detection\r\n    await this.generateRegressionScenario();\r\n    \r\n    // Scenario 4: Learning plateaus\r\n    await this.generatePlateauScenario();\r\n  }\r\n\r\n  /**\r\n   * Generate data for rapid skill advancement testing\r\n   */\r\n  private async generateRapidAdvancementScenario(): Promise<void> {\r\n    const avatarId = '00000000-0000-0000-0000-000000000002'; // My Child\r\n    const gameId = 'numbers';\r\n    const sessions = [\r\n      { score: 60, questionsCount: 10, duration: 120 },\r\n      { score: 80, questionsCount: 10, duration: 100 },\r\n      { score: 90, questionsCount: 10, duration: 90 },\r\n      { score: 95, questionsCount: 10, duration: 80 }\r\n    ];\r\n\r\n    for (const session of sessions) {\r\n      const sessionId = await analyticsService.startGameSession(\r\n        avatarId,\r\n        gameId,\r\n        {\r\n          difficulty: 'beginner',\r\n          questionsPerSession: session.questionsCount\r\n        }\r\n      );\r\n\r\n      const correct = Math.round(session.questionsCount * (session.score / 100));\r\n      for (let i = 0; i < session.questionsCount; i++) {\r\n        const isCorrect = i < correct;\r\n        await analyticsService.trackEvent(sessionId, avatarId, 'question_answer', {\r\n          correct: isCorrect,\r\n          questionNumber: i + 1,\r\n          timeSpent: Math.round(session.duration / session.questionsCount),\r\n          hintsUsed: isCorrect ? 0 : Math.floor(Math.random() * 2)\r\n        });\r\n      }\r\n\r\n      await analyticsService.completeGameSession(\r\n        sessionId,\r\n        session.score,\r\n        session.questionsCount,\r\n        correct\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate data for cross-subject learning testing\r\n   */\r\n  private async generateCrossSubjectScenario(): Promise<void> {\r\n    const avatarId = '00000000-0000-0000-0000-000000000014'; // Consistent Player\r\n    const sessions = [\r\n      { gameId: 'numbers', score: 75, questionsCount: 8, duration: 120 },\r\n      { gameId: 'letters', score: 70, questionsCount: 8, duration: 130 },\r\n      { gameId: 'colors', score: 80, questionsCount: 8, duration: 110 },\r\n      { gameId: 'shapes', score: 85, questionsCount: 8, duration: 100 }\r\n    ];\r\n\r\n    for (const session of sessions) {\r\n      const sessionId = await analyticsService.startGameSession(\r\n        avatarId,\r\n        session.gameId,\r\n        {\r\n          difficulty: 'intermediate',\r\n          questionsPerSession: session.questionsCount\r\n        }\r\n      );\r\n\r\n      const correct = Math.round(session.questionsCount * (session.score / 100));\r\n      for (let i = 0; i < session.questionsCount; i++) {\r\n        const isCorrect = i < correct;\r\n        await analyticsService.trackEvent(sessionId, avatarId, 'question_answer', {\r\n          correct: isCorrect,\r\n          questionNumber: i + 1,\r\n          timeSpent: Math.round(session.duration / session.questionsCount),\r\n          hintsUsed: isCorrect ? 0 : Math.floor(Math.random() * 2)\r\n        });\r\n      }\r\n\r\n      await analyticsService.completeGameSession(\r\n        sessionId,\r\n        session.score,\r\n        session.questionsCount,\r\n        correct\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate data for regression detection testing\r\n   */\r\n  private async generateRegressionScenario(): Promise<void> {\r\n    const avatarId = '00000000-0000-0000-0000-000000000013'; // Struggling Student\r\n    const gameId = 'math';\r\n    const sessions = [\r\n      { score: 80, questionsCount: 10, duration: 120 },\r\n      { score: 75, questionsCount: 10, duration: 130 },\r\n      { score: 65, questionsCount: 10, duration: 140 },\r\n      { score: 60, questionsCount: 10, duration: 150 }\r\n    ];\r\n\r\n    for (const session of sessions) {\r\n      const sessionId = await analyticsService.startGameSession(\r\n        avatarId,\r\n        gameId,\r\n        {\r\n          difficulty: 'intermediate',\r\n          questionsPerSession: session.questionsCount\r\n        }\r\n      );\r\n\r\n      const correct = Math.round(session.questionsCount * (session.score / 100));\r\n      for (let i = 0; i < session.questionsCount; i++) {\r\n        const isCorrect = i < correct;\r\n        await analyticsService.trackEvent(sessionId, avatarId, 'question_answer', {\r\n          correct: isCorrect,\r\n          questionNumber: i + 1,\r\n          timeSpent: Math.round(session.duration / session.questionsCount),\r\n          hintsUsed: isCorrect ? 0 : Math.floor(Math.random() * 2)\r\n        });\r\n      }\r\n\r\n      await analyticsService.completeGameSession(\r\n        sessionId,\r\n        session.score,\r\n        session.questionsCount,\r\n        correct\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate data for learning plateau testing\r\n   */\r\n  private async generatePlateauScenario(): Promise<void> {\r\n    const avatarId = '00000000-0000-0000-0000-000000000015'; // Math Enthusiast\r\n    const gameId = 'math';\r\n    const sessions = [\r\n      { score: 85, questionsCount: 10, duration: 120 },\r\n      { score: 87, questionsCount: 10, duration: 118 },\r\n      { score: 86, questionsCount: 10, duration: 122 },\r\n      { score: 88, questionsCount: 10, duration: 115 }\r\n    ];\r\n\r\n    for (const session of sessions) {\r\n      const sessionId = await analyticsService.startGameSession(\r\n        avatarId,\r\n        gameId,\r\n        {\r\n          difficulty: 'advanced',\r\n          questionsPerSession: session.questionsCount\r\n        }\r\n      );\r\n\r\n      const correct = Math.round(session.questionsCount * (session.score / 100));\r\n      for (let i = 0; i < session.questionsCount; i++) {\r\n        const isCorrect = i < correct;\r\n        await analyticsService.trackEvent(sessionId, avatarId, 'question_answer', {\r\n          correct: isCorrect,\r\n          questionNumber: i + 1,\r\n          timeSpent: Math.round(session.duration / session.questionsCount),\r\n          hintsUsed: isCorrect ? 0 : Math.floor(Math.random() * 2)\r\n        });\r\n      }\r\n\r\n      await analyticsService.completeGameSession(\r\n        sessionId,\r\n        session.score,\r\n        session.questionsCount,\r\n        correct\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if an avatar has specific mock data patterns\r\n   */\r\n  private async getMissingDataPatterns(avatarId: string): Promise<{\r\n    hasRegularSessions: boolean;\r\n    hasAbandonedSessions: boolean;\r\n    hasValidationScenarios: boolean;\r\n  }> {\r\n    try {\r\n      const sessions = await analyticsService.getAvatarSessions(avatarId);\r\n      \r\n      // Check for regular sessions (15 sessions)\r\n      const hasRegularSessions = sessions.filter(s => \r\n        s.completionStatus !== 'abandoned' && s.gameId !== 'math' && s.gameId !== 'numbers'\r\n      ).length >= 15;\r\n\r\n      // Check for abandoned sessions (2 sessions)\r\n      const hasAbandonedSessions = sessions.filter(s => \r\n        s.completionStatus === 'abandoned'\r\n      ).length >= 2;\r\n\r\n      // Check for validation scenarios (16 sessions across 4 scenarios)\r\n      const hasValidationScenarios = sessions.filter(s => \r\n        (s.gameId === 'math' || s.gameId === 'numbers') && \r\n        s.completionStatus !== 'abandoned'\r\n      ).length >= 16;\r\n\r\n      return {\r\n        hasRegularSessions,\r\n        hasAbandonedSessions,\r\n        hasValidationScenarios\r\n      };\r\n    } catch (err) {\r\n      logger.error('Error checking data patterns:', err);\r\n      return {\r\n        hasRegularSessions: false,\r\n        hasAbandonedSessions: false,\r\n        hasValidationScenarios: false\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate comprehensive mock data for testing\r\n   */\r\n  async generateComprehensiveMockData(): Promise<{ success: boolean; message: string }> {\r\n    try {\r\n      logger.info('Starting comprehensive mock data generation...');\r\n      \r\n      // Get all avatars\r\n      const { data: avatars, error: avatarError } = await this.supabase\r\n        .from('avatars')\r\n        .select('*');\r\n      \r\n      if (avatarError) throw avatarError;\r\n      if (!avatars?.length) throw new Error('No avatars found');\r\n      \r\n      logger.info(`Found ${avatars.length} avatars to generate data for`);\r\n      logger.info('Avatar details:', avatars.map(a => ({ id: a.id, name: a.name })));\r\n\r\n      // Check for existing game sessions\r\n      const { data: existingSessions, error: sessionError } = await this.supabase\r\n        .from('game_sessions')\r\n        .select('*');\r\n      \r\n      if (sessionError) throw sessionError;\r\n      logger.info(`Found ${existingSessions?.length || 0} existing game sessions`);\r\n\r\n      // Generate data for each avatar\r\n      for (const avatar of avatars) {\r\n        logger.info(`\\nGenerating data for avatar: ${avatar.name} (${avatar.id})`);\r\n        \r\n        // Check if this avatar already has sessions\r\n        const existingAvatarSessions = existingSessions?.filter(s => s.avatar_id === avatar.id) || [];\r\n        logger.info(`Avatar ${avatar.name} already has ${existingAvatarSessions.length} sessions`);\r\n        \r\n        if (existingAvatarSessions.length > 0) {\r\n          logger.info(`Skipping ${avatar.name} - already has sessions`);\r\n          continue;\r\n        }\r\n        \r\n        // Generate 15-20 game sessions per avatar\r\n        const sessionCount = Math.floor(Math.random() * 6) + 15; // 15-20 sessions\r\n        logger.info(`Will generate ${sessionCount} sessions for this avatar`);\r\n\r\n        for (let i = 0; i < sessionCount; i++) {\r\n          const gameType = this.getRandomGameType();\r\n          const sessionStart = new Date();\r\n          sessionStart.setDate(sessionStart.getDate() - Math.floor(Math.random() * 30)); // Random date in last 30 days\r\n          \r\n          const questionsAttempted = Math.floor(Math.random() * 5) + 5; // 5-10 questions\r\n          const questionsCorrect = Math.floor(Math.random() * 5) + 3; // 3-8 correct\r\n          const finalScore = Math.floor(Math.random() * 40) + 60; // 60-100 score\r\n          \r\n          const session = {\r\n            avatar_id: avatar.id,\r\n            game_type: gameType,\r\n            session_start: sessionStart.toISOString(),\r\n            session_end: new Date(sessionStart.getTime() + (Math.random() * 600 + 300) * 1000).toISOString(), // 5-15 minutes\r\n            total_duration: Math.floor(Math.random() * 600 + 300), // 5-15 minutes in seconds\r\n            questions_attempted: questionsAttempted,\r\n            questions_correct: questionsCorrect,\r\n            completion_status: Math.random() > 0.1 ? 'completed' : 'abandoned', // 90% completion rate\r\n            difficulty_level: 'beginner',\r\n            settings_used: {\r\n              difficulty: 'beginner',\r\n              timeLimit: 600,\r\n              hintsEnabled: true\r\n            },\r\n            score_data: {\r\n              finalScore,\r\n              accuracy: questionsCorrect / questionsAttempted,\r\n              questionsCorrect,\r\n              questionsAttempted,\r\n              completionRate: Math.random() > 0.1 ? 1.0 : 0.0\r\n            }\r\n          };\r\n\r\n          logger.info(`\\nGenerating session ${i + 1}/${sessionCount} for ${avatar.name}:`);\r\n          logger.info('- Avatar ID:', avatar.id);\r\n          logger.info('- Game Type:', gameType);\r\n          logger.info('- Duration:', session.total_duration, 'seconds');\r\n          logger.info('- Questions:', session.questions_attempted, 'attempted,', session.questions_correct, 'correct');\r\n          logger.info('- Score:', session.score_data.finalScore);\r\n          logger.info('- Status:', session.completion_status);\r\n\r\n          const { data: sessionData, error: sessionError } = await this.supabase\r\n            .from('game_sessions')\r\n            .insert(session)\r\n            .select()\r\n            .single();\r\n\r\n          if (sessionError) {\r\n            logger.error('Error creating session:', sessionError);\r\n            throw sessionError;\r\n          }\r\n          if (!sessionData) {\r\n            logger.warn('No session data returned after insert');\r\n            continue;\r\n          }\r\n\r\n          logger.info('Successfully created session with ID:', sessionData.id);\r\n\r\n          // Generate 5-10 events per session\r\n          const eventCount = Math.floor(Math.random() * 6) + 5;\r\n          logger.info(`Generating ${eventCount} events for this session`);\r\n\r\n          for (let j = 0; j < eventCount; j++) {\r\n            const event = {\r\n              session_id: sessionData.id,\r\n              avatar_id: avatar.id,\r\n              event_type: this.getRandomEventType(),\r\n              event_data: {\r\n                questionNumber: j + 1,\r\n                correct: Math.random() > 0.3,\r\n                timeSpent: Math.floor(Math.random() * 15) + 5,\r\n                hintsUsed: Math.floor(Math.random() * 2)\r\n              },\r\n              timestamp: new Date(sessionStart.getTime() + (j * 60000)).toISOString(), // 1 minute apart\r\n              sequence_number: j + 1\r\n            };\r\n\r\n            const { error: eventError } = await this.supabase\r\n              .from('game_events')\r\n              .insert(event);\r\n\r\n            if (eventError) {\r\n              logger.error('Error creating event:', eventError);\r\n              throw eventError;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Calculate and store learning progress\r\n        const { data: newAvatarSessions, error: progressError } = await this.supabase\r\n          .from('game_sessions')\r\n          .select('*')\r\n          .eq('avatar_id', avatar.id);\r\n\r\n        if (progressError) throw progressError;\r\n        if (!newAvatarSessions?.length) {\r\n          logger.warn(`No sessions found for avatar ${avatar.id} to calculate progress`);\r\n          continue;\r\n        }\r\n\r\n        logger.info(`\\nCalculating learning progress for ${avatar.name}:`);\r\n        logger.info(`Found ${newAvatarSessions.length} sessions for progress calculation`);\r\n        const progress = this.calculateLearningProgress(\r\n          newAvatarSessions.map(session => ({\r\n            game_type: session.game_type as GameType,\r\n            completion_status: session.completion_status || 'completed',\r\n            score_data: session.score_data as { finalScore?: number } | null\r\n          }))\r\n        );\r\n        logger.info('Progress data:', progress);\r\n\r\n        // Store progress in learning_progress table\r\n        for (const [gameType, gameProgress] of Object.entries(progress)) {\r\n          const { error: insertError } = await this.supabase\r\n            .from('learning_progress')\r\n            .insert({\r\n              avatar_id: avatar.id,\r\n              game_type: gameType,\r\n              skill_level: gameProgress.skillLevel,\r\n              mastery_score: gameProgress.masteryScore,\r\n              learning_objectives_met: gameProgress.learningObjectivesMet || [],\r\n              prerequisite_completion: gameProgress.prerequisiteCompletion || {},\r\n              last_played: new Date().toISOString(),\r\n              total_sessions: gameProgress.totalSessions,\r\n              average_performance: gameProgress.averagePerformance,\r\n              improvement_trend: gameProgress.improvementTrend\r\n            });\r\n\r\n          if (insertError) {\r\n            logger.error('Error storing progress:', insertError);\r\n            throw insertError;\r\n          }\r\n        }\r\n      }\r\n\r\n      logger.info('\\nMock data generation completed successfully');\r\n      return {\r\n        success: true,\r\n        message: `Generated mock data for ${avatars.length} avatars`\r\n      };\r\n    } catch (err) {\r\n      logger.error('Error generating mock data:', err);\r\n      return {\r\n        success: false,\r\n        message: err instanceof Error ? err.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  private calculateLearningProgress(\r\n    sessions: SessionForProgress[]\r\n  ): Record<string, ProgressSummary> {\r\n    const progress: Record<string, ProgressSummary> = {};\r\n    \r\n    // Group sessions by game type\r\n    const sessionsByGame = sessions.reduce<Record<string, SessionForProgress[]>>( (acc, session) => {\r\n      if (!acc[session.game_type]) {\r\n        acc[session.game_type] = [];\r\n      }\r\n      acc[session.game_type].push(session);\r\n      return acc;\r\n    }, {});\r\n\r\n    // Calculate progress for each game type\r\n    for (const [gameType, gameSessions] of Object.entries(sessionsByGame)) {\r\n      const completedSessions = gameSessions.filter(s => s.completion_status === 'completed');\r\n      const totalSessions = gameSessions.length;\r\n\r\n      // Calculate average score with proper null checks\r\n      let averageScore = 0;\r\n      if (completedSessions.length > 0) {\r\n        const totalScore = completedSessions.reduce((sum, s) => {\r\n          const score = s.score_data?.finalScore || 0;\r\n          return sum + score;\r\n        }, 0);\r\n        averageScore = totalScore / completedSessions.length;\r\n      }\r\n      \r\n      // Determine skill level based on average score\r\n      let skillLevel: 'beginner' | 'intermediate' | 'advanced' = 'beginner';\r\n      if (averageScore >= 90) {\r\n        skillLevel = 'advanced';\r\n      } else if (averageScore >= 70) {\r\n        skillLevel = 'intermediate';\r\n      }\r\n\r\n      // Calculate mastery score (0-100)\r\n      const masteryScore = Math.min(100, averageScore);\r\n\r\n      // Determine improvement trend\r\n      let improvementTrend: 'improving' | 'stable' | 'declining' = 'stable';\r\n      if (totalSessions >= 3) {\r\n        const recentSessions = completedSessions.slice(-3);\r\n        if (recentSessions.length > 0) {\r\n          const recentAverage = recentSessions.reduce((sum, s) => {\r\n            const score = s.score_data?.finalScore || 0;\r\n            return sum + score;\r\n          }, 0) / recentSessions.length;\r\n\r\n          if (recentAverage > averageScore * 1.1) {\r\n            improvementTrend = 'improving';\r\n          } else if (recentAverage < averageScore * 0.9) {\r\n            improvementTrend = 'declining';\r\n          }\r\n        }\r\n      }\r\n\r\n      progress[gameType] = {\r\n        skillLevel,\r\n        masteryScore,\r\n        learningObjectivesMet: [],\r\n        prerequisiteCompletion: {},\r\n        totalSessions,\r\n        averagePerformance: averageScore,\r\n        improvementTrend\r\n      };\r\n    }\r\n\r\n    return progress;\r\n  }\r\n\r\n  private getRandomGameType(): string {\r\n    const gameTypes = ['numbers', 'math', 'letters', 'shapes', 'colors', 'animals'];\r\n    return gameTypes[Math.floor(Math.random() * gameTypes.length)];\r\n  }\r\n\r\n  private getRandomEventType(): string {\r\n    const eventTypes = ['question_start', 'question_answer', 'hint_used', 'game_pause', 'game_resume'];\r\n    return eventTypes[Math.floor(Math.random() * eventTypes.length)];\r\n  }\r\n\r\n  /**\r\n   * Generate quick test data for a single avatar\r\n   */\r\n  async generateQuickTestData(avatarId: string): Promise<QuickTestResult> {\r\n    try {\r\n      const profile = AVATAR_PROFILES.find(p => p.id === avatarId);\r\n      if (!profile) {\r\n        throw new Error(`Avatar ${avatarId} not found in demo profiles`);\r\n      }\r\n\r\n      const templates = this.getSessionTemplatesForProfile(profile.level, profile.pattern);\r\n      const template = templates[Math.floor(Math.random() * templates.length)];\r\n      \r\n      const sessionId = await this.generateGameSession(profile.id, template, 1, profile.pattern);\r\n      return { success: true, sessionId };\r\n    } catch (err) {\r\n      return {\r\n        success: false,\r\n        error: err instanceof Error ? err.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all analytics data for testing\r\n   */\r\n  async clearAllAnalyticsData(): Promise<ClearDataResult> {\r\n    try {\r\n      // Clear game_sessions table\r\n      const { error: sessionsError } = await this.supabase\r\n        .from('game_sessions')\r\n        .delete()\r\n        .neq('id', '00000000-0000-0000-0000-000000000000'); // Keep the dummy record\r\n\r\n      if (sessionsError) throw sessionsError;\r\n\r\n      // Clear game_events table\r\n      const { error: eventsError } = await this.supabase\r\n        .from('game_events')\r\n        .delete()\r\n        .neq('id', '00000000-0000-0000-0000-000000000000'); // Keep the dummy record\r\n\r\n      if (eventsError) throw eventsError;\r\n\r\n      // Clear learning_progress table\r\n      const { error: progressError } = await this.supabase\r\n        .from('learning_progress')\r\n        .delete()\r\n        .neq('id', '00000000-0000-0000-0000-000000000000'); // Keep the dummy record\r\n\r\n      if (progressError) throw progressError;\r\n\r\n      return { success: true };\r\n    } catch (err) {\r\n      logger.error('Failed to clear analytics data:', err);\r\n      return {\r\n        success: false,\r\n        error: err instanceof Error ? err.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const mockDataGenerator = new MockDataGenerator(); "],"names":["MockDataGenerator","mockDataGenerator","AVATAR_PROFILES","id","name","level","pattern","getSessionTemplatesForProfile","baseTemplates","beginner","gameId","difficulty","baseScore","variance","duration","questionsCount","intermediate","advanced","templates","map","t","filter","includes","generateProgressiveScore","sessionNumber","progressionFactor","Math","min","randomVariance","random","score","max","round","generateQuestionAttempts","finalScore","accuracy","attempted","correct","generateGameSession","avatarId","template","sessionId","analyticsService","startGameSession","questionsPerSession","i","isCorrect","trackEvent","questionNumber","timeSpent","hintsUsed","floor","completeGameSession","generateSessionsForAvatar","profile","sessionCount","logger","info","length","Promise","resolve","setTimeout","error","generateAbandonedSessions","count","generateValidationScenarios","generateRapidAdvancementScenario","generateCrossSubjectScenario","generateRegressionScenario","generatePlateauScenario","sessions","session","getMissingDataPatterns","getAvatarSessions","hasRegularSessions","s","completionStatus","hasAbandonedSessions","hasValidationScenarios","err","generateComprehensiveMockData","data","avatars","avatarError","supabase","from","select","Error","a","existingSessions","sessionError","avatar","existingAvatarSessions","avatar_id","gameType","getRandomGameType","sessionStart","Date","setDate","getDate","questionsAttempted","questionsCorrect","game_type","session_start","toISOString","session_end","getTime","total_duration","questions_attempted","questions_correct","completion_status","difficulty_level","settings_used","timeLimit","hintsEnabled","score_data","completionRate","sessionData","insert","single","warn","eventCount","j","event","session_id","event_type","getRandomEventType","event_data","timestamp","sequence_number","eventError","newAvatarSessions","progressError","eq","progress","calculateLearningProgress","gameProgress","Object","entries","insertError","skill_level","skillLevel","mastery_score","masteryScore","learning_objectives_met","learningObjectivesMet","prerequisite_completion","prerequisiteCompletion","last_played","total_sessions","totalSessions","average_performance","averagePerformance","improvement_trend","improvementTrend","success","message","sessionsByGame","reduce","acc","push","gameSessions","completedSessions","averageScore","totalScore","sum","recentSessions","slice","recentAverage","gameTypes","eventTypes","generateQuickTestData","find","p","clearAllAnalyticsData","sessionsError","delete","neq","eventsError","createClient"],"mappings":"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"}