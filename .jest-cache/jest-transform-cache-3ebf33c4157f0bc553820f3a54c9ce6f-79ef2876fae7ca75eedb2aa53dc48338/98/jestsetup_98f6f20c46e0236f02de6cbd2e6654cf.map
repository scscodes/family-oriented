{"version":3,"sources":["D:\\Projects\\family-oriented\\jest.setup.ts"],"sourcesContent":["import '@testing-library/jest-dom';\nimport { TextEncoder, TextDecoder } from 'util';\n\n// Polyfill TextEncoder/TextDecoder for jose/Supabase in Jest\nif (typeof global.TextEncoder === 'undefined') {\n  global.TextEncoder = TextEncoder;\n}\nif (typeof global.TextDecoder === 'undefined') {\n  global.TextDecoder = TextDecoder as typeof global.TextDecoder;\n}\n\n// Set dummy Supabase env vars for tests\nprocess.env.NEXT_PUBLIC_SUPABASE_URL = 'http://localhost:54321';\nprocess.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'test-key';\n\n// Enhanced localStorage mock with better error handling\ninterface LocalStorageMock {\n  getItem: jest.Mock;\n  setItem: jest.Mock;\n  removeItem: jest.Mock;\n  clear: jest.Mock;\n  _storage: Record<string, string>;\n}\n\nconst localStorageMock: LocalStorageMock = {\n  getItem: jest.fn((key: string) => {\n    const item = localStorageMock._storage[key];\n    return item || null;\n  }),\n  setItem: jest.fn((key: string, value: string) => {\n    localStorageMock._storage[key] = value;\n  }),\n  removeItem: jest.fn((key: string) => {\n    delete localStorageMock._storage[key];\n  }),\n  clear: jest.fn(() => {\n    localStorageMock._storage = {};\n  }),\n  _storage: {} as Record<string, string>\n};\n\nObject.defineProperty(window, 'localStorage', {\n  value: localStorageMock,\n});\n\n// Enhanced window.matchMedia mock\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(),\n    removeListener: jest.fn(),\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n\n// Mock ResizeObserver (needed for Chart.js)\nglobal.ResizeObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n}));\n\n// Mock IntersectionObserver\nglobal.IntersectionObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n}));\n\n// Mock fetch for API calls\nglobal.fetch = jest.fn(() =>\n  Promise.resolve({\n    ok: true,\n    status: 200,\n    json: () => Promise.resolve({}),\n    text: () => Promise.resolve(''),\n  })\n) as jest.Mock;\n\n// Enhanced console error handling for tests\nconst originalError = console.error;\nbeforeAll(() => {\n  console.error = (...args: unknown[]) => {\n    // Suppress known React testing warnings\n    if (\n      typeof args[0] === 'string' &&\n      (args[0].includes('Warning: ReactDOM.render is deprecated') ||\n       args[0].includes('Warning: An invalid form control') ||\n       args[0].includes('Warning: Cannot update a component'))\n    ) {\n      return;\n    }\n    originalError.apply(console, args);\n  };\n});\n\nafterAll(() => {\n  console.error = originalError;\n});\n\n// Global test timeout helpers\nexport const TEST_TIMEOUTS = {\n  FAST: 2000,      // For sync operations\n  MEDIUM: 5000,    // For simple async operations  \n  SLOW: 10000,     // For complex async operations\n  INTEGRATION: 15000 // For integration tests\n} as const;\n\n// Global test utilities\nglobal.testUtils = {\n  waitForStableState: async (callback: () => boolean, timeout = TEST_TIMEOUTS.MEDIUM) => {\n    const startTime = Date.now();\n    while (!callback() && Date.now() - startTime < timeout) {\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n    if (!callback()) {\n      throw new Error(`Condition not met within ${timeout}ms`);\n    }\n  },\n  \n  createMockPromise: <T>(value: T, delay = 0): Promise<T> => {\n    return new Promise(resolve => setTimeout(() => resolve(value), delay));\n  },\n  \n  createMockRejection: (error: Error, delay = 0): Promise<never> => {\n    return new Promise((_, reject) => setTimeout(() => reject(error), delay));\n  }\n};\n\n// Enhanced global error handling\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n});\n\n// Cleanup after each test\nafterEach(() => {\n  // Clear all mocks\n  jest.clearAllMocks();\n  \n  // Reset localStorage\n  localStorageMock.clear();\n  \n  // Clear any pending timers\n  jest.runOnlyPendingTimers();\n  jest.useRealTimers();\n});\n"],"names":["TEST_TIMEOUTS","global","TextEncoder","TextDecoder","process","env","NEXT_PUBLIC_SUPABASE_URL","NEXT_PUBLIC_SUPABASE_ANON_KEY","localStorageMock","getItem","jest","fn","key","item","_storage","setItem","value","removeItem","clear","Object","defineProperty","window","writable","mockImplementation","query","matches","media","onchange","addListener","removeListener","addEventListener","removeEventListener","dispatchEvent","ResizeObserver","observe","unobserve","disconnect","IntersectionObserver","fetch","Promise","resolve","ok","status","json","text","originalError","console","error","beforeAll","args","includes","apply","afterAll","FAST","MEDIUM","SLOW","INTEGRATION","testUtils","waitForStableState","callback","timeout","startTime","Date","now","setTimeout","Error","createMockPromise","delay","createMockRejection","_","reject","on","reason","promise","afterEach","clearAllMocks","runOnlyPendingTimers","useRealTimers"],"mappings":";;;;+BA0GaA;;;eAAAA;;;QA1GN;sBACkC;AAEzC,6DAA6D;AAC7D,IAAI,OAAOC,OAAOC,WAAW,KAAK,aAAa;IAC7CD,OAAOC,WAAW,GAAGA,iBAAW;AAClC;AACA,IAAI,OAAOD,OAAOE,WAAW,KAAK,aAAa;IAC7CF,OAAOE,WAAW,GAAGA,iBAAW;AAClC;AAEA,wCAAwC;AACxCC,QAAQC,GAAG,CAACC,wBAAwB,GAAG;AACvCF,QAAQC,GAAG,CAACE,6BAA6B,GAAG;AAW5C,MAAMC,mBAAqC;IACzCC,SAASC,KAAKC,EAAE,CAAC,CAACC;QAChB,MAAMC,OAAOL,iBAAiBM,QAAQ,CAACF,IAAI;QAC3C,OAAOC,QAAQ;IACjB;IACAE,SAASL,KAAKC,EAAE,CAAC,CAACC,KAAaI;QAC7BR,iBAAiBM,QAAQ,CAACF,IAAI,GAAGI;IACnC;IACAC,YAAYP,KAAKC,EAAE,CAAC,CAACC;QACnB,OAAOJ,iBAAiBM,QAAQ,CAACF,IAAI;IACvC;IACAM,OAAOR,KAAKC,EAAE,CAAC;QACbH,iBAAiBM,QAAQ,GAAG,CAAC;IAC/B;IACAA,UAAU,CAAC;AACb;AAEAK,OAAOC,cAAc,CAACC,QAAQ,gBAAgB;IAC5CL,OAAOR;AACT;AAEA,kCAAkC;AAClCW,OAAOC,cAAc,CAACC,QAAQ,cAAc;IAC1CC,UAAU;IACVN,OAAON,KAAKC,EAAE,GAAGY,kBAAkB,CAACC,CAAAA,QAAU,CAAA;YAC5CC,SAAS;YACTC,OAAOF;YACPG,UAAU;YACVC,aAAalB,KAAKC,EAAE;YACpBkB,gBAAgBnB,KAAKC,EAAE;YACvBmB,kBAAkBpB,KAAKC,EAAE;YACzBoB,qBAAqBrB,KAAKC,EAAE;YAC5BqB,eAAetB,KAAKC,EAAE;QACxB,CAAA;AACF;AAEA,4CAA4C;AAC5CV,OAAOgC,cAAc,GAAGvB,KAAKC,EAAE,GAAGY,kBAAkB,CAAC,IAAO,CAAA;QAC1DW,SAASxB,KAAKC,EAAE;QAChBwB,WAAWzB,KAAKC,EAAE;QAClByB,YAAY1B,KAAKC,EAAE;IACrB,CAAA;AAEA,4BAA4B;AAC5BV,OAAOoC,oBAAoB,GAAG3B,KAAKC,EAAE,GAAGY,kBAAkB,CAAC,IAAO,CAAA;QAChEW,SAASxB,KAAKC,EAAE;QAChBwB,WAAWzB,KAAKC,EAAE;QAClByB,YAAY1B,KAAKC,EAAE;IACrB,CAAA;AAEA,2BAA2B;AAC3BV,OAAOqC,KAAK,GAAG5B,KAAKC,EAAE,CAAC,IACrB4B,QAAQC,OAAO,CAAC;QACdC,IAAI;QACJC,QAAQ;QACRC,MAAM,IAAMJ,QAAQC,OAAO,CAAC,CAAC;QAC7BI,MAAM,IAAML,QAAQC,OAAO,CAAC;IAC9B;AAGF,4CAA4C;AAC5C,MAAMK,gBAAgBC,QAAQC,KAAK;AACnCC,UAAU;IACRF,QAAQC,KAAK,GAAG,CAAC,GAAGE;QAClB,wCAAwC;QACxC,IACE,OAAOA,IAAI,CAAC,EAAE,KAAK,YAClBA,CAAAA,IAAI,CAAC,EAAE,CAACC,QAAQ,CAAC,6CACjBD,IAAI,CAAC,EAAE,CAACC,QAAQ,CAAC,uCACjBD,IAAI,CAAC,EAAE,CAACC,QAAQ,CAAC,qCAAoC,GACtD;YACA;QACF;QACAL,cAAcM,KAAK,CAACL,SAASG;IAC/B;AACF;AAEAG,SAAS;IACPN,QAAQC,KAAK,GAAGF;AAClB;AAGO,MAAM7C,gBAAgB;IAC3BqD,MAAM;IACNC,QAAQ;IACRC,MAAM;IACNC,aAAa,MAAM,wBAAwB;AAC7C;AAEA,wBAAwB;AACxBvD,OAAOwD,SAAS,GAAG;IACjBC,oBAAoB,OAAOC,UAAyBC,UAAU5D,cAAcsD,MAAM;QAChF,MAAMO,YAAYC,KAAKC,GAAG;QAC1B,MAAO,CAACJ,cAAcG,KAAKC,GAAG,KAAKF,YAAYD,QAAS;YACtD,MAAM,IAAIrB,QAAQC,CAAAA,UAAWwB,WAAWxB,SAAS;QACnD;QACA,IAAI,CAACmB,YAAY;YACf,MAAM,IAAIM,MAAM,CAAC,yBAAyB,EAAEL,QAAQ,EAAE,CAAC;QACzD;IACF;IAEAM,mBAAmB,CAAIlD,OAAUmD,QAAQ,CAAC;QACxC,OAAO,IAAI5B,QAAQC,CAAAA,UAAWwB,WAAW,IAAMxB,QAAQxB,QAAQmD;IACjE;IAEAC,qBAAqB,CAACrB,OAAcoB,QAAQ,CAAC;QAC3C,OAAO,IAAI5B,QAAQ,CAAC8B,GAAGC,SAAWN,WAAW,IAAMM,OAAOvB,QAAQoB;IACpE;AACF;AAEA,iCAAiC;AACjC/D,QAAQmE,EAAE,CAAC,sBAAsB,CAACC,QAAQC;IACxC3B,QAAQC,KAAK,CAAC,2BAA2B0B,SAAS,WAAWD;AAC/D;AAEA,0BAA0B;AAC1BE,UAAU;IACR,kBAAkB;IAClBhE,KAAKiE,aAAa;IAElB,qBAAqB;IACrBnE,iBAAiBU,KAAK;IAEtB,2BAA2B;IAC3BR,KAAKkE,oBAAoB;IACzBlE,KAAKmE,aAAa;AACpB"}