7dfbacea32fc40e1f69f598fa699761c
/**
 * useTierTransition Hook
 * Provides tier transition functionality for subscription plan changes
 * Handles analysis, validation, and execution of tier changes
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useTierTransition", {
    enumerable: true,
    get: function() {
        return useTierTransition;
    }
});
const _react = require("react");
const _UserContext = require("../context/UserContext");
const _useSubscription = require("./useSubscription");
const _subscriptionService = require("../utils/subscriptionService");
const _client = require("../lib/supabase/client");
const _logger = require("../utils/logger");
function useTierTransition() {
    const { org } = (0, _UserContext.useUser)();
    const { subscriptionPlan, tier, currentUsage } = (0, _useSubscription.useSubscription)();
    const [isLoading, setIsLoading] = (0, _react.useState)(false);
    const [error, setError] = (0, _react.useState)(null);
    const supabase = (0, _client.createClient)();
    // Current tier and available transitions
    const currentTier = tier;
    const { upgrades: availableUpgrades, downgrades: availableDowngrades } = (0, _react.useMemo)(()=>{
        if (!currentTier) return {
            upgrades: [],
            downgrades: []
        };
        return _subscriptionService.SubscriptionService.getAvailableTransitions(currentTier);
    }, [
        currentTier
    ]);
    // Get current usage data
    const getCurrentUsageData = (0, _react.useCallback)(async ()=>{
        if (!org) {
            return {
                avatarsCount: 0,
                collectionsCount: 0,
                sessionsThisMonth: 0,
                dataRetentionMonths: 12
            };
        }
        try {
            // Get avatar count
            const { data: avatars } = await supabase.from('avatars').select('id').eq('org_id', org.id);
            // Get collections count (simplified - would normally be per-avatar)
            const { data: collections } = await supabase.from('game_collections').select('id').in('avatar_id', (avatars || []).map((a)=>a.id));
            // Get sessions this month
            const startOfMonth = new Date();
            startOfMonth.setDate(1);
            startOfMonth.setHours(0, 0, 0, 0);
            const { data: sessions } = await supabase.from('game_sessions').select('id').eq('org_id', org.id).gte('created_at', startOfMonth.toISOString());
            return {
                avatarsCount: avatars?.length || 0,
                collectionsCount: collections?.length || 0,
                sessionsThisMonth: sessions?.length || 0,
                dataRetentionMonths: 12 // Default
            };
        } catch (err) {
            _logger.logger.error('Failed to get usage data:', err);
            return {
                avatarsCount: currentUsage.avatarsCount,
                collectionsCount: 0,
                sessionsThisMonth: 0,
                dataRetentionMonths: 12
            };
        }
    }, [
        org,
        supabase,
        currentUsage.avatarsCount
    ]);
    // Analyze transition impact
    const analyzeTransition = (0, _react.useCallback)(async (targetTier)=>{
        if (!currentTier || !subscriptionPlan) {
            throw new Error('No current subscription to analyze');
        }
        setIsLoading(true);
        setError(null);
        try {
            const usageData = await getCurrentUsageData();
            // Get basic analysis
            const analysis = _subscriptionService.SubscriptionService.analyzeTierTransition(currentTier, targetTier, usageData);
            // Get cost information
            const currentCost = parseFloat(subscriptionPlan.base_price.toString());
            const newCost = getTierPrice(targetTier);
            const monthlyDifference = newCost - currentCost;
            const proration = _subscriptionService.SubscriptionService.calculateProration(currentCost, newCost);
            return {
                fromTier: currentTier,
                toTier: targetTier,
                isUpgrade: analysis.isUpgrade,
                isDowngrade: analysis.isDowngrade,
                featureChanges: {
                    gained: analysis.featureChanges.gained,
                    lost: analysis.featureChanges.lost
                },
                usageImpact: {
                    overLimitItems: analysis.usageImpact.overLimitItems
                },
                costImpact: {
                    currentCost,
                    newCost,
                    monthlyDifference,
                    prorationAmount: proration.prorationAmount,
                    prorationDescription: proration.description
                },
                warnings: analysis.warnings,
                canTransition: analysis.canTransition
            };
        } catch (err) {
            const message = err instanceof Error ? err.message : 'Failed to analyze transition';
            setError(message);
            throw err;
        } finally{
            setIsLoading(false);
        }
    }, [
        currentTier,
        subscriptionPlan,
        getCurrentUsageData
    ]);
    // Execute tier transition
    const executeTransition = (0, _react.useCallback)(async (targetTier)=>{
        if (!org || !currentTier) {
            throw new Error('No organization or current tier found');
        }
        setIsLoading(true);
        setError(null);
        try {
            // Validate transition first
            const usageData = await getCurrentUsageData();
            const validation = _subscriptionService.SubscriptionService.validateTierTransition(currentTier, targetTier, usageData);
            if (!validation.valid) {
                throw new Error(`Transition not allowed: ${validation.reasons.join(', ')}`);
            }
            // Get new subscription plan
            const { data: newPlan, error: planError } = await supabase.from('subscription_plans').select('*').eq('tier', targetTier).eq('active', true).order('base_price', {
                ascending: true
            }).limit(1).single();
            if (planError) throw planError;
            // Update organization subscription
            const { error: updateError } = await supabase.from('organizations').update({
                subscription_plan_id: newPlan.id,
                updated_at: new Date().toISOString()
            }).eq('id', org.id);
            if (updateError) throw updateError;
            // Log the transition
            _logger.logger.info('Tier transition completed:', {
                orgId: org.id,
                fromTier: currentTier,
                toTier: targetTier,
                timestamp: new Date().toISOString()
            });
            const tierDisplayName = getTierDisplayName(targetTier);
            const action = _subscriptionService.SubscriptionService.analyzeTierTransition(currentTier, targetTier, usageData).isUpgrade ? 'upgraded' : 'changed';
            return {
                success: true,
                message: `Successfully ${action} to ${tierDisplayName}!`
            };
        } catch (err) {
            const message = err instanceof Error ? err.message : 'Failed to execute transition';
            setError(message);
            _logger.logger.error('Tier transition failed:', err);
            return {
                success: false,
                message
            };
        } finally{
            setIsLoading(false);
        }
    }, [
        org,
        currentTier,
        supabase,
        getCurrentUsageData
    ]);
    // Utility functions
    const getTierDisplayName = (0, _react.useCallback)((tier)=>{
        const tierNames = {
            personal: 'Personal Plan',
            professional: 'Professional Plan',
            enterprise: 'Enterprise Plan'
        };
        return tierNames[tier];
    }, []);
    const getTierPrice = (0, _react.useCallback)((tier)=>{
        const prices = {
            personal: 9.99,
            professional: 199.99,
            enterprise: 1499.99
        };
        return prices[tier];
    }, []);
    const validateTransition = (0, _react.useCallback)((targetTier)=>{
        if (!currentTier) {
            return {
                valid: false,
                reasons: [
                    'No current tier found'
                ]
            };
        }
        // Use current usage data synchronously (fallback values)
        const usageData = {
            avatarsCount: currentUsage.avatarsCount,
            collectionsCount: 0,
            sessionsThisMonth: 0,
            dataRetentionMonths: 12
        };
        return _subscriptionService.SubscriptionService.validateTierTransition(currentTier, targetTier, usageData);
    }, [
        currentTier,
        currentUsage.avatarsCount
    ]);
    const clearError = (0, _react.useCallback)(()=>{
        setError(null);
    }, []);
    return {
        // Current state
        currentTier,
        availableUpgrades,
        availableDowngrades,
        isLoading,
        error,
        // Analysis
        analyzeTransition,
        // Execution
        executeTransition,
        // Utilities
        getTierDisplayName,
        getTierPrice,
        validateTransition,
        // State management
        clearError
    };
}

//# sourceMappingURL=data:application/json;base64,