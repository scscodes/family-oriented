{"version":3,"sources":["D:\\Projects\\family-oriented\\src\\app\\dashboard\\__tests__\\page.test.tsx"],"sourcesContent":["jest.mock('@/utils/analyticsService');\r\njest.mock('@/features/analytics/components/DashboardCharts', () => {\r\n  return function MockDashboardCharts() {\r\n    return <div data-testid=\"dashboard-charts\">Mock Charts</div>;\r\n  };\r\n});\r\n\r\nimport { render, screen, waitFor, cleanup } from '@testing-library/react';\r\nimport DashboardPage from '../page';\r\nimport { analyticsService } from '@/utils/analyticsService';\r\nimport * as UserContext from '@/context/UserContext';\r\nimport { UserProvider } from '@/context/UserContext';\r\nimport { act } from 'react';\r\n\r\n// Create proper mock avatar with all required properties\r\nconst mockAvatar = { \r\n  id: '00000000-0000-0000-0000-000000000003', \r\n  name: 'Test Avatar',\r\n  created_at: new Date().toISOString(),\r\n  updated_at: new Date().toISOString(),\r\n  user_id: 'test-user',\r\n  org_id: null,\r\n  last_active: new Date().toISOString(),\r\n  encrypted_pii: {},\r\n  game_preferences: {},\r\n  theme_settings: {}\r\n};\r\n\r\nconst mockProgress = [\r\n  { gameId: 'numbers' as const, skillLevel: 'beginner' as const, masteryScore: 80, lastPlayed: new Date(), learningObjectivesMet: [], prerequisiteCompletion: {}, avatarId: '00000000-0000-0000-0000-000000000003', totalSessions: 2, averagePerformance: 80, improvementTrend: 'improving' as const }\r\n];\r\nconst mockRecommendations = [\r\n  { gameId: 'letters', reason: 'Try letters next!', priority: 8, estimatedDifficulty: 'beginner', learningObjectives: [], prerequisitesMet: true }\r\n];\r\nconst mockMetrics = {\r\n  totalGamesPlayed: 2,\r\n  averageSessionDuration: 60,\r\n  overallCompletionRate: 1,\r\n  skillLevelDistribution: { beginner: 2 },\r\n  subjectPreferences: { Mathematics: 2 },\r\n  learningVelocity: 1,\r\n  engagementScore: 80\r\n};\r\n\r\n// Mock the analytics service methods\r\nconst mockAnalyticsService = analyticsService as jest.Mocked<typeof analyticsService>;\r\n\r\ndescribe.skip('DashboardPage', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    mockAnalyticsService.getAvatarProgress.mockResolvedValue(mockProgress);\r\n    mockAnalyticsService.getLearningPathRecommendations.mockResolvedValue(mockRecommendations);\r\n    mockAnalyticsService.getPerformanceMetrics.mockResolvedValue(mockMetrics);\r\n    \r\n    // Mock consistent user context\r\n    jest.spyOn(UserContext, 'useAvatar').mockReturnValue({ \r\n      currentAvatar: mockAvatar,\r\n      avatars: [mockAvatar],\r\n      setCurrentAvatar: jest.fn(),\r\n      createAvatar: jest.fn()\r\n    });\r\n    jest.spyOn(UserContext, 'useUser').mockReturnValue({ \r\n      user: { \r\n        id: 'test-user', \r\n        email: 'test@example.com',\r\n        app_metadata: {},\r\n        user_metadata: {},\r\n        aud: 'authenticated',\r\n        created_at: new Date().toISOString()\r\n      },\r\n      userProfile: null,\r\n      avatars: [mockAvatar],\r\n      currentAvatar: mockAvatar,\r\n      loading: false,\r\n      error: null,\r\n      setCurrentAvatar: jest.fn(),\r\n      createAvatar: jest.fn(),\r\n      refreshAvatars: jest.fn(),\r\n      signOut: jest.fn(),\r\n      roles: [],\r\n      org: {\r\n        id: 'test-org',\r\n        name: 'Test Organization',\r\n        subscriptionPlan: {\r\n          id: 'test-plan',\r\n          name: 'Test Plan',\r\n          tier: 'professional',\r\n          avatar_limit: 30,\r\n          features_included: {}\r\n        }\r\n      },\r\n      hasRole: jest.fn().mockReturnValue(false),\r\n      canAccess: jest.fn().mockReturnValue(false),\r\n      getTierLimit: jest.fn().mockReturnValue(5),\r\n      viewAsRole: null,\r\n      viewAsAvatar: null,\r\n      isViewAs: false,\r\n      setViewAsRole: jest.fn(),\r\n      setViewAsAvatar: jest.fn(),\r\n      resetViewAs: jest.fn(),\r\n      loadingState: { user: false, roles: false, avatars: false, isReady: true }\r\n    });\r\n    jest.spyOn(UserContext, 'useRoleGuard').mockReturnValue({\r\n      hasRole: jest.fn().mockReturnValue(false),\r\n      isReady: true,\r\n      roles: []\r\n    });\r\n  });\r\n\r\n  afterEach(() => {\r\n    cleanup();\r\n    jest.restoreAllMocks();\r\n  });\r\n\r\n  it('renders dashboard data', async () => {\r\n    await act(async () => {\r\n      render(\r\n        <UserProvider>\r\n          <DashboardPage />\r\n        </UserProvider>\r\n      );\r\n    });\r\n    \r\n    // Check for basic dashboard elements\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Learning Progress Dashboard')).toBeInTheDocument();\r\n      expect(screen.getByText('Quick Actions')).toBeInTheDocument();\r\n    }, { timeout: 3000 });\r\n    \r\n    // Check for analytics data being called\r\n    expect(mockAnalyticsService.getAvatarProgress).toHaveBeenCalledWith(mockAvatar.id);\r\n    expect(mockAnalyticsService.getLearningPathRecommendations).toHaveBeenCalledWith(mockAvatar.id);\r\n    expect(mockAnalyticsService.getPerformanceMetrics).toHaveBeenCalledWith(mockAvatar.id);\r\n    \r\n    // Check that progress and recommendations sections are rendered\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Learning Progress')).toBeInTheDocument();\r\n      expect(screen.getByText('Recommended Learning Path')).toBeInTheDocument();\r\n    }, { timeout: 2000 });\r\n  });\r\n\r\n  it('shows info if no avatar', async () => {\r\n    jest.spyOn(UserContext, 'useAvatar').mockReturnValue({ \r\n      currentAvatar: null,\r\n      avatars: [],\r\n      setCurrentAvatar: jest.fn(),\r\n      createAvatar: jest.fn()\r\n    });\r\n    await act(async () => {\r\n      render(\r\n        <UserProvider>\r\n          <DashboardPage />\r\n        </UserProvider>\r\n      );\r\n    });\r\n    await waitFor(() => {\r\n      expect(screen.getByText(/please select or create an avatar/i)).toBeInTheDocument();\r\n    }, { timeout: 2000 });\r\n  });\r\n\r\n  it('shows error on analytics failure', async () => {\r\n    // Reset analytics mocks to return rejected promise\r\n    mockAnalyticsService.getAvatarProgress.mockRejectedValue(new Error('fail'));\r\n    mockAnalyticsService.getLearningPathRecommendations.mockRejectedValue(new Error('fail'));\r\n    mockAnalyticsService.getPerformanceMetrics.mockRejectedValue(new Error('fail'));\r\n    \r\n    await act(async () => {\r\n      render(\r\n        <UserProvider>\r\n          <DashboardPage />\r\n        </UserProvider>\r\n      );\r\n    });\r\n    await waitFor(() => {\r\n      const alert = screen.getByRole('alert');\r\n      expect(alert).toHaveTextContent('fail');\r\n    }, { timeout: 3000 });\r\n  });\r\n});\r\n"],"names":["jest","mock","MockDashboardCharts","div","data-testid","mockAvatar","id","name","created_at","Date","toISOString","updated_at","user_id","org_id","last_active","encrypted_pii","game_preferences","theme_settings","mockProgress","gameId","skillLevel","masteryScore","lastPlayed","learningObjectivesMet","prerequisiteCompletion","avatarId","totalSessions","averagePerformance","improvementTrend","mockRecommendations","reason","priority","estimatedDifficulty","learningObjectives","prerequisitesMet","mockMetrics","totalGamesPlayed","averageSessionDuration","overallCompletionRate","skillLevelDistribution","beginner","subjectPreferences","Mathematics","learningVelocity","engagementScore","mockAnalyticsService","analyticsService","describe","skip","beforeEach","clearAllMocks","getAvatarProgress","mockResolvedValue","getLearningPathRecommendations","getPerformanceMetrics","spyOn","UserContext","mockReturnValue","currentAvatar","avatars","setCurrentAvatar","fn","createAvatar","user","email","app_metadata","user_metadata","aud","userProfile","loading","error","refreshAvatars","signOut","roles","org","subscriptionPlan","tier","avatar_limit","features_included","hasRole","canAccess","getTierLimit","viewAsRole","viewAsAvatar","isViewAs","setViewAsRole","setViewAsAvatar","resetViewAs","loadingState","isReady","afterEach","cleanup","restoreAllMocks","it","act","render","UserProvider","DashboardPage","waitFor","expect","screen","getByText","toBeInTheDocument","timeout","toHaveBeenCalledWith","mockRejectedValue","Error","alert","getByRole","toHaveTextContent"],"mappings":"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"}