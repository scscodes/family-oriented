cf0bab735b575e4d1c1e912f3d116f95
"use strict";
jest.mock('@/utils/analyticsService');
jest.mock('@/features/analytics/components/DashboardCharts', ()=>{
    return function MockDashboardCharts() {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            "data-testid": "dashboard-charts",
            children: "Mock Charts"
        });
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _page = /*#__PURE__*/ _interop_require_default(require("../page"));
const _analyticsService = require("../../../utils/analyticsService");
const _UserContext = /*#__PURE__*/ _interop_require_wildcard(require("../../../context/UserContext"));
const _react1 = require("react");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Create proper mock avatar with all required properties
const mockAvatar = {
    id: '00000000-0000-0000-0000-000000000003',
    name: 'Test Avatar',
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    user_id: 'test-user',
    org_id: null,
    last_active: new Date().toISOString(),
    encrypted_pii: {},
    game_preferences: {},
    theme_settings: {}
};
const mockProgress = [
    {
        gameId: 'numbers',
        skillLevel: 'beginner',
        masteryScore: 80,
        lastPlayed: new Date(),
        learningObjectivesMet: [],
        prerequisiteCompletion: {},
        avatarId: '00000000-0000-0000-0000-000000000003',
        totalSessions: 2,
        averagePerformance: 80,
        improvementTrend: 'improving'
    }
];
const mockRecommendations = [
    {
        gameId: 'letters',
        reason: 'Try letters next!',
        priority: 8,
        estimatedDifficulty: 'beginner',
        learningObjectives: [],
        prerequisitesMet: true
    }
];
const mockMetrics = {
    totalGamesPlayed: 2,
    averageSessionDuration: 60,
    overallCompletionRate: 1,
    skillLevelDistribution: {
        beginner: 2
    },
    subjectPreferences: {
        Mathematics: 2
    },
    learningVelocity: 1,
    engagementScore: 80
};
// Mock the analytics service methods
const mockAnalyticsService = _analyticsService.analyticsService;
describe.skip('DashboardPage', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        mockAnalyticsService.getAvatarProgress.mockResolvedValue(mockProgress);
        mockAnalyticsService.getLearningPathRecommendations.mockResolvedValue(mockRecommendations);
        mockAnalyticsService.getPerformanceMetrics.mockResolvedValue(mockMetrics);
        // Mock consistent user context
        jest.spyOn(_UserContext, 'useAvatar').mockReturnValue({
            currentAvatar: mockAvatar,
            avatars: [
                mockAvatar
            ],
            setCurrentAvatar: jest.fn(),
            createAvatar: jest.fn()
        });
        jest.spyOn(_UserContext, 'useUser').mockReturnValue({
            user: {
                id: 'test-user',
                email: 'test@example.com',
                app_metadata: {},
                user_metadata: {},
                aud: 'authenticated',
                created_at: new Date().toISOString()
            },
            userProfile: null,
            avatars: [
                mockAvatar
            ],
            currentAvatar: mockAvatar,
            loading: false,
            error: null,
            setCurrentAvatar: jest.fn(),
            createAvatar: jest.fn(),
            refreshAvatars: jest.fn(),
            signOut: jest.fn(),
            roles: [],
            org: {
                id: 'test-org',
                name: 'Test Organization',
                subscriptionPlan: {
                    id: 'test-plan',
                    name: 'Test Plan',
                    tier: 'professional',
                    avatar_limit: 30,
                    features_included: {}
                }
            },
            hasRole: jest.fn().mockReturnValue(false),
            canAccess: jest.fn().mockReturnValue(false),
            getTierLimit: jest.fn().mockReturnValue(5),
            viewAsRole: null,
            viewAsAvatar: null,
            isViewAs: false,
            setViewAsRole: jest.fn(),
            setViewAsAvatar: jest.fn(),
            resetViewAs: jest.fn(),
            loadingState: {
                user: false,
                roles: false,
                avatars: false,
                isReady: true
            }
        });
        jest.spyOn(_UserContext, 'useRoleGuard').mockReturnValue({
            hasRole: jest.fn().mockReturnValue(false),
            isReady: true,
            roles: []
        });
    });
    afterEach(()=>{
        (0, _react.cleanup)();
        jest.restoreAllMocks();
    });
    it('renders dashboard data', async ()=>{
        await (0, _react1.act)(async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_UserContext.UserProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {})
            }));
        });
        // Check for basic dashboard elements
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText('Learning Progress Dashboard')).toBeInTheDocument();
            expect(_react.screen.getByText('Quick Actions')).toBeInTheDocument();
        }, {
            timeout: 3000
        });
        // Check for analytics data being called
        expect(mockAnalyticsService.getAvatarProgress).toHaveBeenCalledWith(mockAvatar.id);
        expect(mockAnalyticsService.getLearningPathRecommendations).toHaveBeenCalledWith(mockAvatar.id);
        expect(mockAnalyticsService.getPerformanceMetrics).toHaveBeenCalledWith(mockAvatar.id);
        // Check that progress and recommendations sections are rendered
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText('Learning Progress')).toBeInTheDocument();
            expect(_react.screen.getByText('Recommended Learning Path')).toBeInTheDocument();
        }, {
            timeout: 2000
        });
    });
    it('shows info if no avatar', async ()=>{
        jest.spyOn(_UserContext, 'useAvatar').mockReturnValue({
            currentAvatar: null,
            avatars: [],
            setCurrentAvatar: jest.fn(),
            createAvatar: jest.fn()
        });
        await (0, _react1.act)(async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_UserContext.UserProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {})
            }));
        });
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText(/please select or create an avatar/i)).toBeInTheDocument();
        }, {
            timeout: 2000
        });
    });
    it('shows error on analytics failure', async ()=>{
        // Reset analytics mocks to return rejected promise
        mockAnalyticsService.getAvatarProgress.mockRejectedValue(new Error('fail'));
        mockAnalyticsService.getLearningPathRecommendations.mockRejectedValue(new Error('fail'));
        mockAnalyticsService.getPerformanceMetrics.mockRejectedValue(new Error('fail'));
        await (0, _react1.act)(async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_UserContext.UserProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {})
            }));
        });
        await (0, _react.waitFor)(()=>{
            const alert = _react.screen.getByRole('alert');
            expect(alert).toHaveTextContent('fail');
        }, {
            timeout: 3000
        });
    });
});

//# sourceMappingURL=data:application/json;base64,