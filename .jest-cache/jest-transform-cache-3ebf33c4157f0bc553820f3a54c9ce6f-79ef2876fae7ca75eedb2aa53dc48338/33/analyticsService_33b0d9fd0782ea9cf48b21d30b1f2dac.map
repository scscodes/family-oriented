{"version":3,"sources":["D:\\Projects\\family-oriented\\src\\utils\\analyticsService.ts"],"sourcesContent":["/**\r\n * Comprehensive Analytics Service for Game Tracking and Learning Progression\r\n * Supports both individual user analytics and aggregate platform metrics\r\n * Integrated with Supabase for persistent data storage\r\n */\r\n\r\nimport { GameType } from './gameUtils';\r\nimport { createClient } from '@/lib/supabase/client';\r\nimport type { Json } from '@/lib/supabase/database.types';\r\nimport { logger } from './logger';\r\n\r\n// Core interfaces for analytics data\r\nexport interface GameSessionData {\r\n  id: string;\r\n  avatarId: string;\r\n  orgId?: string;\r\n  gameId: GameType;\r\n  sessionStart: Date;\r\n  sessionEnd?: Date;\r\n  totalDuration: number; // seconds\r\n  questionsAttempted: number;\r\n  questionsCorrect: number;\r\n  completionStatus: 'completed' | 'abandoned' | 'in_progress';\r\n  difficultyLevel: string;\r\n  settingsUsed: Record<string, unknown>;\r\n  scoreData?: {\r\n    finalScore: number;\r\n    accuracy: number;\r\n    questionsCorrect: number;\r\n    questionsAttempted: number;\r\n    completionRate: number;\r\n  };\r\n}\r\n\r\nexport interface GameEventData {\r\n  sessionId: string;\r\n  avatarId: string;\r\n  eventType: \r\n    | 'game_start' \r\n    | 'game_complete' \r\n    | 'question_start' \r\n    | 'question_answer' \r\n    | 'hint_used' \r\n    | 'game_pause' \r\n    | 'game_resume' \r\n    | 'difficulty_change' \r\n    | 'game_abandon'\r\n    | 'wizard_start'\r\n    | 'wizard_complete'\r\n    | 'wizard_game_complete';\r\n  eventData: Record<string, unknown>;\r\n  timestamp: Date;\r\n  sequenceNumber: number;\r\n}\r\n\r\nexport interface LearningProgressData {\r\n  avatarId: string;\r\n  gameId: GameType;\r\n  skillLevel: 'beginner' | 'intermediate' | 'advanced';\r\n  masteryScore: number; // 0-100\r\n  learningObjectivesMet: string[];\r\n  prerequisiteCompletion: Record<string, boolean>;\r\n  lastPlayed: Date;\r\n  totalSessions: number;\r\n  averagePerformance: number;\r\n  improvementTrend: 'improving' | 'stable' | 'declining';\r\n}\r\n\r\nexport interface LearningPathRecommendation {\r\n  gameId: string;\r\n  reason: string;\r\n  priority: number; // 1-10, higher is more recommended\r\n  estimatedDifficulty: string;\r\n  learningObjectives: string[];\r\n  prerequisitesMet: boolean;\r\n}\r\n\r\nexport interface PerformanceMetrics {\r\n  totalGamesPlayed: number;\r\n  averageSessionDuration: number;\r\n  overallCompletionRate: number;\r\n  skillLevelDistribution: Record<string, number>;\r\n  subjectPreferences: Record<string, number>;\r\n  learningVelocity: number; // objectives mastered per week\r\n  engagementScore: number; // 0-100\r\n}\r\n\r\n/**\r\n * Supabase-Integrated Analytics Service Class\r\n * Handles all game tracking, learning progression, and performance analytics\r\n * with persistent storage via Supabase\r\n */\r\nexport class SupabaseAnalyticsService {\r\n  private supabase = createClient();\r\n  \r\n  // Local cache for performance (still maintain for complex calculations)\r\n  private sessionCache: Map<string, GameSessionData> = new Map();\r\n  private eventSequenceCounters: Map<string, number> = new Map();\r\n\r\n  /**\r\n   * Start tracking a new game session (Supabase-integrated)\r\n   */\r\n  async startGameSession(\r\n    avatarId: string,\r\n    gameType: string, // Using gameType to match Supabase schema\r\n    settings: Record<string, unknown>,\r\n    orgId?: string\r\n  ): Promise<string> {\r\n    const { data, error } = await this.supabase\r\n      .from('game_sessions')\r\n      .insert({\r\n        avatar_id: avatarId,\r\n        org_id: orgId,\r\n        game_type: gameType,\r\n        settings_used: settings as Json,\r\n        session_start: new Date().toISOString()\r\n      })\r\n      .select('id')\r\n      .single();\r\n\r\n    if (error) throw error;\r\n\r\n    // Cache session locally for immediate access\r\n    const session: GameSessionData = {\r\n      id: data.id,\r\n      avatarId,\r\n      orgId,\r\n      gameId: gameType as GameType,\r\n      sessionStart: new Date(),\r\n      totalDuration: 0,\r\n      questionsAttempted: 0,\r\n      questionsCorrect: 0,\r\n      completionStatus: 'in_progress',\r\n      difficultyLevel: 'beginner',\r\n      settingsUsed: settings\r\n    };\r\n\r\n    this.sessionCache.set(data.id, session);\r\n    this.eventSequenceCounters.set(data.id, 0);\r\n    \r\n    // Track session start event\r\n    await this.trackEvent(data.id, avatarId, 'game_start', { gameType, settings });\r\n    \r\n    return data.id;\r\n  }\r\n\r\n  /**\r\n   * Track individual game events during a session (Supabase-integrated)\r\n   */\r\n  async trackEvent(\r\n    sessionId: string,\r\n    avatarId: string,\r\n    eventType: GameEventData['eventType'],\r\n    eventData: Record<string, unknown>\r\n  ): Promise<void> {\r\n    const sequenceNumber = (this.eventSequenceCounters.get(sessionId) || 0) + 1;\r\n    this.eventSequenceCounters.set(sessionId, sequenceNumber);\r\n\r\n    const { error } = await this.supabase\r\n      .from('game_events')\r\n      .insert({\r\n        session_id: sessionId,\r\n        avatar_id: avatarId,\r\n        event_type: eventType,\r\n        event_data: eventData as Json,\r\n        timestamp: new Date().toISOString(),\r\n        sequence_number: sequenceNumber\r\n      });\r\n\r\n    if (error) throw error;\r\n\r\n    // Update local cache if session exists\r\n    const session = this.sessionCache.get(sessionId);\r\n    if (session) {\r\n      this.updateSessionFromEvent(session, {\r\n        sessionId,\r\n        avatarId,\r\n        eventType,\r\n        eventData,\r\n        timestamp: new Date(),\r\n        sequenceNumber\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Complete a game session and calculate final metrics (Supabase-integrated)\r\n   */\r\n  async completeGameSession(\r\n    sessionId: string,\r\n    finalScore: number,\r\n    questionsAttempted: number,\r\n    questionsCorrect: number\r\n  ): Promise<void> {\r\n    const scoreData = {\r\n      finalScore,\r\n      accuracy: questionsAttempted > 0 ? questionsCorrect / questionsAttempted : 0,\r\n      questionsCorrect,\r\n      questionsAttempted,\r\n      completionRate: 1.0\r\n    };\r\n\r\n    // Calculate duration from cached session or fetch from DB\r\n    let totalDuration = 0;\r\n    const cachedSession = this.sessionCache.get(sessionId);\r\n    if (cachedSession) {\r\n      totalDuration = Math.floor((new Date().getTime() - cachedSession.sessionStart.getTime()) / 1000);\r\n    }\r\n\r\n    const { error } = await this.supabase\r\n      .from('game_sessions')\r\n      .update({\r\n        session_end: new Date().toISOString(),\r\n        total_duration: totalDuration,\r\n        questions_attempted: questionsAttempted,\r\n        questions_correct: questionsCorrect,\r\n        completion_status: 'completed',\r\n        score_data: scoreData\r\n      })\r\n      .eq('id', sessionId);\r\n\r\n    if (error) throw error;\r\n\r\n    // Track completion event\r\n    await this.trackEvent(sessionId, cachedSession?.avatarId || '', 'game_complete', {\r\n      finalScore,\r\n      questionsAttempted,\r\n      questionsCorrect,\r\n      duration: totalDuration\r\n    });\r\n\r\n    // Update learning progress\r\n    if (cachedSession) {\r\n      await this.updateLearningProgress(cachedSession, finalScore);\r\n    }\r\n\r\n    // Clean up cache\r\n    this.sessionCache.delete(sessionId);\r\n    this.eventSequenceCounters.delete(sessionId);\r\n  }\r\n\r\n  /**\r\n   * Get learning progress for an avatar (Supabase-integrated)\r\n   */\r\n  async getAvatarProgress(avatarId: string): Promise<LearningProgressData[]> {\r\n    const { data, error } = await this.supabase\r\n      .from('learning_progress')\r\n      .select('*')\r\n      .eq('avatar_id', avatarId)\r\n      .order('last_played', { ascending: false });\r\n\r\n    if (error) throw error;\r\n\r\n    // Transform Supabase data to our interface\r\n    return (data || []).map(row => ({\r\n      avatarId: row.avatar_id,\r\n      gameId: row.game_type as GameType,\r\n      skillLevel: row.skill_level as 'beginner' | 'intermediate' | 'advanced',\r\n      masteryScore: row.mastery_score || 0,\r\n      learningObjectivesMet: row.learning_objectives_met || [],\r\n      prerequisiteCompletion: (row.prerequisite_completion as Record<string, boolean>) || {},\r\n      lastPlayed: new Date(row.last_played),\r\n      totalSessions: row.total_sessions || 0,\r\n      averagePerformance: row.average_performance || 0,\r\n      improvementTrend: row.improvement_trend as 'improving' | 'stable' | 'declining'\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Get game sessions for an avatar (Supabase-integrated)\r\n   */\r\n  async getAvatarSessions(avatarId: string, limit?: number): Promise<GameSessionData[]> {\r\n    logger.debug('=== GETTING AVATAR SESSIONS ===');\r\n    logger.debug('Querying sessions for avatar ID:', avatarId);\r\n    \r\n    let query = this.supabase\r\n      .from('game_sessions')\r\n      .select('*')\r\n      .eq('avatar_id', avatarId)\r\n      .order('session_start', { ascending: false });\r\n\r\n    if (limit) {\r\n      query = query.limit(limit);\r\n    }\r\n\r\n    const { data, error } = await query;\r\n    if (error) {\r\n      logger.error('Error fetching sessions:', error);\r\n      throw error;\r\n    }\r\n\r\n    logger.debug('Raw session data from database:', data);\r\n    logger.debug('Number of sessions found:', data?.length || 0);\r\n\r\n    // Also check all sessions in database to see what avatar IDs exist\r\n    const { data: allSessions } = await this.supabase\r\n      .from('game_sessions')\r\n      .select('avatar_id, game_type, id')\r\n      .limit(10);\r\n    \r\n    logger.debug('Sample of all sessions in database:', allSessions);\r\n    const uniqueAvatarIds = [...new Set(allSessions?.map(s => s.avatar_id) || [])];\r\n    logger.debug('Unique avatar IDs that have sessions:', uniqueAvatarIds);\r\n\r\n    // Transform Supabase data to our interface\r\n    const transformedData = (data || []).map(row => ({\r\n      id: row.id,\r\n      avatarId: row.avatar_id,\r\n      orgId: row.org_id || undefined,\r\n      gameId: row.game_type as GameType,\r\n      sessionStart: new Date(row.session_start),\r\n      sessionEnd: row.session_end ? new Date(row.session_end) : undefined,\r\n      totalDuration: row.total_duration || 0,\r\n      questionsAttempted: row.questions_attempted || 0,\r\n      questionsCorrect: row.questions_correct || 0,\r\n      completionStatus: row.completion_status as 'completed' | 'abandoned' | 'in_progress',\r\n      difficultyLevel: row.difficulty_level,\r\n      settingsUsed: (row.settings_used as Record<string, unknown>) || {},\r\n      scoreData: row.score_data as {\r\n        finalScore: number;\r\n        accuracy: number;\r\n        questionsCorrect: number;\r\n        questionsAttempted: number;\r\n        completionRate: number;\r\n      }\r\n    }));\r\n\r\n    logger.debug('Transformed session data:', transformedData);\r\n    logger.debug('=== END GETTING AVATAR SESSIONS ===');\r\n    \r\n    return transformedData;\r\n  }\r\n\r\n  /**\r\n   * Get learning path recommendations for an avatar\r\n   */\r\n  async getLearningPathRecommendations(avatarId: string, maxRecommendations: number = 5): Promise<LearningPathRecommendation[]> {\r\n    const progress = await this.getAvatarProgress(avatarId);\r\n    const recommendations: LearningPathRecommendation[] = [];\r\n\r\n    // Import games data for analysis\r\n    const availableGames = this.getAvailableGames();\r\n    logger.debug('Available games:', availableGames.length);\r\n\r\n    // If no progress yet, recommend beginner games\r\n    if (progress.length === 0) {\r\n      logger.debug('No progress found, recommending beginner games');\r\n      return availableGames\r\n        .filter(game => game.skillLevel === 'beginner')\r\n        .slice(0, maxRecommendations)\r\n        .map(game => ({\r\n          gameId: game.id,\r\n          reason: 'Great game to start with!',\r\n          priority: 8,\r\n          estimatedDifficulty: 'beginner',\r\n          learningObjectives: game.learningObjectives || [],\r\n          prerequisitesMet: true\r\n        }));\r\n    }\r\n\r\n    logger.debug('Processing recommendations for progress:', progress.length, 'games');\r\n\r\n    // First, recommend games that need improvement\r\n    const needsImprovement = progress\r\n      .filter(p => p.masteryScore < 70)\r\n      .sort((a, b) => a.masteryScore - b.masteryScore);\r\n\r\n    for (const gameProgress of needsImprovement) {\r\n      const game = availableGames.find(g => g.id === gameProgress.gameId);\r\n      if (game) {\r\n        recommendations.push({\r\n          gameId: game.id,\r\n          reason: `Keep practicing to improve your ${game.id} skills!`,\r\n          priority: 9,\r\n          estimatedDifficulty: gameProgress.skillLevel,\r\n          learningObjectives: game.learningObjectives || [],\r\n          prerequisitesMet: true\r\n        });\r\n      }\r\n    }\r\n\r\n    // Then, recommend new games in the same subject as games with good progress\r\n    const goodProgress = progress.filter(p => p.masteryScore >= 70);\r\n    const subjectsToExplore = new Set(goodProgress.map(p => this.getGameSubject(p.gameId)));\r\n\r\n    for (const subject of subjectsToExplore) {\r\n      const newGamesInSubject = availableGames\r\n        .filter(game => \r\n          this.getGameSubject(game.id) === subject && \r\n          !progress.some(p => p.gameId === game.id)\r\n        );\r\n\r\n      for (const game of newGamesInSubject) {\r\n        recommendations.push({\r\n          gameId: game.id,\r\n          reason: `Try this ${subject} game to expand your skills!`,\r\n          priority: 7,\r\n          estimatedDifficulty: 'beginner',\r\n          learningObjectives: game.learningObjectives || [],\r\n          prerequisitesMet: true\r\n        });\r\n      }\r\n    }\r\n\r\n    // Finally, add any remaining games not yet played\r\n    const playedGames = new Set(progress.map(p => p.gameId));\r\n    const unplayedGames = availableGames.filter(game => !playedGames.has(game.id as GameType));\r\n\r\n    for (const game of unplayedGames) {\r\n      if (recommendations.length < maxRecommendations) {\r\n        recommendations.push({\r\n          gameId: game.id,\r\n          reason: 'New game to explore!',\r\n          priority: 6,\r\n          estimatedDifficulty: 'beginner',\r\n          learningObjectives: game.learningObjectives || [],\r\n          prerequisitesMet: true\r\n        });\r\n      }\r\n    }\r\n\r\n    logger.debug('Generated recommendations:', recommendations.length);\r\n\r\n    // Sort by priority and return top recommendations\r\n    return recommendations\r\n      .sort((a, b) => b.priority - a.priority)\r\n      .slice(0, maxRecommendations);\r\n  }\r\n\r\n  private getGameSubject(gameId: string): string {\r\n    const subjectMap: Record<string, string> = {\r\n      'numbers': 'Mathematics',\r\n      'math': 'Mathematics',\r\n      'letters': 'Language Arts',\r\n      'colors': 'Visual Arts',\r\n      'shapes': 'Visual Arts',\r\n      'geography': 'Social Studies'\r\n    };\r\n    return subjectMap[gameId] || 'Other';\r\n  }\r\n\r\n  /**\r\n   * Get comprehensive performance metrics for an avatar\r\n   */\r\n  async getPerformanceMetrics(avatarId: string): Promise<PerformanceMetrics> {\r\n    const [progress, sessions] = await Promise.all([\r\n      this.getAvatarProgress(avatarId),\r\n      this.getAvatarSessions(avatarId)\r\n    ]);\r\n\r\n    logger.debug('=== PERFORMANCE METRICS DEBUG ===');\r\n    logger.debug('Avatar ID:', avatarId);\r\n    logger.debug('Total sessions found:', sessions.length);\r\n    logger.debug('First few sessions:', sessions.slice(0, 3).map(s => ({\r\n      id: s.id,\r\n      gameId: s.gameId,\r\n      completionStatus: s.completionStatus,\r\n      totalDuration: s.totalDuration,\r\n      questionsAttempted: s.questionsAttempted,\r\n      questionsCorrect: s.questionsCorrect,\r\n      scoreData: s.scoreData\r\n    })));\r\n\r\n    // Basic metrics\r\n    const totalGamesPlayed = sessions.length;\r\n    logger.debug('Total games played:', totalGamesPlayed);\r\n    \r\n    const completedSessions = sessions.filter(s => s.completionStatus === 'completed');\r\n    logger.debug('Completed sessions:', completedSessions.length);\r\n    logger.debug('Completed sessions details:', completedSessions.map(s => ({\r\n      gameId: s.gameId,\r\n      totalDuration: s.totalDuration,\r\n      scoreData: s.scoreData\r\n    })));\r\n    \r\n    const averageSessionDuration = completedSessions.length > 0\r\n      ? completedSessions.reduce((sum, s) => sum + (s.totalDuration || 0), 0) / completedSessions.length\r\n      : 0;\r\n    logger.debug('Average session duration (seconds):', averageSessionDuration);\r\n    \r\n    const overallCompletionRate = totalGamesPlayed > 0\r\n      ? completedSessions.length / totalGamesPlayed\r\n      : 0;\r\n    logger.debug('Overall completion rate:', overallCompletionRate);\r\n\r\n    // Calculate skill level distribution\r\n    const skillLevelDistribution = progress.reduce((dist, p) => {\r\n      dist[p.skillLevel] = (dist[p.skillLevel] || 0) + 1;\r\n      return dist;\r\n    }, {} as Record<string, number>);\r\n    logger.debug('Skill level distribution:', skillLevelDistribution);\r\n\r\n    // Calculate subject preferences based on play frequency and performance\r\n    const subjectPreferences = this.calculateSubjectPreferences(sessions);\r\n    logger.debug('Subject preferences:', subjectPreferences);\r\n\r\n    // Calculate learning velocity (objectives mastered per week)\r\n    const learningVelocity = this.calculateLearningVelocity(progress);\r\n    logger.debug('Learning velocity:', learningVelocity);\r\n\r\n    // Calculate engagement score based on various factors\r\n    const engagementScore = this.calculateEngagementScore(sessions);\r\n    logger.debug('Engagement score calculation details:');\r\n    logger.debug('- Sessions for engagement:', sessions.length);\r\n    logger.debug('- Completed for engagement:', completedSessions.length);\r\n    logger.debug('- Final engagement score:', engagementScore);\r\n\r\n    const metrics = {\r\n      totalGamesPlayed,\r\n      averageSessionDuration,\r\n      overallCompletionRate,\r\n      skillLevelDistribution,\r\n      subjectPreferences,\r\n      learningVelocity,\r\n      engagementScore\r\n    };\r\n\r\n    logger.debug('=== FINAL CALCULATED METRICS ===');\r\n    logger.debug(metrics);\r\n    logger.debug('=== END DEBUG ===');\r\n    return metrics;\r\n  }\r\n\r\n  /**\r\n   * Get aggregate analytics for platform-wide metrics (Supabase-integrated)\r\n   */\r\n  async getAggregateAnalytics(orgId?: string): Promise<{\r\n    totalSessions: number;\r\n    uniquePlayers: number;\r\n    averageDuration: number;\r\n    completionRate: number;\r\n    popularGames: Array<{ gameId: GameType; sessions: number; avgScore: number }>;\r\n    learningEffectiveness: Record<string, number>;\r\n  }> {\r\n    let query = this.supabase\r\n      .from('game_sessions')\r\n      .select('*');\r\n\r\n    if (orgId) {\r\n      query = query.eq('org_id', orgId);\r\n    }\r\n\r\n    const { data: sessions, error } = await query;\r\n    if (error) throw error;\r\n\r\n    const sessionData = sessions || [];\r\n    const totalSessions = sessionData.length;\r\n    const uniquePlayers = new Set(sessionData.map(s => s.avatar_id)).size;\r\n    const averageDuration = sessionData.reduce((sum, s) => sum + (s.total_duration || 0), 0) / totalSessions || 0;\r\n    const completedSessions = sessionData.filter(s => s.completion_status === 'completed');\r\n    const completionRate = completedSessions.length / totalSessions || 0;\r\n\r\n    // Calculate popular games\r\n    const gameStats = sessionData.reduce((stats, session) => {\r\n      const gameType = session.game_type;\r\n      if (!stats[gameType]) {\r\n        stats[gameType] = { sessions: 0, totalScore: 0, completedSessions: 0 };\r\n      }\r\n      stats[gameType].sessions++;\r\n      if (session.completion_status === 'completed' && session.score_data) {\r\n        stats[gameType].completedSessions++;\r\n        const scoreData = session.score_data as Record<string, unknown>;\r\n        const finalScore = typeof scoreData?.finalScore === 'number' ? scoreData.finalScore : 0;\r\n        stats[gameType].totalScore += finalScore;\r\n      }\r\n      return stats;\r\n    }, {} as Record<string, { sessions: number; totalScore: number; completedSessions: number }>);\r\n\r\n    const popularGames = Object.entries(gameStats)\r\n      .map(([gameId, stats]) => {\r\n        const statData = stats as { sessions: number; totalScore: number; completedSessions: number };\r\n        return {\r\n          gameId: gameId as GameType,\r\n          sessions: statData.sessions,\r\n          avgScore: statData.completedSessions > 0 ? statData.totalScore / statData.completedSessions : 0\r\n        };\r\n      })\r\n      .sort((a, b) => b.sessions - a.sessions);\r\n\r\n    // Transform raw session data to GameSessionData format\r\n    const transformedSessions: GameSessionData[] = sessionData.map(row => ({\r\n      id: row.id,\r\n      avatarId: row.avatar_id,\r\n      orgId: row.org_id || undefined,\r\n      gameId: row.game_type as GameType,\r\n      sessionStart: new Date(row.session_start),\r\n      sessionEnd: row.session_end ? new Date(row.session_end) : undefined,\r\n      totalDuration: row.total_duration || 0,\r\n      questionsAttempted: row.questions_attempted || 0,\r\n      questionsCorrect: row.questions_correct || 0,\r\n      completionStatus: row.completion_status as 'completed' | 'abandoned' | 'in_progress',\r\n      difficultyLevel: row.difficulty_level,\r\n      settingsUsed: (row.settings_used as Record<string, unknown>) || {},\r\n      scoreData: row.score_data as {\r\n        finalScore: number;\r\n        accuracy: number;\r\n        questionsCorrect: number;\r\n        questionsAttempted: number;\r\n        completionRate: number;\r\n      }\r\n    }));\r\n\r\n    // Calculate learning effectiveness by subject\r\n    const learningEffectiveness = this.calculateLearningEffectivenessFromSessions(transformedSessions);\r\n\r\n    return {\r\n      totalSessions,\r\n      uniquePlayers,\r\n      averageDuration,\r\n      completionRate,\r\n      popularGames,\r\n      learningEffectiveness\r\n    };\r\n  }\r\n\r\n  // Private helper methods\r\n\r\n  private updateSessionFromEvent(session: GameSessionData, event: GameEventData): void {\r\n    switch (event.eventType) {\r\n      case 'question_answer':\r\n        session.questionsAttempted++;\r\n        if (event.eventData.correct) {\r\n          session.questionsCorrect++;\r\n        }\r\n        break;\r\n      case 'difficulty_change':\r\n        session.difficultyLevel = event.eventData.newDifficulty as string;\r\n        break;\r\n    }\r\n  }\r\n\r\n  private async updateLearningProgress(session: GameSessionData, finalScore: number): Promise<void> {\r\n    // Check if progress record exists\r\n    const { data: existingProgress } = await this.supabase\r\n      .from('learning_progress')\r\n      .select('*')\r\n      .eq('avatar_id', session.avatarId)\r\n      .eq('game_type', session.gameId)\r\n      .single();\r\n\r\n    const now = new Date().toISOString();\r\n    \r\n    if (!existingProgress) {\r\n      // Create new progress record\r\n      const { error } = await this.supabase\r\n        .from('learning_progress')\r\n        .insert({\r\n          avatar_id: session.avatarId,\r\n          org_id: session.orgId,\r\n          game_type: session.gameId,\r\n          skill_level: 'beginner',\r\n          mastery_score: finalScore,\r\n          learning_objectives_met: [],\r\n          prerequisite_completion: {},\r\n          last_played: now,\r\n          total_sessions: 1,\r\n          average_performance: finalScore,\r\n          improvement_trend: 'stable',\r\n          needs_realtime_update: true\r\n        });\r\n\r\n      if (error) throw error;\r\n    } else {\r\n      // Update existing progress\r\n      const totalSessions = (existingProgress.total_sessions || 0) + 1;\r\n      const previousAverage = existingProgress.average_performance || 0;\r\n      const newAverage = (previousAverage * (totalSessions - 1) + finalScore) / totalSessions;\r\n      \r\n      // Determine improvement trend\r\n      let improvementTrend = 'stable';\r\n      if (totalSessions > 1) {\r\n        if (newAverage > previousAverage * 1.1) {\r\n          improvementTrend = 'improving';\r\n        } else if (newAverage < previousAverage * 0.9) {\r\n          improvementTrend = 'declining';\r\n        }\r\n      }\r\n\r\n      // Update mastery score (weighted average favoring recent performance)\r\n      const masteryScore = Math.min(100, ((existingProgress.mastery_score || 0) * 0.7) + (finalScore * 0.3));\r\n\r\n      // Check for skill level advancement\r\n      let skillLevel = existingProgress.skill_level;\r\n      if (masteryScore >= 80 && skillLevel === 'beginner') {\r\n        skillLevel = 'intermediate';\r\n      } else if (masteryScore >= 90 && skillLevel === 'intermediate') {\r\n        skillLevel = 'advanced';\r\n      }\r\n\r\n      const { error } = await this.supabase\r\n        .from('learning_progress')\r\n        .update({\r\n          skill_level: skillLevel,\r\n          mastery_score: masteryScore,\r\n          last_played: now,\r\n          total_sessions: totalSessions,\r\n          average_performance: newAverage,\r\n          improvement_trend: improvementTrend,\r\n          needs_realtime_update: true,\r\n          updated_at: now\r\n        })\r\n        .eq('id', existingProgress.id);\r\n\r\n      if (error) throw error;\r\n    }\r\n  }\r\n\r\n  private calculateGameRecommendation(\r\n    game: { id: string; prerequisites?: string[]; learningObjectives?: string[] }, \r\n    gameProgress?: LearningProgressData, \r\n    allProgress?: LearningProgressData[]\r\n  ): LearningPathRecommendation | null {\r\n    let priority = 5; // base priority\r\n    let reason = 'Recommended for continued learning';\r\n\r\n    // Check prerequisites\r\n    const prerequisitesMet = this.checkPrerequisites(game, allProgress || []);\r\n    if (!prerequisitesMet) {\r\n      return null; // Don't recommend if prerequisites not met\r\n    }\r\n\r\n    // Boost priority for games not yet played\r\n    if (!gameProgress) {\r\n      priority += 2;\r\n      reason = 'New game to explore';\r\n    }\r\n\r\n    // Boost priority for games where user is improving\r\n    if (gameProgress?.improvementTrend === 'improving') {\r\n      priority += 1;\r\n      reason = 'You\\'re making great progress here!';\r\n    }\r\n\r\n    // Lower priority for mastered games\r\n    if (gameProgress?.masteryScore && gameProgress.masteryScore >= 90) {\r\n      priority -= 2;\r\n      reason = 'Review and reinforce mastered skills';\r\n    }\r\n\r\n    return {\r\n      gameId: game.id,\r\n      reason,\r\n      priority: Math.max(1, Math.min(10, priority)),\r\n      estimatedDifficulty: gameProgress?.skillLevel || 'beginner',\r\n      learningObjectives: game.learningObjectives || [],\r\n      prerequisitesMet\r\n    };\r\n  }\r\n\r\n  private checkPrerequisites(game: { prerequisites?: string[] }, progress: LearningProgressData[]): boolean {\r\n    if (!game.prerequisites || game.prerequisites.length === 0) {\r\n      return true;\r\n    }\r\n\r\n    return game.prerequisites.every((prereqId: string) => {\r\n      const prereqProgress = progress.find(p => p.gameId === prereqId);\r\n      return prereqProgress && prereqProgress.masteryScore >= 70; // 70% mastery required\r\n    });\r\n  }\r\n\r\n  private calculateSubjectPreferences(sessions: GameSessionData[]): Record<string, number> {\r\n    const preferences: Record<string, number> = {};\r\n    const gameTypes = new Set(sessions.map(s => s.gameId));\r\n    \r\n    gameTypes.forEach(gameType => {\r\n      const gameSessions = sessions.filter(s => s.gameId === gameType);\r\n      const completedSessions = gameSessions.filter(s => s.completionStatus === 'completed');\r\n      \r\n      if (completedSessions.length > 0) {\r\n        const averageScore = completedSessions.reduce((sum, s) => {\r\n          // Use the scoreData field directly\r\n          const score = s.scoreData?.finalScore || 0;\r\n          return sum + score;\r\n        }, 0) / completedSessions.length;\r\n        \r\n        preferences[gameType] = averageScore;\r\n      }\r\n    });\r\n\r\n    return preferences;\r\n  }\r\n\r\n  private calculateLearningVelocity(progress: LearningProgressData[]): number {\r\n    if (progress.length === 0) return 0;\r\n\r\n    // Count objectives mastered in the last week\r\n    const oneWeekAgo = new Date();\r\n    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\r\n\r\n    const recentProgress = progress.filter(p => \r\n      p.lastPlayed >= oneWeekAgo && p.masteryScore >= 80\r\n    );\r\n\r\n    return recentProgress.length;\r\n  }\r\n\r\n  private calculateEngagementScore(sessions: GameSessionData[]): number {\r\n    if (sessions.length === 0) return 0;\r\n\r\n    const factors = {\r\n      sessionFrequency: 0,\r\n      completionRate: 0,\r\n      averageDuration: 0,\r\n      consistency: 0\r\n    };\r\n\r\n    // Session frequency (0-25 points)\r\n    const sessionCount = sessions.length;\r\n    factors.sessionFrequency = Math.min(25, sessionCount * 2);\r\n\r\n    // Completion rate (0-25 points)\r\n    const completedSessions = sessions.filter(s => s.completionStatus === 'completed');\r\n    const completionRate = completedSessions.length / sessionCount;\r\n    factors.completionRate = completionRate * 25;\r\n\r\n    // Average duration (0-25 points)\r\n    const totalDuration = completedSessions.reduce((sum, s) => sum + (s.totalDuration || 0), 0);\r\n    const avgDuration = completedSessions.length > 0 ? totalDuration / completedSessions.length : 0;\r\n    factors.averageDuration = Math.min(25, avgDuration / 60); // Convert to minutes and cap at 25\r\n\r\n    // Consistency (0-25 points)\r\n    const recentSessions = sessions.slice(-5);\r\n    const recentCompletionRate = recentSessions.filter(s => s.completionStatus === 'completed').length / recentSessions.length;\r\n    factors.consistency = recentCompletionRate * 25;\r\n\r\n    // Calculate total engagement score (0-100)\r\n    const totalScore = Object.values(factors).reduce((sum, score) => sum + score, 0);\r\n    return Math.round(totalScore);\r\n  }\r\n\r\n  /**\r\n   * Calculate learning effectiveness metrics from session data\r\n   */\r\n  private calculateLearningEffectivenessFromSessions(sessions: GameSessionData[]): Record<string, number> {\r\n    const gameEffectiveness: Record<string, { totalScore: number; sessionCount: number }> = {};\r\n    \r\n    sessions.forEach(session => {\r\n      if (session.completionStatus === 'completed') {\r\n        const gameType = session.gameId;\r\n        const accuracy = session.scoreData?.accuracy || 0;\r\n        \r\n        if (!gameEffectiveness[gameType]) {\r\n          gameEffectiveness[gameType] = { totalScore: 0, sessionCount: 0 };\r\n        }\r\n        \r\n        gameEffectiveness[gameType].totalScore += accuracy;\r\n        gameEffectiveness[gameType].sessionCount += 1;\r\n      }\r\n    });\r\n\r\n    // Convert to average effectiveness scores\r\n    const effectiveness: Record<string, number> = {};\r\n    Object.keys(gameEffectiveness).forEach(gameType => {\r\n      const { totalScore, sessionCount } = gameEffectiveness[gameType];\r\n      effectiveness[gameType] = sessionCount > 0 ? totalScore / sessionCount : 0;\r\n    });\r\n\r\n    return effectiveness;\r\n  }\r\n\r\n  /**\r\n   * Get list of available games for recommendations\r\n   */\r\n  private getAvailableGames(): Array<{\r\n    id: string;\r\n    skillLevel: string;\r\n    learningObjectives: string[];\r\n    prerequisites?: string[];\r\n  }> {\r\n    // Define available games with their metadata\r\n    return [\r\n      {\r\n        id: 'numbers',\r\n        skillLevel: 'beginner',\r\n        learningObjectives: ['Number recognition', 'Basic counting'],\r\n        prerequisites: []\r\n      },\r\n      {\r\n        id: 'math',\r\n        skillLevel: 'beginner',\r\n        learningObjectives: ['Basic addition', 'Number patterns'],\r\n        prerequisites: ['numbers']\r\n      },\r\n      {\r\n        id: 'letters',\r\n        skillLevel: 'beginner',\r\n        learningObjectives: ['Letter recognition', 'Basic phonics'],\r\n        prerequisites: []\r\n      },\r\n      {\r\n        id: 'colors',\r\n        skillLevel: 'beginner',\r\n        learningObjectives: ['Color recognition', 'Color mixing'],\r\n        prerequisites: []\r\n      },\r\n      {\r\n        id: 'shapes',\r\n        skillLevel: 'beginner',\r\n        learningObjectives: ['Shape recognition', 'Basic geometry'],\r\n        prerequisites: []\r\n      },\r\n      {\r\n        id: 'geography',\r\n        skillLevel: 'beginner',\r\n        learningObjectives: ['Map reading', 'Basic geography'],\r\n        prerequisites: []\r\n      }\r\n    ];\r\n  }\r\n\r\n  // Additional helper methods (preserved from original implementation)\r\n  private calculateWeeksActive(): number {\r\n    // Get first and last session dates from the database\r\n    const firstSession = this.getFirstSessionDate();\r\n    const lastSession = this.getLastSessionDate();\r\n    \r\n    if (!firstSession || !lastSession) {\r\n      return 0;\r\n    }\r\n\r\n    const weeksDiff = Math.ceil(\r\n      (lastSession.getTime() - firstSession.getTime()) / (7 * 24 * 60 * 60 * 1000)\r\n    );\r\n    \r\n    return Math.max(1, weeksDiff); // Minimum 1 week to avoid division by zero\r\n  }\r\n\r\n  private calculatePlayConsistency(): number {\r\n    // Legacy method - return default value\r\n    return 0.5; // Default for new users\r\n  }\r\n\r\n  private calculateSubjectEffectiveness(): number {\r\n    // Legacy method - return default value\r\n    return 0;\r\n  }\r\n\r\n  private getFirstSessionDate(): Date | null {\r\n    // Legacy method - return null\r\n    return null;\r\n  }\r\n\r\n  private getLastSessionDate(): Date | null {\r\n    // Legacy method - return null\r\n    return null;\r\n  }\r\n\r\n\r\n}\r\n\r\n// Export singleton instance\r\nexport const analyticsService = new SupabaseAnalyticsService(); "],"names":["SupabaseAnalyticsService","analyticsService","startGameSession","avatarId","gameType","settings","orgId","data","error","supabase","from","insert","avatar_id","org_id","game_type","settings_used","session_start","Date","toISOString","select","single","session","id","gameId","sessionStart","totalDuration","questionsAttempted","questionsCorrect","completionStatus","difficultyLevel","settingsUsed","sessionCache","set","eventSequenceCounters","trackEvent","sessionId","eventType","eventData","sequenceNumber","get","session_id","event_type","event_data","timestamp","sequence_number","updateSessionFromEvent","completeGameSession","finalScore","scoreData","accuracy","completionRate","cachedSession","Math","floor","getTime","update","session_end","total_duration","questions_attempted","questions_correct","completion_status","score_data","eq","duration","updateLearningProgress","delete","getAvatarProgress","order","ascending","map","row","skillLevel","skill_level","masteryScore","mastery_score","learningObjectivesMet","learning_objectives_met","prerequisiteCompletion","prerequisite_completion","lastPlayed","last_played","totalSessions","total_sessions","averagePerformance","average_performance","improvementTrend","improvement_trend","getAvatarSessions","limit","logger","debug","query","length","allSessions","uniqueAvatarIds","Set","s","transformedData","undefined","sessionEnd","difficulty_level","getLearningPathRecommendations","maxRecommendations","progress","recommendations","availableGames","getAvailableGames","filter","game","slice","reason","priority","estimatedDifficulty","learningObjectives","prerequisitesMet","needsImprovement","p","sort","a","b","gameProgress","find","g","push","goodProgress","subjectsToExplore","getGameSubject","subject","newGamesInSubject","some","playedGames","unplayedGames","has","subjectMap","getPerformanceMetrics","sessions","Promise","all","totalGamesPlayed","completedSessions","averageSessionDuration","reduce","sum","overallCompletionRate","skillLevelDistribution","dist","subjectPreferences","calculateSubjectPreferences","learningVelocity","calculateLearningVelocity","engagementScore","calculateEngagementScore","metrics","getAggregateAnalytics","sessionData","uniquePlayers","size","averageDuration","gameStats","stats","totalScore","popularGames","Object","entries","statData","avgScore","transformedSessions","learningEffectiveness","calculateLearningEffectivenessFromSessions","event","correct","newDifficulty","existingProgress","now","needs_realtime_update","previousAverage","newAverage","min","updated_at","calculateGameRecommendation","allProgress","checkPrerequisites","max","prerequisites","every","prereqId","prereqProgress","preferences","gameTypes","forEach","gameSessions","averageScore","score","oneWeekAgo","setDate","getDate","recentProgress","factors","sessionFrequency","consistency","sessionCount","avgDuration","recentSessions","recentCompletionRate","values","round","gameEffectiveness","effectiveness","keys","calculateWeeksActive","firstSession","getFirstSessionDate","lastSession","getLastSessionDate","weeksDiff","ceil","calculatePlayConsistency","calculateSubjectEffectiveness","createClient","Map"],"mappings":"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"}