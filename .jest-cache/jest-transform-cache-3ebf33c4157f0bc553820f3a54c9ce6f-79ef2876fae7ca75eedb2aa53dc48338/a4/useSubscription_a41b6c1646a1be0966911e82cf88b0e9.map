{"version":3,"sources":["D:\\Projects\\family-oriented\\src\\hooks\\useSubscription.tsx"],"sourcesContent":["/**\r\n * useSubscription Hook - React hook for subscription tier management\r\n * Provides subscription feature gating and usage limit checking\r\n */\r\n\r\nimport { useMemo, useCallback } from 'react';\r\nimport { useUser } from '@/context/UserContext';\r\nimport { \r\n  SubscriptionService, \r\n  type SubscriptionFeature, \r\n  type UsageLimit, \r\n  type FeatureGateResult,\r\n  type UsageData\r\n} from '@/utils/subscriptionService';\r\n\r\nimport { logger } from '@/utils/logger';\r\n\r\n/**\r\n * Hook return type\r\n */\r\ninterface UseSubscriptionReturn {\r\n  // Subscription plan info\r\n  subscriptionPlan: any | null;\r\n  tier: string | null;\r\n  isLoaded: boolean;\r\n  \r\n  // Feature checking\r\n  canAccessFeature: (feature: SubscriptionFeature) => FeatureGateResult;\r\n  hasFeature: (feature: SubscriptionFeature) => boolean;\r\n  \r\n  // Usage checking\r\n  canCreateAvatar: () => FeatureGateResult;\r\n  canCreateCollection: (avatarId?: string) => FeatureGateResult;\r\n  checkUsageLimit: (limitType: UsageLimit, currentUsage: number) => FeatureGateResult;\r\n  \r\n  // Utility methods\r\n  getAvailableFeatures: () => SubscriptionFeature[];\r\n  getUsageSummary: (usageData: UsageData) => Record<UsageLimit, FeatureGateResult>;\r\n  formatFeatureMessage: (result: FeatureGateResult, feature?: string) => string;\r\n  \r\n  // Current usage data\r\n  currentUsage: {\r\n    avatarsCount: number;\r\n    isLoadingUsage: boolean;\r\n  };\r\n}\r\n\r\n/**\r\n * Subscription management hook\r\n */\r\nexport function useSubscription(): UseSubscriptionReturn {\r\n  const { org, avatars, loadingState } = useUser();\r\n  \r\n  // Debug logging\r\n  console.log('useSubscription Debug - Raw org data:', org);\r\n  console.log('useSubscription Debug - Loading state:', loadingState);\r\n  \r\n  const subscriptionPlan = org?.subscriptionPlan || null;\r\n  const tier = subscriptionPlan?.tier || null;\r\n  const isLoaded = loadingState.isReady;\r\n\r\n  // Current usage calculations\r\n  const currentUsage = useMemo(() => ({\r\n    avatarsCount: avatars?.length || 0,\r\n    isLoadingUsage: loadingState.avatars\r\n  }), [avatars, loadingState.avatars]);\r\n\r\n  // Feature checking functions\r\n  const canAccessFeature = useCallback((feature: SubscriptionFeature): FeatureGateResult => {\r\n    if (!isLoaded) {\r\n      return {\r\n        allowed: false,\r\n        reason: 'Loading subscription information...'\r\n      };\r\n    }\r\n    \r\n    return SubscriptionService.canAccessFeature(subscriptionPlan, feature);\r\n  }, [subscriptionPlan, isLoaded]);\r\n\r\n  const hasFeature = useCallback((feature: SubscriptionFeature): boolean => {\r\n    const result = canAccessFeature(feature);\r\n    return result.allowed;\r\n  }, [canAccessFeature]);\r\n\r\n  // Usage limit checking\r\n  const canCreateAvatar = useCallback((): FeatureGateResult => {\r\n    if (!isLoaded || currentUsage.isLoadingUsage) {\r\n      return {\r\n        allowed: false,\r\n        reason: 'Loading avatar information...'\r\n      };\r\n    }\r\n    \r\n    const result = SubscriptionService.canCreateAvatar(subscriptionPlan, currentUsage.avatarsCount);\r\n    \r\n    // Log avatar creation attempts for analytics\r\n    if (!result.allowed) {\r\n      logger.info('Avatar creation blocked by subscription limit:', {\r\n        tier,\r\n        currentCount: currentUsage.avatarsCount,\r\n        limit: result.limit\r\n      });\r\n    }\r\n    \r\n    return result;\r\n  }, [subscriptionPlan, currentUsage, isLoaded, tier]);\r\n\r\n  const canCreateCollection = useCallback((): FeatureGateResult => {\r\n    // For now, we'll use a simplified check\r\n    // In the future, we could fetch per-avatar collection counts\r\n    const estimatedCollectionsCount = 5; // This would be fetched from database\r\n    \r\n    return SubscriptionService.canCreateCollection(subscriptionPlan, estimatedCollectionsCount);\r\n  }, [subscriptionPlan]);\r\n\r\n  const checkUsageLimit = useCallback((\r\n    limitType: UsageLimit, \r\n    currentUsage: number\r\n  ): FeatureGateResult => {\r\n    return SubscriptionService.checkUsageLimit(subscriptionPlan, limitType, currentUsage);\r\n  }, [subscriptionPlan]);\r\n\r\n  // Utility functions\r\n  const getAvailableFeatures = useCallback((): SubscriptionFeature[] => {\r\n    return SubscriptionService.getAvailableFeatures(subscriptionPlan);\r\n  }, [subscriptionPlan]);\r\n\r\n  const getUsageSummary = useCallback((usageData: UsageData) => {\r\n    return SubscriptionService.getUsageSummary(subscriptionPlan, usageData);\r\n  }, [subscriptionPlan]);\r\n\r\n  const formatFeatureMessage = useCallback((\r\n    result: FeatureGateResult, \r\n    feature?: string\r\n  ): string => {\r\n    return SubscriptionService.formatFeatureGateMessage(result);\r\n  }, []);\r\n\r\n  return {\r\n    // Subscription plan info\r\n    subscriptionPlan,\r\n    tier,\r\n    isLoaded,\r\n    \r\n    // Feature checking\r\n    canAccessFeature,\r\n    hasFeature,\r\n    \r\n    // Usage checking\r\n    canCreateAvatar,\r\n    canCreateCollection,\r\n    checkUsageLimit,\r\n    \r\n    // Utility methods\r\n    getAvailableFeatures,\r\n    getUsageSummary,\r\n    formatFeatureMessage,\r\n    \r\n    // Current usage\r\n    currentUsage\r\n  };\r\n}\r\n\r\n/**\r\n * Hook for subscription-specific usage tracking\r\n */\r\nexport function useUsageTracking() {\r\n  const { subscriptionPlan, currentUsage } = useSubscription();\r\n  \r\n  const trackUsage = useCallback(async (\r\n    action: 'avatar_created' | 'collection_created' | 'session_started',\r\n    metadata?: Record<string, any>\r\n  ) => {\r\n    // Analytics tracking for subscription usage\r\n    logger.info('Subscription usage tracked:', {\r\n      action,\r\n      tier: subscriptionPlan?.tier,\r\n      currentAvatars: currentUsage.avatarsCount,\r\n      metadata\r\n    });\r\n    \r\n    // Here we could send to analytics service or external tracking\r\n  }, [subscriptionPlan, currentUsage]);\r\n  \r\n  return { trackUsage };\r\n} "],"names":["useSubscription","useUsageTracking","org","avatars","loadingState","useUser","console","log","subscriptionPlan","tier","isLoaded","isReady","currentUsage","useMemo","avatarsCount","length","isLoadingUsage","canAccessFeature","useCallback","feature","allowed","reason","SubscriptionService","hasFeature","result","canCreateAvatar","logger","info","currentCount","limit","canCreateCollection","estimatedCollectionsCount","checkUsageLimit","limitType","getAvailableFeatures","getUsageSummary","usageData","formatFeatureMessage","formatFeatureGateMessage","trackUsage","action","metadata","currentAvatars"],"mappings":"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"}