62bbd82e7fab1a0ee70cd77e6a502c6e
/**
 * useSubscription Hook - React hook for subscription tier management
 * Provides subscription feature gating and usage limit checking
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useSubscription: function() {
        return useSubscription;
    },
    useUsageTracking: function() {
        return useUsageTracking;
    }
});
const _react = require("react");
const _UserContext = require("../context/UserContext");
const _subscriptionService = require("../utils/subscriptionService");
const _logger = require("../utils/logger");
function useSubscription() {
    const { org, avatars, loadingState } = (0, _UserContext.useUser)();
    // Debug logging
    console.log('useSubscription Debug - Raw org data:', org);
    console.log('useSubscription Debug - Loading state:', loadingState);
    const subscriptionPlan = org?.subscriptionPlan || null;
    const tier = subscriptionPlan?.tier || null;
    const isLoaded = loadingState.isReady;
    // Current usage calculations
    const currentUsage = (0, _react.useMemo)(()=>({
            avatarsCount: avatars?.length || 0,
            isLoadingUsage: loadingState.avatars
        }), [
        avatars,
        loadingState.avatars
    ]);
    // Feature checking functions
    const canAccessFeature = (0, _react.useCallback)((feature)=>{
        if (!isLoaded) {
            return {
                allowed: false,
                reason: 'Loading subscription information...'
            };
        }
        return _subscriptionService.SubscriptionService.canAccessFeature(subscriptionPlan, feature);
    }, [
        subscriptionPlan,
        isLoaded
    ]);
    const hasFeature = (0, _react.useCallback)((feature)=>{
        const result = canAccessFeature(feature);
        return result.allowed;
    }, [
        canAccessFeature
    ]);
    // Usage limit checking
    const canCreateAvatar = (0, _react.useCallback)(()=>{
        if (!isLoaded || currentUsage.isLoadingUsage) {
            return {
                allowed: false,
                reason: 'Loading avatar information...'
            };
        }
        const result = _subscriptionService.SubscriptionService.canCreateAvatar(subscriptionPlan, currentUsage.avatarsCount);
        // Log avatar creation attempts for analytics
        if (!result.allowed) {
            _logger.logger.info('Avatar creation blocked by subscription limit:', {
                tier,
                currentCount: currentUsage.avatarsCount,
                limit: result.limit
            });
        }
        return result;
    }, [
        subscriptionPlan,
        currentUsage,
        isLoaded,
        tier
    ]);
    const canCreateCollection = (0, _react.useCallback)(()=>{
        // For now, we'll use a simplified check
        // In the future, we could fetch per-avatar collection counts
        const estimatedCollectionsCount = 5; // This would be fetched from database
        return _subscriptionService.SubscriptionService.canCreateCollection(subscriptionPlan, estimatedCollectionsCount);
    }, [
        subscriptionPlan
    ]);
    const checkUsageLimit = (0, _react.useCallback)((limitType, currentUsage)=>{
        return _subscriptionService.SubscriptionService.checkUsageLimit(subscriptionPlan, limitType, currentUsage);
    }, [
        subscriptionPlan
    ]);
    // Utility functions
    const getAvailableFeatures = (0, _react.useCallback)(()=>{
        return _subscriptionService.SubscriptionService.getAvailableFeatures(subscriptionPlan);
    }, [
        subscriptionPlan
    ]);
    const getUsageSummary = (0, _react.useCallback)((usageData)=>{
        return _subscriptionService.SubscriptionService.getUsageSummary(subscriptionPlan, usageData);
    }, [
        subscriptionPlan
    ]);
    const formatFeatureMessage = (0, _react.useCallback)((result, feature)=>{
        return _subscriptionService.SubscriptionService.formatFeatureGateMessage(result);
    }, []);
    return {
        // Subscription plan info
        subscriptionPlan,
        tier,
        isLoaded,
        // Feature checking
        canAccessFeature,
        hasFeature,
        // Usage checking
        canCreateAvatar,
        canCreateCollection,
        checkUsageLimit,
        // Utility methods
        getAvailableFeatures,
        getUsageSummary,
        formatFeatureMessage,
        // Current usage
        currentUsage
    };
}
function useUsageTracking() {
    const { subscriptionPlan, currentUsage } = useSubscription();
    const trackUsage = (0, _react.useCallback)(async (action, metadata)=>{
        // Analytics tracking for subscription usage
        _logger.logger.info('Subscription usage tracked:', {
            action,
            tier: subscriptionPlan?.tier,
            currentAvatars: currentUsage.avatarsCount,
            metadata
        });
    // Here we could send to analytics service or external tracking
    }, [
        subscriptionPlan,
        currentUsage
    ]);
    return {
        trackUsage
    };
}

//# sourceMappingURL=data:application/json;base64,