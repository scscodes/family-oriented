{"version":3,"sources":["D:\\Projects\\family-oriented\\src\\utils\\gameUtils.ts"],"sourcesContent":["/**\r\n * Game types supported by the application\r\n */\r\nexport type GameType =\r\n  | 'numbers'\r\n  | 'letters'\r\n  | 'shapes'\r\n  | 'colors'\r\n  | 'patterns'\r\n  | 'math'\r\n  | 'geography'\r\n  | 'fill-in-the-blank'\r\n  | 'rhyming'\r\n  | 'alphabet-sequence'\r\n  | 'number-sequence';\r\n\r\nimport type { GameSettings } from './settingsUtils';\r\nimport { generateUniqueOptions } from './arrayUtils';\r\nimport { GAME_TIMINGS, GAME_DEFAULTS } from './constants';\r\nimport { logger } from './logger';\r\n\r\n/**\r\n * Basic structure for all game questions\r\n */\r\nexport interface GameQuestion {\r\n  prompt: string;  // Muted text for adult/supervisor\r\n  focus: string;   // Main focus of the question\r\n  visual?: string; // Optional visual element (emoji, image, etc.)\r\n  options: string[];\r\n  correctAnswer: string;\r\n  type: GameType;\r\n  id?: string; // Optional unique identifier for the question\r\n  meta?: Record<string, unknown>; // Optional metadata for custom rendering or logic\r\n}\r\n\r\n/**\r\n * Converts a number to its word representation (for 1-50)\r\n */\r\nfunction numberToWord(num: number): string {\r\n  const ones = [\r\n    'zero', 'one', 'two', 'three', 'four', 'five',\r\n    'six', 'seven', 'eight', 'nine', 'ten',\r\n    'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen',\r\n    'sixteen', 'seventeen', 'eighteen', 'nineteen'\r\n  ];\r\n  \r\n  const tens = [\r\n    '', '', 'twenty', 'thirty', 'forty', 'fifty'\r\n  ];\r\n  \r\n  if (num >= 0 && num < 20) {\r\n    return ones[num];\r\n  } else if (num >= 20 && num <= 50) {\r\n    const ten = Math.floor(num / 10);\r\n    const one = num % 10;\r\n    return one === 0 ? tens[ten] : `${tens[ten]}-${ones[one]}`;\r\n  } else {\r\n    return num.toString();\r\n  }\r\n}\r\n\r\n/**\r\n * Generates number-based questions with options\r\n */\r\nexport function generateNumberQuestions(count: number = 5, minNumber: number = 1, maxNumber: number = 50, optionsCount: number = 3): GameQuestion[] {\r\n  const questions: GameQuestion[] = [];\r\n  const usedNumbers = new Set<string>();\r\n  \r\n  // Number questions\r\n  for (let i = 0; i < count; i++) {\r\n    let num: number;\r\n    let attempts = 0;\r\n    \r\n    // Try to find a unique number\r\n    do {\r\n      num = Math.floor(Math.random() * (maxNumber - minNumber + 1)) + minNumber;\r\n      attempts++;\r\n    } while (usedNumbers.has(num.toString()) && attempts < GAME_TIMINGS.MAX_UNIQUE_ATTEMPTS);\r\n    \r\n    // If we couldn't find a unique number, use any number\r\n    if (attempts >= GAME_TIMINGS.MAX_UNIQUE_ATTEMPTS) {\r\n      num = Math.floor(Math.random() * (maxNumber - minNumber + 1)) + minNumber;\r\n    }\r\n    \r\n    usedNumbers.add(num.toString());\r\n    const options = generateUniqueOptions(\r\n      num.toString(), \r\n      optionsCount - 1, \r\n      () => (Math.floor(Math.random() * (maxNumber - minNumber + 1)) + minNumber).toString()\r\n    );\r\n    \r\n    questions.push({\r\n      prompt: `Which number is...`,\r\n      focus: `${numberToWord(num)}`,\r\n      options,\r\n      correctAnswer: num.toString(),\r\n      type: 'numbers'\r\n    });\r\n  }\r\n  \r\n  return questions;\r\n}\r\n\r\n/**\r\n * Mapping of game types to their question generators. Centralizing the logic\r\n * allows hooks and components to easily obtain the appropriate generator\r\n * without needing to know the specific function names.\r\n */\r\nexport const questionGenerators: Record<\r\n  GameType,\r\n  (settings: GameSettings) => GameQuestion[]\r\n> = {\r\n  numbers: (s) => {\r\n    // Ensure numberRange exists and has required properties\r\n    if (!s.numberRange || typeof s.numberRange.min !== 'number' || typeof s.numberRange.max !== 'number') {\r\n      logger.error('Invalid numberRange in settings:', s);\r\n      return [];\r\n    }\r\n    \r\n    return generateNumberQuestions(\r\n      s.questionCount || GAME_DEFAULTS.QUESTIONS_PER_SESSION,\r\n      s.numberRange.min,\r\n      s.numberRange.max,\r\n      s.optionsCount || GAME_DEFAULTS.OPTIONS_COUNT\r\n    );\r\n  },\r\n  letters: (s) =>\r\n    generateLetterQuestions(s.questionCount || GAME_DEFAULTS.QUESTIONS_PER_SESSION, s.optionsCount || GAME_DEFAULTS.OPTIONS_COUNT),\r\n  shapes: (s) =>\r\n    generateShapeQuestions(s.questionCount || GAME_DEFAULTS.QUESTIONS_PER_SESSION, s.optionsCount || GAME_DEFAULTS.OPTIONS_COUNT),\r\n  colors: (s) =>\r\n    generateColorQuestions(s.questionCount || GAME_DEFAULTS.QUESTIONS_PER_SESSION, s.optionsCount || GAME_DEFAULTS.OPTIONS_COUNT),\r\n  patterns: (s) =>\r\n    generatePatternQuestions(s.questionCount || GAME_DEFAULTS.QUESTIONS_PER_SESSION, s.optionsCount || GAME_DEFAULTS.OPTIONS_COUNT),\r\n  math: (s) => generateMathQuestions(s.questionCount || GAME_DEFAULTS.QUESTIONS_PER_SESSION, s.optionsCount || GAME_DEFAULTS.OPTIONS_COUNT),\r\n  'fill-in-the-blank': (s) =>\r\n    generateFillInTheBlankQuestions(s.questionCount || GAME_DEFAULTS.QUESTIONS_PER_SESSION, s.optionsCount || GAME_DEFAULTS.OPTIONS_COUNT),\r\n  geography: () => [], // Placeholder until geography generators are added\r\n  rhyming: (s) => generateRhymingQuestions(s.questionCount || GAME_DEFAULTS.QUESTIONS_PER_SESSION),\r\n  'alphabet-sequence': (s) => generateAlphabetSequenceQuestions(s.questionCount || GAME_DEFAULTS.QUESTIONS_PER_SESSION, s.optionsCount || GAME_DEFAULTS.OPTIONS_COUNT),\r\n  'number-sequence': (s) => generateNumberSequenceQuestions(s.questionCount || GAME_DEFAULTS.QUESTIONS_PER_SESSION, s.optionsCount || GAME_DEFAULTS.OPTIONS_COUNT),\r\n};\r\n\r\n/**\r\n * Generates letter-based questions with options\r\n */\r\nexport function generateLetterQuestions(count: number = 5, optionsCount: number = 3): GameQuestion[] {\r\n  const questions: GameQuestion[] = [];\r\n  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n  const usedLetters = new Set<string>();\r\n  \r\n  // Mix of uppercase and lowercase letter questions\r\n  for (let i = 0; i < count; i++) {\r\n    let letter: string;\r\n    let attempts = 0;\r\n    \r\n    // Try to find a unique letter\r\n    do {\r\n      const randomLetter = alphabet[Math.floor(Math.random() * alphabet.length)];\r\n      const isUppercase = Math.random() > 0.5;\r\n      letter = isUppercase ? randomLetter : randomLetter.toLowerCase();\r\n      attempts++;\r\n    } while (usedLetters.has(letter) && attempts < GAME_TIMINGS.MAX_UNIQUE_ATTEMPTS);\r\n    \r\n    // If we couldn't find a unique letter, use any letter\r\n    if (attempts >= GAME_TIMINGS.MAX_UNIQUE_ATTEMPTS) {\r\n      const randomLetter = alphabet[Math.floor(Math.random() * alphabet.length)];\r\n      const isUppercase = Math.random() > 0.5;\r\n      letter = isUppercase ? randomLetter : randomLetter.toLowerCase();\r\n    }\r\n    \r\n    usedLetters.add(letter);\r\n    const isUppercase = letter === letter.toUpperCase();\r\n    const askForCase = isUppercase ? 'uppercase' : 'lowercase';\r\n    \r\n    // Generate options that maintain the same case as the question\r\n    const options = generateUniqueOptions(\r\n      letter, \r\n      optionsCount - 1, \r\n      () => {\r\n        const randomLetter = alphabet[Math.floor(Math.random() * alphabet.length)];\r\n        return isUppercase ? randomLetter : randomLetter.toLowerCase();\r\n      }\r\n    );\r\n    \r\n    questions.push({\r\n      prompt: `Which is the ${askForCase} letter ${isUppercase ? letter : letter.toUpperCase()}?`,\r\n      focus: ``,\r\n      options,\r\n      correctAnswer: letter,\r\n      type: 'letters'\r\n    });\r\n  }\r\n  \r\n  return questions;\r\n}\r\n\r\n/**\r\n * Generates shape-based questions with options\r\n */\r\nexport function generateShapeQuestions(count: number = 5, optionsCount: number = 3): GameQuestion[] {\r\n  const shapes = [\r\n    'Circle', \r\n    'Square', \r\n    'Triangle', \r\n    'Rectangle', \r\n    'Star', \r\n    'Heart', \r\n    'Diamond',\r\n    'Umbrella',\r\n    'Wrench',\r\n    'Cake',\r\n    'Call',\r\n    'Smile',\r\n    'Sun',\r\n    'Moon',\r\n    'Cloud',\r\n    'Plus',\r\n    'Minus',\r\n    'Up',\r\n    'Down',\r\n    'Left',\r\n    'Right'\r\n  ];\r\n  const questions: GameQuestion[] = [];\r\n  const usedShapes = new Set<string>();\r\n  \r\n  for (let i = 0; i < count; i++) {\r\n    let shape: string;\r\n    let attempts = 0;\r\n    const maxAttempts = 100; // Prevent infinite loop\r\n    \r\n    // Try to find a unique shape\r\n    do {\r\n      shape = shapes[Math.floor(Math.random() * shapes.length)];\r\n      attempts++;\r\n    } while (usedShapes.has(shape) && attempts < maxAttempts);\r\n    \r\n    // If we couldn't find a unique shape, use any shape\r\n    if (attempts >= maxAttempts) {\r\n      shape = shapes[Math.floor(Math.random() * shapes.length)];\r\n    }\r\n    \r\n    usedShapes.add(shape);\r\n    const options = generateUniqueOptions(\r\n      shape, \r\n      optionsCount - 1, \r\n      () => shapes[Math.floor(Math.random() * shapes.length)]\r\n    );\r\n    \r\n    questions.push({\r\n      prompt: `Which one is a...`,\r\n      focus: shape,\r\n      options,\r\n      correctAnswer: shape,\r\n      type: 'shapes'\r\n    });\r\n  }\r\n  \r\n  return questions;\r\n}\r\n\r\n/**\r\n * Generates color-based questions with options\r\n */\r\nexport function generateColorQuestions(count: number = 5, optionsCount: number = 3): GameQuestion[] {\r\n  const colors = ['Red', 'Blue', 'Green', 'Yellow', 'Purple', 'Orange', 'Pink', 'Brown', 'Black'];\r\n  const questions: GameQuestion[] = [];\r\n  const usedColors = new Set<string>();\r\n  \r\n  for (let i = 0; i < count; i++) {\r\n    let color: string;\r\n    let attempts = 0;\r\n    const maxAttempts = 100; // Prevent infinite loop\r\n    \r\n    // Try to find a unique color\r\n    do {\r\n      color = colors[Math.floor(Math.random() * colors.length)];\r\n      attempts++;\r\n    } while (usedColors.has(color) && attempts < maxAttempts);\r\n    \r\n    // If we couldn't find a unique color, use any color\r\n    if (attempts >= maxAttempts) {\r\n      color = colors[Math.floor(Math.random() * colors.length)];\r\n    }\r\n    \r\n    usedColors.add(color);\r\n    const options = generateUniqueOptions(\r\n      color, \r\n      optionsCount - 1, \r\n      () => colors[Math.floor(Math.random() * colors.length)]\r\n    );\r\n    \r\n    questions.push({\r\n      prompt: `Which one is...`,\r\n      focus: color,\r\n      options,\r\n      correctAnswer: color,\r\n      type: 'colors'\r\n    });\r\n  }\r\n  \r\n  return questions;\r\n}\r\n\r\n/**\r\n * Algorithmic pattern generators for different types of patterns\r\n */\r\nconst PATTERN_GENERATORS = {\r\n  arithmetic: (start: number, step: number, length: number) => {\r\n    const sequence = [];\r\n    for (let i = 0; i < length; i++) {\r\n      sequence.push((start + i * step).toString());\r\n    }\r\n    return sequence;\r\n  },\r\n  \r\n  alphabetic: (startChar: string, step: number, length: number) => {\r\n    const sequence = [];\r\n    const isUppercase = startChar === startChar.toUpperCase();\r\n    const startCode = startChar.toUpperCase().charCodeAt(0);\r\n    \r\n    for (let i = 0; i < length; i++) {\r\n      const charCode = startCode + i * step;\r\n      if (charCode <= 90) { // Z\r\n        const char = String.fromCharCode(charCode);\r\n        sequence.push(isUppercase ? char : char.toLowerCase());\r\n      }\r\n    }\r\n    return sequence;\r\n  },\r\n  \r\n  geometric: (start: number, ratio: number, length: number) => {\r\n    const sequence = [];\r\n    for (let i = 0; i < length; i++) {\r\n      sequence.push((start * Math.pow(ratio, i)).toString());\r\n    }\r\n    return sequence;\r\n  }\r\n};\r\n\r\n/**\r\n * Generates pattern-based questions with algorithmic generation\r\n */\r\nexport function generatePatternQuestions(count: number = 5, optionsCount: number = 3): GameQuestion[] {\r\n  const questions: GameQuestion[] = [];\r\n  \r\n  for (let i = 0; i < count; i++) {\r\n    const patternType = Math.random();\r\n    let sequence: string[];\r\n    let answer: string;\r\n    \r\n    if (patternType < 0.4) {\r\n      // Arithmetic sequences (40% chance)\r\n      const start = Math.floor(Math.random() * 10) + 1;\r\n      const step = Math.floor(Math.random() * 5) + 1;\r\n      sequence = PATTERN_GENERATORS.arithmetic(start, step, 4);\r\n      answer = PATTERN_GENERATORS.arithmetic(start, step, 5)[4];\r\n    } else if (patternType < 0.7) {\r\n      // Alphabetic sequences (30% chance)\r\n      const startChar = String.fromCharCode(65 + Math.floor(Math.random() * 20)); // A-T\r\n      const isUppercase = Math.random() > 0.5;\r\n      const step = Math.floor(Math.random() * 3) + 1;\r\n\r\n      const fullSequence = PATTERN_GENERATORS.alphabetic(\r\n        isUppercase ? startChar : startChar.toLowerCase(),\r\n        step,\r\n        5\r\n      );\r\n      sequence = fullSequence.slice(0, 4);\r\n\r\n      // Fallback if the generated sequence is shorter than expected\r\n      if (fullSequence.length >= 5) {\r\n        answer = fullSequence[4];\r\n      } else {\r\n        const lastChar = fullSequence[fullSequence.length - 1];\r\n        if (lastChar) {\r\n          const nextCode = lastChar.charCodeAt(0) + step;\r\n          const nextChar = String.fromCharCode(Math.min(nextCode, 90));\r\n          answer = isUppercase ? nextChar : nextChar.toLowerCase();\r\n        } else {\r\n          // Extremely unlikely, but ensure a fallback\r\n          answer = isUppercase ? startChar : startChar.toLowerCase();\r\n        }\r\n      }\r\n    } else {\r\n      // Simple geometric or custom patterns (30% chance)\r\n      const start = Math.floor(Math.random() * 5) + 1;\r\n      const ratio = 2; // Keep it simple for kids\r\n      sequence = PATTERN_GENERATORS.geometric(start, ratio, 4);\r\n      answer = PATTERN_GENERATORS.geometric(start, ratio, 5)[4];\r\n    }\r\n    \r\n    // Generate wrong options\r\n    const wrongOptions: string[] = [];\r\n    const answerNum = parseInt(answer);\r\n    \r\n    if (!isNaN(answerNum)) {\r\n      // Numeric answer - generate nearby numbers\r\n      for (let j = 0; j < optionsCount - 1; j++) {\r\n        const offset = (j + 1) * (Math.random() > 0.5 ? 1 : -1);\r\n        wrongOptions.push((answerNum + offset).toString());\r\n      }\r\n    } else {\r\n      // Non-numeric answer - generate random letters/characters\r\n      for (let j = 0; j < optionsCount - 1; j++) {\r\n        const randomChar = String.fromCharCode(65 + Math.floor(Math.random() * 26));\r\n        const isAnswerUppercase = answer === answer.toUpperCase();\r\n        wrongOptions.push(isAnswerUppercase ? randomChar : randomChar.toLowerCase());\r\n      }\r\n    }\r\n    \r\n    const options = generateUniqueOptions(answer, optionsCount - 1, () => {\r\n      return wrongOptions[Math.floor(Math.random() * wrongOptions.length)] || answer;\r\n    });\r\n    \r\n    questions.push({\r\n      prompt: `What comes next?`,\r\n      focus: `${sequence.join(', ')}, ?`,\r\n      options,\r\n      correctAnswer: answer,\r\n      type: 'patterns'\r\n    });\r\n  }\r\n  \r\n  return questions;\r\n}\r\n\r\n/**\r\n * Generates math questions (addition and subtraction)\r\n */\r\nexport function generateMathQuestions(count: number = 5, optionsCount: number = 4): GameQuestion[] {\r\n  const questions: GameQuestion[] = [];\r\n  \r\n  for (let i = 0; i < count; i++) {\r\n    const isAddition = Math.random() > 0.5;\r\n    const minNum = 1;\r\n    const maxNum = 10;\r\n    \r\n    let firstNumber: number;\r\n    let secondNumber: number;\r\n    let answer: number;\r\n    let operation: string;\r\n    \r\n    if (isAddition) {\r\n      firstNumber = Math.floor(Math.random() * maxNum) + minNum;\r\n      secondNumber = Math.floor(Math.random() * maxNum) + minNum;\r\n      answer = firstNumber + secondNumber;\r\n      operation = '+';\r\n    } else {\r\n      // For subtraction, ensure firstNumber >= secondNumber to avoid negative results\r\n      firstNumber = Math.floor(Math.random() * maxNum) + minNum;\r\n      secondNumber = Math.floor(Math.random() * Math.min(firstNumber, maxNum)) + minNum;\r\n      answer = firstNumber - secondNumber;\r\n      operation = '-';\r\n    }\r\n    \r\n    const correctAnswer = answer.toString();\r\n    const options = generateUniqueOptions(\r\n      correctAnswer,\r\n      optionsCount - 1,\r\n      () => {\r\n        // Generate reasonable wrong answers\r\n        const wrongAnswer = Math.floor(Math.random() * (maxNum * 2)) + 0;\r\n        return wrongAnswer.toString();\r\n      }\r\n    );\r\n    \r\n    questions.push({\r\n      prompt: `Solve the ${isAddition ? 'addition' : 'subtraction'} problem.`,\r\n      focus: `${firstNumber} ${operation} ${secondNumber} = ?`,\r\n      options,\r\n      correctAnswer,\r\n      type: 'math',\r\n      meta: {\r\n        firstNumber,\r\n        secondNumber,\r\n        operation: isAddition ? 'addition' : 'subtraction',\r\n        showVisualAid: true\r\n      }\r\n    });\r\n  }\r\n  \r\n  return questions;\r\n}\r\n\r\n/**\r\n * Generates addition-specific questions\r\n */\r\nexport function generateAdditionQuestions(count: number = 5, mathRange: { min: number; max: number } = { min: 1, max: 10 }, optionsCount: number = 4, showVisualAids: boolean = true): GameQuestion[] {\r\n  const questions: GameQuestion[] = [];\r\n  \r\n  for (let i = 0; i < count; i++) {\r\n    const firstNumber = Math.floor(Math.random() * (mathRange.max - mathRange.min + 1)) + mathRange.min;\r\n    const secondNumber = Math.floor(Math.random() * (mathRange.max - mathRange.min + 1)) + mathRange.min;\r\n    const sum = firstNumber + secondNumber;\r\n    \r\n    const correctAnswer = sum.toString();\r\n    const options = generateUniqueOptions(\r\n      correctAnswer,\r\n      optionsCount - 1,\r\n      () => {\r\n        const wrongAnswer = Math.floor(Math.random() * (mathRange.max * 2)) + mathRange.min;\r\n        return wrongAnswer.toString();\r\n      }\r\n    );\r\n    \r\n    questions.push({\r\n      id: `addition-${i}`,\r\n      prompt: \"Ask the child to solve the addition problem.\",\r\n      focus: `${firstNumber} + ${secondNumber} = ?`,\r\n      options,\r\n      correctAnswer,\r\n      type: 'math',\r\n      meta: {\r\n        firstNumber,\r\n        secondNumber,\r\n        operation: 'addition',\r\n        showVisualAid: showVisualAids\r\n      }\r\n    });\r\n  }\r\n  \r\n  return questions;\r\n}\r\n\r\n/**\r\n * Generates subtraction-specific questions\r\n */\r\nexport function generateSubtractionQuestions(count: number = 5, mathRange: { min: number; max: number } = { min: 1, max: 10 }, optionsCount: number = 4, showVisualAids: boolean = true): GameQuestion[] {\r\n  const questions: GameQuestion[] = [];\r\n  \r\n  for (let i = 0; i < count; i++) {\r\n    // Generate random numbers ensuring firstNumber >= secondNumber to avoid negative results\r\n    const firstNumber = Math.floor(Math.random() * (mathRange.max - mathRange.min + 1)) + mathRange.min;\r\n    const secondNumber = Math.floor(Math.random() * Math.min(firstNumber, mathRange.max)) + mathRange.min;\r\n    const difference = firstNumber - secondNumber;\r\n    \r\n    const correctAnswer = difference.toString();\r\n    const options = generateUniqueOptions(\r\n      correctAnswer,\r\n      optionsCount - 1,\r\n      () => {\r\n        const wrongAnswer = Math.floor(Math.random() * (mathRange.max * 2)) + 0;\r\n        return wrongAnswer.toString();\r\n      }\r\n    );\r\n    \r\n    questions.push({\r\n      id: `subtraction-${i}`,\r\n      prompt: \"Ask the child to solve the subtraction problem.\",\r\n      focus: `${firstNumber} - ${secondNumber} = ?`,\r\n      options,\r\n      correctAnswer,\r\n      type: 'math',\r\n      meta: {\r\n        firstNumber,\r\n        secondNumber,\r\n        operation: 'subtraction',\r\n        showVisualAid: showVisualAids\r\n      }\r\n    });\r\n  }\r\n  \r\n  return questions;\r\n}\r\n\r\n/**\r\n * Generates a mixed set of questions from all types\r\n */\r\nexport function generateMixedQuestions(count: number = 10, minNumber: number = 1, maxNumber: number = 50, optionsCount: number = 3): GameQuestion[] {\r\n  const questionTypesCount = 6; // number, letter, shape, color, pattern, math\r\n  const questionsPerType = Math.max(1, Math.ceil(count / questionTypesCount));\r\n  \r\n  const allQuestions = [\r\n    ...generateNumberQuestions(questionsPerType, minNumber, maxNumber, optionsCount),\r\n    ...generateLetterQuestions(questionsPerType, optionsCount),\r\n    ...generateShapeQuestions(questionsPerType, optionsCount),\r\n    ...generateColorQuestions(questionsPerType, optionsCount),\r\n    ...generatePatternQuestions(questionsPerType, optionsCount),\r\n    ...generateMathQuestions(questionsPerType, optionsCount)\r\n  ];\r\n  \r\n  return allQuestions\r\n    .sort(() => 0.5 - Math.random())\r\n    .slice(0, count);\r\n}\r\n\r\n/**\r\n * Word list for fill-in-the-blank game with associated emojis\r\n */\r\nexport const fillInTheBlankWords = [\r\n  // Animals\r\n  { word: 'DOG', emoji: '🐕', missingIndex: 1 },\r\n  { word: 'CAT', emoji: '🐈', missingIndex: 1 },\r\n  { word: 'FISH', emoji: '🐟', missingIndex: 1 },\r\n  { word: 'BIRD', emoji: '🐦', missingIndex: 1 },\r\n  { word: 'PIG', emoji: '🐷', missingIndex: 1 },\r\n  { word: 'COW', emoji: '🐮', missingIndex: 1 },\r\n  { word: 'BEE', emoji: '🐝', missingIndex: 1 },\r\n  { word: 'ANT', emoji: '🐜', missingIndex: 1 },\r\n  \r\n  // Vehicles\r\n  { word: 'CAR', emoji: '🚗', missingIndex: 1 },\r\n  { word: 'BUS', emoji: '🚌', missingIndex: 1 },\r\n  { word: 'PLANE', emoji: '✈️', missingIndex: 2 },\r\n  { word: 'BOAT', emoji: '⛵', missingIndex: 1 },\r\n  { word: 'TRAIN', emoji: '🚂', missingIndex: 2 },\r\n  \r\n  // Colors\r\n  { word: 'RED', emoji: '🔴', missingIndex: 1 },\r\n  { word: 'BLUE', emoji: '🔵', missingIndex: 2 },\r\n  { word: 'GREEN', emoji: '🟢', missingIndex: 2 },\r\n  { word: 'PINK', emoji: '💗', missingIndex: 1 },\r\n  { word: 'BLACK', emoji: '⚫', missingIndex: 2 },\r\n  \r\n  // Numbers (1-10)\r\n  { word: 'ONE', emoji: '1️⃣', missingIndex: 1 },\r\n  { word: 'TWO', emoji: '2️⃣', missingIndex: 1 },\r\n  { word: 'THREE', emoji: '3️⃣', missingIndex: 2 },\r\n  { word: 'FOUR', emoji: '4️⃣', missingIndex: 2 },\r\n  { word: 'FIVE', emoji: '5️⃣', missingIndex: 1 },\r\n  { word: 'SIX', emoji: '6️⃣', missingIndex: 1 },\r\n  { word: 'SEVEN', emoji: '7️⃣', missingIndex: 2 },\r\n  { word: 'EIGHT', emoji: '8️⃣', missingIndex: 1 },\r\n  { word: 'NINE', emoji: '9️⃣', missingIndex: 1 },\r\n  { word: 'TEN', emoji: '🔟', missingIndex: 1 },\r\n  \r\n  // Food\r\n  { word: 'CAKE', emoji: '🍰', missingIndex: 1 },\r\n  { word: 'PIE', emoji: '🥧', missingIndex: 1 },\r\n  { word: 'BREAD', emoji: '🍞', missingIndex: 2 },\r\n  { word: 'MILK', emoji: '🥛', missingIndex: 1 },\r\n  { word: 'EGG', emoji: '🥚', missingIndex: 1 },\r\n  \r\n  // Nature\r\n  { word: 'TREE', emoji: '🌳', missingIndex: 2 },\r\n  { word: 'MOON', emoji: '🌙', missingIndex: 2 },\r\n  { word: 'SUN', emoji: '☀️', missingIndex: 1 },\r\n  { word: 'STAR', emoji: '⭐', missingIndex: 2 },\r\n  { word: 'RAIN', emoji: '🌧️', missingIndex: 1 },\r\n  { word: 'SNOW', emoji: '❄️', missingIndex: 2 },\r\n  \r\n  // Objects\r\n  { word: 'BOOK', emoji: '📚', missingIndex: 2 },\r\n  { word: 'HOUSE', emoji: '🏠', missingIndex: 2 },\r\n  { word: 'BALL', emoji: '⚽', missingIndex: 1 },\r\n  { word: 'DOLL', emoji: '🧸', missingIndex: 1 },\r\n  { word: 'CUP', emoji: '🥤', missingIndex: 1 },\r\n  { word: 'HAT', emoji: '🧢', missingIndex: 1 },\r\n  { word: 'SHOE', emoji: '👟', missingIndex: 2 },\r\n  { word: 'BED', emoji: '🛏️', missingIndex: 1 },\r\n  \r\n  // Weather\r\n  { word: 'WIND', emoji: '💨', missingIndex: 1 },\r\n  { word: 'CLOUD', emoji: '☁️', missingIndex: 2 },\r\n  { word: 'STORM', emoji: '⛈️', missingIndex: 2 },\r\n  \r\n  // Time\r\n  { word: 'CLOCK', emoji: '⏰', missingIndex: 2 },\r\n  { word: 'WATCH', emoji: '⌚', missingIndex: 1 },\r\n  { word: 'DAY', emoji: '🌞', missingIndex: 1 },\r\n  { word: 'NIGHT', emoji: '🌙', missingIndex: 1 }\r\n];\r\n\r\n/**\r\n * Generates fill-in-the-blank questions with options\r\n */\r\nexport function generateFillInTheBlankQuestions(count: number = 5, optionsCount: number = 3): GameQuestion[] {\r\n  const questions: GameQuestion[] = [];\r\n  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n  const usedLetters = new Set<string>();\r\n  \r\n  // Select random words from the list\r\n  const selectedWords = [...fillInTheBlankWords]\r\n    .sort(() => 0.5 - Math.random())\r\n    .slice(0, count)\r\n    .map(word => ({ ...word }));\r\n  \r\n  for (const baseWord of selectedWords) {\r\n    let word = { ...baseWord };\r\n    let correctLetter = word.word[word.missingIndex];\r\n    let attempts = 0;\r\n    const maxAttempts = 100; // Prevent infinite loop\r\n    \r\n    // Try to find a unique letter\r\n    while (usedLetters.has(correctLetter) && attempts < maxAttempts) {\r\n      // Try to find a different word with a unique missing letter\r\n      const newWord = fillInTheBlankWords[Math.floor(Math.random() * fillInTheBlankWords.length)];\r\n      const newLetter = newWord.word[newWord.missingIndex];\r\n      if (!usedLetters.has(newLetter)) {\r\n        word = { ...newWord };\r\n        correctLetter = newLetter;\r\n        break;\r\n      }\r\n      attempts++;\r\n    }\r\n    \r\n    usedLetters.add(correctLetter);\r\n    \r\n    // Create the word with underscore for missing letter\r\n    const wordWithBlank = word.word\r\n      .split('')\r\n      .map((letter, index) => index === word.missingIndex ? '_' : letter)\r\n      .join('');\r\n    \r\n    // Generate options that are different from the correct letter\r\n    const options = generateUniqueOptions(\r\n      word.word[word.missingIndex],\r\n      optionsCount - 1,\r\n      () => {\r\n        let letter;\r\n        do {\r\n          letter = alphabet[Math.floor(Math.random() * alphabet.length)];\r\n        } while (letter === word.word[word.missingIndex]);\r\n        return letter;\r\n      }\r\n    );\r\n    \r\n    questions.push({\r\n      prompt: 'Which letter completes the word?',\r\n      focus: wordWithBlank,\r\n      visual: word.emoji,\r\n      options,\r\n      correctAnswer: word.word[word.missingIndex],\r\n      type: 'fill-in-the-blank'\r\n    });\r\n  }\r\n  \r\n  return questions;\r\n}\r\n\r\n/**\r\n * Rhyming word pairs and distractors for the rhyming game\r\n */\r\nexport const rhymingWordSets = [\r\n  {\r\n    prompt: 'Pick the word that rhymes with \"ball\"',\r\n    focus: 'ball',\r\n    options: ['cat', 'wall', 'shoe'],\r\n    correctAnswer: 'wall',\r\n  },\r\n  {\r\n    prompt: 'Pick the word that rhymes with \"cat\"',\r\n    focus: 'cat',\r\n    options: ['bat', 'dog', 'car'],\r\n    correctAnswer: 'bat',\r\n  },\r\n  {\r\n    prompt: 'Pick the word that rhymes with \"sun\"',\r\n    focus: 'sun',\r\n    options: ['run', 'sit', 'pen'],\r\n    correctAnswer: 'run',\r\n  },\r\n  {\r\n    prompt: 'Pick the word that rhymes with \"dog\"',\r\n    focus: 'dog',\r\n    options: ['log', 'cat', 'fish'],\r\n    correctAnswer: 'log',\r\n  },\r\n  {\r\n    prompt: 'Pick the word that rhymes with \"car\"',\r\n    focus: 'car',\r\n    options: ['star', 'bus', 'pen'],\r\n    correctAnswer: 'star',\r\n  },\r\n  {\r\n    prompt: 'Pick the word that rhymes with \"tree\"',\r\n    focus: 'tree',\r\n    options: ['bee', 'dog', 'cat'],\r\n    correctAnswer: 'bee',\r\n  },\r\n  {\r\n    prompt: 'Pick the word that rhymes with \"hat\"',\r\n    focus: 'hat',\r\n    options: ['bat', 'dog', 'car'],\r\n    correctAnswer: 'bat',\r\n  },\r\n  {\r\n    prompt: 'Pick the word that rhymes with \"book\"',\r\n    focus: 'book',\r\n    options: ['look', 'pen', 'cat'],\r\n    correctAnswer: 'look',\r\n  },\r\n  {\r\n    prompt: 'Pick the word that rhymes with \"mouse\"',\r\n    focus: 'mouse',\r\n    options: ['house', 'dog', 'car'],\r\n    correctAnswer: 'house',\r\n  },\r\n  {\r\n    prompt: 'Pick the word that rhymes with \"bed\"',\r\n    focus: 'bed',\r\n    options: ['red', 'cat', 'dog'],\r\n    correctAnswer: 'red',\r\n  },\r\n];\r\n\r\n/**\r\n * Generates rhyming word questions\r\n */\r\nexport function generateRhymingQuestions(count: number = 5): GameQuestion[] {\r\n  // Shuffle and select up to count questions\r\n  const shuffled = [...rhymingWordSets].sort(() => 0.5 - Math.random());\r\n  return shuffled.slice(0, count).map((q) => ({\r\n    prompt: q.prompt,\r\n    focus: q.focus,\r\n    options: q.options,\r\n    correctAnswer: q.correctAnswer,\r\n    type: 'rhyming',\r\n  }));\r\n}\r\n\r\n/**\r\n * Generates alphabet sequence questions where children identify missing letters\r\n */\r\nexport function generateAlphabetSequenceQuestions(count: number = 5, optionsCount: number = 3): GameQuestion[] {\r\n  const questions: GameQuestion[] = [];\r\n  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n  const usedSequences = new Set<string>();\r\n  \r\n  for (let i = 0; i < count; i++) {\r\n    let sequenceStart: number;\r\n    let sequenceLength: number;\r\n    let missingIndex: number;\r\n    let sequenceKey: string;\r\n    let attempts = 0;\r\n    \r\n    // Generate unique sequences\r\n    do {\r\n      // Generate sequence of 3-6 letters\r\n      sequenceLength = Math.floor(Math.random() * 4) + 3; // 3-6 letters\r\n      sequenceStart = Math.floor(Math.random() * (26 - sequenceLength)); // Ensure we don't go past Z\r\n      missingIndex = Math.floor(Math.random() * sequenceLength);\r\n      sequenceKey = `${sequenceStart}-${sequenceLength}-${missingIndex}`;\r\n      attempts++;\r\n    } while (usedSequences.has(sequenceKey) && attempts < GAME_TIMINGS.MAX_UNIQUE_ATTEMPTS);\r\n    \r\n    usedSequences.add(sequenceKey);\r\n    \r\n    // Create sequence with missing letter\r\n    const sequence: string[] = [];\r\n    const correctLetter = alphabet[sequenceStart + missingIndex];\r\n    \r\n    for (let j = 0; j < sequenceLength; j++) {\r\n      if (j === missingIndex) {\r\n        sequence.push('?');\r\n      } else {\r\n        sequence.push(alphabet[sequenceStart + j]);\r\n      }\r\n    }\r\n    \r\n    // Generate options\r\n    const options = generateUniqueOptions(\r\n      correctLetter,\r\n      optionsCount - 1,\r\n      () => {\r\n        // Generate letters that are not in the sequence and not the correct answer\r\n        let letter;\r\n        do {\r\n          letter = alphabet[Math.floor(Math.random() * alphabet.length)];\r\n        } while (\r\n          letter === correctLetter || \r\n          sequence.includes(letter)\r\n        );\r\n        return letter;\r\n      }\r\n    );\r\n    \r\n    questions.push({\r\n      prompt: 'What letter comes next in the alphabet sequence?',\r\n      focus: sequence.join(', '),\r\n      options,\r\n      correctAnswer: correctLetter,\r\n      type: 'alphabet-sequence'\r\n    });\r\n  }\r\n  \r\n  return questions;\r\n}\r\n\r\n/**\r\n * Generates number sequence questions where children identify missing numbers\r\n */\r\nexport function generateNumberSequenceQuestions(count: number = 5, optionsCount: number = 3): GameQuestion[] {\r\n  const questions: GameQuestion[] = [];\r\n  const usedSequences = new Set<string>();\r\n  \r\n  for (let i = 0; i < count; i++) {\r\n    let sequenceStart: number;\r\n    let sequenceLength: number;\r\n    let missingIndex: number;\r\n    let sequenceKey: string;\r\n    let attempts = 0;\r\n    \r\n    // Generate unique sequences\r\n    do {\r\n      // Generate sequence of 3-6 numbers\r\n      sequenceLength = Math.floor(Math.random() * 4) + 3; // 3-6 numbers\r\n      sequenceStart = Math.floor(Math.random() * 15) + 1; // Start from 1-15\r\n      missingIndex = Math.floor(Math.random() * sequenceLength);\r\n      sequenceKey = `${sequenceStart}-${sequenceLength}-${missingIndex}`;\r\n      attempts++;\r\n    } while (usedSequences.has(sequenceKey) && attempts < GAME_TIMINGS.MAX_UNIQUE_ATTEMPTS);\r\n    \r\n    usedSequences.add(sequenceKey);\r\n    \r\n    // Create sequence with missing number\r\n    const sequence: string[] = [];\r\n    const correctNumber = sequenceStart + missingIndex;\r\n    \r\n    for (let j = 0; j < sequenceLength; j++) {\r\n      if (j === missingIndex) {\r\n        sequence.push('?');\r\n      } else {\r\n        sequence.push((sequenceStart + j).toString());\r\n      }\r\n    }\r\n    \r\n    // Generate options\r\n    const options = generateUniqueOptions(\r\n      correctNumber.toString(),\r\n      optionsCount - 1,\r\n      () => {\r\n        // Generate numbers that are close but not in the sequence\r\n        let number;\r\n        const maxNumber = sequenceStart + sequenceLength + 5;\r\n        const minNumber = Math.max(1, sequenceStart - 5);\r\n        do {\r\n          number = Math.floor(Math.random() * (maxNumber - minNumber + 1)) + minNumber;\r\n        } while (\r\n          number === correctNumber ||\r\n          sequence.includes(number.toString())\r\n        );\r\n        return number.toString();\r\n      }\r\n    );\r\n    \r\n    questions.push({\r\n      prompt: 'What number comes next in the number sequence?',\r\n      focus: sequence.join(', '),\r\n      options,\r\n      correctAnswer: correctNumber.toString(),\r\n      type: 'number-sequence'\r\n    });\r\n  }\r\n  \r\n  return questions;\r\n} "],"names":["fillInTheBlankWords","generateAdditionQuestions","generateAlphabetSequenceQuestions","generateColorQuestions","generateFillInTheBlankQuestions","generateLetterQuestions","generateMathQuestions","generateMixedQuestions","generateNumberQuestions","generateNumberSequenceQuestions","generatePatternQuestions","generateRhymingQuestions","generateShapeQuestions","generateSubtractionQuestions","questionGenerators","rhymingWordSets","numberToWord","num","ones","tens","ten","Math","floor","one","toString","count","minNumber","maxNumber","optionsCount","questions","usedNumbers","Set","i","attempts","random","has","GAME_TIMINGS","MAX_UNIQUE_ATTEMPTS","add","options","generateUniqueOptions","push","prompt","focus","correctAnswer","type","numbers","s","numberRange","min","max","logger","error","questionCount","GAME_DEFAULTS","QUESTIONS_PER_SESSION","OPTIONS_COUNT","letters","shapes","colors","patterns","math","geography","rhyming","alphabet","usedLetters","letter","randomLetter","length","isUppercase","toLowerCase","toUpperCase","askForCase","usedShapes","shape","maxAttempts","usedColors","color","PATTERN_GENERATORS","arithmetic","start","step","sequence","alphabetic","startChar","startCode","charCodeAt","charCode","char","String","fromCharCode","geometric","ratio","pow","patternType","answer","fullSequence","slice","lastChar","nextCode","nextChar","wrongOptions","answerNum","parseInt","isNaN","j","offset","randomChar","isAnswerUppercase","join","isAddition","minNum","maxNum","firstNumber","secondNumber","operation","wrongAnswer","meta","showVisualAid","mathRange","showVisualAids","sum","id","difference","questionTypesCount","questionsPerType","ceil","allQuestions","sort","word","emoji","missingIndex","selectedWords","map","baseWord","correctLetter","newWord","newLetter","wordWithBlank","split","index","visual","shuffled","q","usedSequences","sequenceStart","sequenceLength","sequenceKey","includes","correctNumber","number"],"mappings":"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"}