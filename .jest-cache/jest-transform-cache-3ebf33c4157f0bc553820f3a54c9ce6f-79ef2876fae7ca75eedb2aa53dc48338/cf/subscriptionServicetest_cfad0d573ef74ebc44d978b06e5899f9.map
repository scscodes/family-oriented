{"version":3,"sources":["D:\\Projects\\family-oriented\\src\\utils\\__tests__\\subscriptionService.test.ts"],"sourcesContent":["/**\r\n * Tests for enhanced SubscriptionService\r\n * Validates tier transitions, usage limits, and plan comparisons\r\n */\r\n\r\nimport { SubscriptionService, type SubscriptionTier, type UsageData } from '../subscriptionService';\r\n\r\n// Mock subscription plans for testing\r\nconst mockPersonalPlan = {\r\n  id: 'personal',\r\n  tier: 'personal',\r\n  avatar_limit: 3,\r\n  active: true,\r\n  created_at: '2025-01-01',\r\n  addon_discount_percent: null,\r\n  base_price: 9.99,\r\n  basic_themes_included: true,\r\n  custom_branding_included: false,\r\n  data_retention_months: 12,\r\n  priority_support: false,\r\n  sessions_limit: 100\r\n};\r\n\r\nconst mockProfessionalPlan = {\r\n  id: 'professional',\r\n  tier: 'professional',\r\n  avatar_limit: 10,\r\n  active: true,\r\n  created_at: '2025-01-01',\r\n  addon_discount_percent: 10,\r\n  base_price: 19.99,\r\n  basic_themes_included: true,\r\n  custom_branding_included: true,\r\n  data_retention_months: 24,\r\n  priority_support: true,\r\n  sessions_limit: 500\r\n};\r\n\r\nconst mockUsageData: UsageData = {\r\n  avatarsCount: 2,\r\n  collectionsCount: 5,\r\n  sessionsThisMonth: 25,\r\n  dataRetentionMonths: 12\r\n};\r\n\r\ndescribe('SubscriptionService Enhanced Features', () => {\r\n  \r\n  describe('Tier Transition Analysis', () => {\r\n    test('should analyze upgrade from personal to professional', () => {\r\n      const analysis = SubscriptionService.analyzeTierTransition(\r\n        'personal',\r\n        'professional',\r\n        mockUsageData\r\n      );\r\n\r\n      expect(analysis.isUpgrade).toBe(true);\r\n      expect(analysis.canTransition).toBe(true);\r\n      expect(analysis.costImpact.monthlyDifference).toBeGreaterThan(0);\r\n      expect(analysis.featureChanges.gained.length).toBeGreaterThan(0);\r\n      expect(analysis.warnings).toHaveLength(0);\r\n    });\r\n\r\n    test('should identify downgrade risks', () => {\r\n      const highUsageData: UsageData = {\r\n        avatarsCount: 8,\r\n        collectionsCount: 15,\r\n        sessionsThisMonth: 200,\r\n        dataRetentionMonths: 24\r\n      };\r\n\r\n      const analysis = SubscriptionService.analyzeTierTransition(\r\n        'professional',\r\n        'personal',\r\n        highUsageData\r\n      );\r\n\r\n      expect(analysis.isUpgrade).toBe(false);\r\n      expect(analysis.canTransition).toBe(false);\r\n      expect(analysis.warnings.length).toBeGreaterThan(0);\r\n      expect(analysis.featureChanges.lost.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    test('should calculate proration correctly', () => {\r\n      const analysis = SubscriptionService.analyzeTierTransition(\r\n        'personal',\r\n        'professional',\r\n        mockUsageData\r\n      );\r\n\r\n      expect(analysis.costImpact.prorationAmount).toBeDefined();\r\n      expect(analysis.costImpact.prorationDescription).toContain('billing cycle');\r\n    });\r\n  });\r\n\r\n  describe('Plan Comparison', () => {\r\n    test('should generate comprehensive plan comparison', () => {\r\n      const comparison = SubscriptionService.getPlanComparison();\r\n\r\n      expect(comparison.personal).toBeDefined();\r\n      expect(comparison.professional).toBeDefined();\r\n      expect(comparison.enterprise).toBeDefined();\r\n\r\n      // Check that professional has more features than personal\r\n      expect(comparison.professional.features.length).toBeGreaterThan(\r\n        comparison.personal.features.length\r\n      );\r\n      \r\n      // Check price progression\r\n      expect(comparison.professional.price).toBeGreaterThan(comparison.personal.price);\r\n      expect(comparison.enterprise.price).toBeGreaterThan(comparison.professional.price);\r\n    });\r\n  });\r\n\r\n  describe('Available Transitions', () => {\r\n    test('should return correct upgrade/downgrade options for personal tier', () => {\r\n      const transitions = SubscriptionService.getAvailableTransitions('personal');\r\n      \r\n      expect(transitions.upgrades).toContain('professional');\r\n      expect(transitions.upgrades).toContain('enterprise');\r\n      expect(transitions.downgrades).toHaveLength(0);\r\n    });\r\n\r\n    test('should return correct options for professional tier', () => {\r\n      const transitions = SubscriptionService.getAvailableTransitions('professional');\r\n      \r\n      expect(transitions.upgrades).toContain('enterprise');\r\n      expect(transitions.downgrades).toContain('personal');\r\n    });\r\n\r\n    test('should return only downgrades for enterprise tier', () => {\r\n      const transitions = SubscriptionService.getAvailableTransitions('enterprise');\r\n      \r\n      expect(transitions.upgrades).toHaveLength(0);\r\n      expect(transitions.downgrades).toContain('professional');\r\n      expect(transitions.downgrades).toContain('personal');\r\n    });\r\n  });\r\n\r\n  describe('Usage Validation', () => {\r\n    test('should allow avatar creation within limits', () => {\r\n      const result = SubscriptionService.canCreateAvatar(mockPersonalPlan, 2);\r\n      \r\n      expect(result.allowed).toBe(true);\r\n      expect(result.reason).toBeUndefined();\r\n    });\r\n\r\n    test('should block avatar creation at limit', () => {\r\n      const result = SubscriptionService.canCreateAvatar(mockPersonalPlan, 3);\r\n      \r\n      expect(result.allowed).toBe(false);\r\n      expect(result.reason).toContain('limit');\r\n      expect(result.upgradeRequired).toBe('professional');\r\n    });\r\n\r\n    test('should validate tier transitions against usage', () => {\r\n      const highUsageData: UsageData = {\r\n        avatarsCount: 5,\r\n        collectionsCount: 15,\r\n        sessionsThisMonth: 200,\r\n        dataRetentionMonths: 24\r\n      };\r\n\r\n      const validation = SubscriptionService.validateTierTransition(\r\n        'professional',\r\n        'personal',\r\n        highUsageData\r\n      );\r\n\r\n      expect(validation.valid).toBe(false);\r\n      expect(validation.reasons.length).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('Feature Access Control', () => {\r\n    test('should grant analytics access for professional plan', () => {\r\n      const result = SubscriptionService.canAccessFeature(mockProfessionalPlan, 'analytics');\r\n      \r\n      expect(result.allowed).toBe(true);\r\n    });\r\n\r\n    test('should deny user management for personal plan', () => {\r\n      const result = SubscriptionService.canAccessFeature(mockPersonalPlan, 'user_management');\r\n      \r\n      expect(result.allowed).toBe(false);\r\n      expect(result.upgradeRequired).toBe('professional');\r\n    });\r\n\r\n    test('should return correct available features for each tier', () => {\r\n      const personalFeatures = SubscriptionService.getAvailableFeatures(mockPersonalPlan);\r\n      const professionalFeatures = SubscriptionService.getAvailableFeatures(mockProfessionalPlan);\r\n\r\n      expect(personalFeatures).not.toContain('user_management');\r\n      expect(professionalFeatures).toContain('user_management');\r\n      expect(professionalFeatures).toContain('analytics');\r\n    });\r\n  });\r\n\r\n  describe('Error Handling', () => {\r\n    test('should handle invalid tier transitions gracefully', () => {\r\n      expect(() => {\r\n        SubscriptionService.analyzeTierTransition(\r\n          'invalid' as SubscriptionTier,\r\n          'professional',\r\n          mockUsageData\r\n        );\r\n      }).not.toThrow();\r\n    });\r\n\r\n    test('should handle null subscription plans', () => {\r\n      const result = SubscriptionService.canAccessFeature(null, 'analytics');\r\n      \r\n      expect(result.allowed).toBe(false);\r\n      expect(result.reason).toContain('subscription plan');\r\n    });\r\n  });\r\n\r\n  describe('Usage Summary', () => {\r\n    test('should generate complete usage summary', () => {\r\n      const summary = SubscriptionService.getUsageSummary(mockPersonalPlan, mockUsageData);\r\n      \r\n      expect(summary.avatars).toBeDefined();\r\n      expect(summary.collections_per_avatar).toBeDefined();\r\n      expect(summary.sessions_per_month).toBeDefined();\r\n      expect(summary.data_retention_months).toBeDefined();\r\n\r\n      // Should show green status for within limits\r\n      expect(summary.avatars.allowed).toBe(true);\r\n    });\r\n\r\n    test('should identify over-limit usage in summary', () => {\r\n      const overLimitUsage: UsageData = {\r\n        avatarsCount: 5,\r\n        collectionsCount: 25,\r\n        sessionsThisMonth: 150,\r\n        dataRetentionMonths: 18\r\n      };\r\n\r\n      const summary = SubscriptionService.getUsageSummary(mockPersonalPlan, overLimitUsage);\r\n      \r\n      // Should show red status for over limits\r\n      expect(summary.avatars.allowed).toBe(false);\r\n    });\r\n  });\r\n}); "],"names":["mockPersonalPlan","id","tier","avatar_limit","active","created_at","addon_discount_percent","base_price","basic_themes_included","custom_branding_included","data_retention_months","priority_support","sessions_limit","mockProfessionalPlan","mockUsageData","avatarsCount","collectionsCount","sessionsThisMonth","dataRetentionMonths","describe","test","analysis","SubscriptionService","analyzeTierTransition","expect","isUpgrade","toBe","canTransition","costImpact","monthlyDifference","toBeGreaterThan","featureChanges","gained","length","warnings","toHaveLength","highUsageData","lost","prorationAmount","toBeDefined","prorationDescription","toContain","comparison","getPlanComparison","personal","professional","enterprise","features","price","transitions","getAvailableTransitions","upgrades","downgrades","result","canCreateAvatar","allowed","reason","toBeUndefined","upgradeRequired","validation","validateTierTransition","valid","reasons","canAccessFeature","personalFeatures","getAvailableFeatures","professionalFeatures","not","toThrow","summary","getUsageSummary","avatars","collections_per_avatar","sessions_per_month","overLimitUsage"],"mappings":"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"}