{"version":3,"sources":["D:\\Projects\\family-oriented\\src\\hooks\\__tests__\\useGameAnalytics.improved.test.tsx"],"sourcesContent":["/**\r\n * Enhanced useGameAnalytics Hook Tests\r\n * \r\n * This demonstrates improved testing patterns with:\r\n * - Consistent async/await handling\r\n * - Proper timeout management\r\n * - Comprehensive error scenarios\r\n * - Performance safeguards\r\n * - Better test isolation\r\n */\r\n\r\nimport { renderHook, act, waitFor } from '@testing-library/react';\r\nimport { useGameAnalytics } from '../useGameAnalytics';\r\nimport { analyticsService } from '@/utils/analyticsService';\r\nimport { SettingsProvider } from '@/context/SettingsContext';\r\n\r\n// Mock the analytics service\r\njest.mock('@/utils/analyticsService');\r\n\r\n// Type the mocked service for better TypeScript support\r\nconst mockAnalyticsService = analyticsService as jest.Mocked<typeof analyticsService>;\r\n\r\n// Test constants\r\nconst TEST_TIMEOUTS = {\r\n  FAST: 2000,\r\n  MEDIUM: 5000,\r\n  SLOW: 8000\r\n} as const;\r\n\r\nconst MOCK_DATA = {\r\n  avatarId: '00000000-0000-0000-0000-000000000004',\r\n  gameType: 'numbers' as const,\r\n  sessionId: 'session-123',\r\n  recommendations: [\r\n    { \r\n      gameId: 'letters', \r\n      reason: 'Try letters next!', \r\n      priority: 8, \r\n      estimatedDifficulty: 'beginner', \r\n      learningObjectives: [], \r\n      prerequisitesMet: true \r\n    }\r\n  ],\r\n  metrics: {\r\n    totalGamesPlayed: 1,\r\n    averageSessionDuration: 60,\r\n    overallCompletionRate: 1,\r\n    skillLevelDistribution: { beginner: 1 },\r\n    subjectPreferences: { Mathematics: 1 },\r\n    learningVelocity: 1,\r\n    engagementScore: 80\r\n  }\r\n} as const;\r\n\r\ndescribe('useGameAnalytics - Enhanced Tests', () => {\r\n  // Test wrapper with providers\r\n  const wrapper = ({ children }: { children: React.ReactNode }) => (\r\n    <SettingsProvider>{children}</SettingsProvider>\r\n  );\r\n\r\n  // Setup fresh mocks before each test\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // Setup default successful mock implementations\r\n    mockAnalyticsService.startGameSession.mockResolvedValue(MOCK_DATA.sessionId);\r\n    mockAnalyticsService.trackEvent.mockResolvedValue(undefined);\r\n    mockAnalyticsService.completeGameSession.mockResolvedValue(undefined);\r\n    mockAnalyticsService.getLearningPathRecommendations.mockResolvedValue(MOCK_DATA.recommendations);\r\n    mockAnalyticsService.getPerformanceMetrics.mockResolvedValue(MOCK_DATA.metrics);\r\n  });\r\n\r\n  // Cleanup after each test\r\n  afterEach(() => {\r\n    jest.resetAllMocks();\r\n    jest.useRealTimers();\r\n  });\r\n\r\n  describe('Session Management', () => {\r\n    it('should start a session successfully with timeout protection', async () => {\r\n      const { result } = renderHook(() => useGameAnalytics({\r\n        gameType: MOCK_DATA.gameType,\r\n        avatarId: MOCK_DATA.avatarId,\r\n        autoTrack: false\r\n      }), { wrapper });\r\n\r\n      // Start session with timeout protection\r\n      await act(async () => {\r\n        const startPromise = result.current.startSession();\r\n        await Promise.race([\r\n          startPromise,\r\n          new Promise((_, reject) => \r\n            setTimeout(() => reject(new Error('Session start timeout')), TEST_TIMEOUTS.FAST)\r\n          )\r\n        ]);\r\n      });\r\n\r\n      // Verify session was started correctly\r\n      expect(mockAnalyticsService.startGameSession).toHaveBeenCalledWith(\r\n        MOCK_DATA.avatarId,\r\n        MOCK_DATA.gameType,\r\n        expect.any(Object),\r\n        undefined\r\n      );\r\n      expect(result.current.sessionId).toBe(MOCK_DATA.sessionId);\r\n      expect(result.current.isTracking).toBe(true);\r\n    }, TEST_TIMEOUTS.MEDIUM);\r\n\r\n    it('should handle session start failures gracefully', async () => {\r\n      const testError = new Error('Session start failed');\r\n      mockAnalyticsService.startGameSession.mockRejectedValue(testError);\r\n\r\n      const { result } = renderHook(() => useGameAnalytics({\r\n        gameType: MOCK_DATA.gameType,\r\n        avatarId: MOCK_DATA.avatarId,\r\n        autoTrack: false\r\n      }), { wrapper });\r\n\r\n      // Capture console errors during test\r\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\r\n\r\n      await act(async () => {\r\n        try {\r\n          await result.current.startSession();\r\n        } catch (error) {\r\n          // Expected to fail\r\n        }\r\n      });\r\n\r\n      // Verify error handling\r\n      expect(result.current.sessionId).toBeNull();\r\n      expect(result.current.isTracking).toBe(false);\r\n      \r\n      consoleSpy.mockRestore();\r\n    }, TEST_TIMEOUTS.FAST);\r\n\r\n    it('should prevent multiple concurrent session starts', async () => {\r\n      const { result } = renderHook(() => useGameAnalytics({\r\n        gameType: MOCK_DATA.gameType,\r\n        avatarId: MOCK_DATA.avatarId,\r\n        autoTrack: false\r\n      }), { wrapper });\r\n\r\n      // Start multiple sessions concurrently\r\n      await act(async () => {\r\n        const promises = [\r\n          result.current.startSession(),\r\n          result.current.startSession(),\r\n          result.current.startSession()\r\n        ];\r\n        await Promise.all(promises);\r\n      });\r\n\r\n      // Should only call the service once\r\n      expect(mockAnalyticsService.startGameSession).toHaveBeenCalledTimes(1);\r\n    }, TEST_TIMEOUTS.MEDIUM);\r\n  });\r\n\r\n  describe('Event Tracking', () => {\r\n    it('should track question attempts with proper validation', async () => {\r\n      const { result } = renderHook(() => useGameAnalytics({\r\n        gameType: MOCK_DATA.gameType,\r\n        avatarId: MOCK_DATA.avatarId,\r\n        autoTrack: false\r\n      }), { wrapper });\r\n\r\n      // Start session first\r\n      await act(async () => {\r\n        await result.current.startSession();\r\n      });\r\n\r\n      // Wait for session to be established\r\n      await waitFor(() => {\r\n        expect(result.current.sessionId).toBe(MOCK_DATA.sessionId);\r\n      }, { timeout: TEST_TIMEOUTS.FAST });\r\n\r\n      // Track question attempt\r\n      await act(async () => {\r\n        await result.current.trackQuestionAttempt(true, { \r\n          questionIndex: 0,\r\n          responseTime: 1500,\r\n          difficulty: 'easy'\r\n        });\r\n      });\r\n\r\n      expect(mockAnalyticsService.trackEvent).toHaveBeenCalledWith(\r\n        MOCK_DATA.sessionId,\r\n        MOCK_DATA.avatarId,\r\n        'question_answer',\r\n        expect.objectContaining({ \r\n          correct: true, \r\n          questionIndex: 0,\r\n          responseTime: 1500,\r\n          difficulty: 'easy'\r\n        })\r\n      );\r\n    }, TEST_TIMEOUTS.MEDIUM);\r\n\r\n    it('should handle tracking failures without breaking the flow', async () => {\r\n      const trackingError = new Error('Tracking failed');\r\n      mockAnalyticsService.trackEvent.mockRejectedValue(trackingError);\r\n\r\n      const { result } = renderHook(() => useGameAnalytics({\r\n        gameType: MOCK_DATA.gameType,\r\n        avatarId: MOCK_DATA.avatarId,\r\n        autoTrack: false\r\n      }), { wrapper });\r\n\r\n      await act(async () => {\r\n        await result.current.startSession();\r\n      });\r\n\r\n      // Suppress console error for this test\r\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\r\n\r\n      await act(async () => {\r\n        // Should not throw even if tracking fails\r\n        await expect(result.current.trackQuestionAttempt(true, { questionIndex: 0 }))\r\n          .resolves.not.toThrow();\r\n      });\r\n\r\n      consoleSpy.mockRestore();\r\n    }, TEST_TIMEOUTS.FAST);\r\n\r\n    it('should not track events without an active session', async () => {\r\n      const { result } = renderHook(() => useGameAnalytics({\r\n        gameType: MOCK_DATA.gameType,\r\n        avatarId: MOCK_DATA.avatarId,\r\n        autoTrack: false\r\n      }), { wrapper });\r\n\r\n      // Try to track without starting session\r\n      await act(async () => {\r\n        await result.current.trackQuestionAttempt(true, { questionIndex: 0 });\r\n      });\r\n\r\n      expect(mockAnalyticsService.trackEvent).not.toHaveBeenCalled();\r\n    }, TEST_TIMEOUTS.FAST);\r\n  });\r\n\r\n  describe('Session Completion', () => {\r\n    it('should complete session and load analytics data', async () => {\r\n      const { result } = renderHook(() => useGameAnalytics({\r\n        gameType: MOCK_DATA.gameType,\r\n        avatarId: MOCK_DATA.avatarId,\r\n        autoTrack: false\r\n      }), { wrapper });\r\n\r\n      // Start session\r\n      await act(async () => {\r\n        await result.current.startSession();\r\n      });\r\n\r\n      // Wait for session establishment\r\n      await waitFor(() => {\r\n        expect(result.current.isTracking).toBe(true);\r\n      }, { timeout: TEST_TIMEOUTS.FAST });\r\n\r\n      // Complete session\r\n      await act(async () => {\r\n        await result.current.completeSession(90);\r\n      });\r\n\r\n      // Verify completion call\r\n      expect(mockAnalyticsService.completeGameSession).toHaveBeenCalledWith(\r\n        MOCK_DATA.sessionId,\r\n        90,\r\n        expect.any(Number),\r\n        expect.any(Number)\r\n      );\r\n\r\n      // Verify analytics data loading\r\n      await waitFor(() => {\r\n        expect(result.current.recommendations).toEqual(MOCK_DATA.recommendations);\r\n        expect(result.current.performanceMetrics).toEqual(MOCK_DATA.metrics);\r\n      }, { timeout: TEST_TIMEOUTS.MEDIUM });\r\n    }, TEST_TIMEOUTS.SLOW);\r\n\r\n    it('should handle completion failures gracefully', async () => {\r\n      const completionError = new Error('Completion failed');\r\n      mockAnalyticsService.completeGameSession.mockRejectedValue(completionError);\r\n\r\n      const { result } = renderHook(() => useGameAnalytics({\r\n        gameType: MOCK_DATA.gameType,\r\n        avatarId: MOCK_DATA.avatarId,\r\n        autoTrack: false\r\n      }), { wrapper });\r\n\r\n      await act(async () => {\r\n        await result.current.startSession();\r\n      });\r\n\r\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\r\n\r\n      await act(async () => {\r\n        await result.current.completeSession(90);\r\n      });\r\n\r\n      // Should still attempt to load analytics despite completion failure\r\n      expect(mockAnalyticsService.getLearningPathRecommendations).toHaveBeenCalled();\r\n      expect(mockAnalyticsService.getPerformanceMetrics).toHaveBeenCalled();\r\n\r\n      consoleSpy.mockRestore();\r\n    }, TEST_TIMEOUTS.MEDIUM);\r\n  });\r\n\r\n  describe('Performance & Edge Cases', () => {\r\n    it('should complete operations within reasonable time limits', async () => {\r\n      const { result } = renderHook(() => useGameAnalytics({\r\n        gameType: MOCK_DATA.gameType,\r\n        avatarId: MOCK_DATA.avatarId,\r\n        autoTrack: false\r\n      }), { wrapper });\r\n\r\n      // Measure session start performance\r\n      const startTime = performance.now();\r\n      \r\n      await act(async () => {\r\n        await result.current.startSession();\r\n      });\r\n      \r\n      const sessionStartTime = performance.now() - startTime;\r\n      expect(sessionStartTime).toBeLessThan(1000); // Should complete within 1 second\r\n\r\n      // Measure event tracking performance\r\n      const trackStartTime = performance.now();\r\n      \r\n      await act(async () => {\r\n        await result.current.trackQuestionAttempt(true, { questionIndex: 0 });\r\n      });\r\n      \r\n      const trackTime = performance.now() - trackStartTime;\r\n      expect(trackTime).toBeLessThan(500); // Should complete within 500ms\r\n    }, TEST_TIMEOUTS.MEDIUM);\r\n\r\n    it('should handle rapid successive calls without issues', async () => {\r\n      const { result } = renderHook(() => useGameAnalytics({\r\n        gameType: MOCK_DATA.gameType,\r\n        avatarId: MOCK_DATA.avatarId,\r\n        autoTrack: false\r\n      }), { wrapper });\r\n\r\n      await act(async () => {\r\n        await result.current.startSession();\r\n      });\r\n\r\n      // Fire multiple tracking events rapidly\r\n      await act(async () => {\r\n        const promises = Array.from({ length: 10 }, (_, i) =>\r\n          result.current.trackQuestionAttempt(i % 2 === 0, { questionIndex: i })\r\n        );\r\n        await Promise.all(promises);\r\n      });\r\n\r\n      // All events should be tracked\r\n      expect(mockAnalyticsService.trackEvent).toHaveBeenCalledTimes(10);\r\n    }, TEST_TIMEOUTS.MEDIUM);\r\n\r\n    it('should cleanup properly on unmount', async () => {\r\n      const { result, unmount } = renderHook(() => useGameAnalytics({\r\n        gameType: MOCK_DATA.gameType,\r\n        avatarId: MOCK_DATA.avatarId,\r\n        autoTrack: false\r\n      }), { wrapper });\r\n\r\n      await act(async () => {\r\n        await result.current.startSession();\r\n      });\r\n\r\n      // Unmount component\r\n      unmount();\r\n\r\n      // No memory leaks or hanging promises should remain\r\n      expect(result.current.isTracking).toBe(true); // State preserved until cleanup\r\n    }, TEST_TIMEOUTS.FAST);\r\n  });\r\n}); "],"names":["jest","mock","mockAnalyticsService","analyticsService","TEST_TIMEOUTS","FAST","MEDIUM","SLOW","MOCK_DATA","avatarId","gameType","sessionId","recommendations","gameId","reason","priority","estimatedDifficulty","learningObjectives","prerequisitesMet","metrics","totalGamesPlayed","averageSessionDuration","overallCompletionRate","skillLevelDistribution","beginner","subjectPreferences","Mathematics","learningVelocity","engagementScore","describe","wrapper","children","SettingsProvider","beforeEach","clearAllMocks","startGameSession","mockResolvedValue","trackEvent","undefined","completeGameSession","getLearningPathRecommendations","getPerformanceMetrics","afterEach","resetAllMocks","useRealTimers","it","result","renderHook","useGameAnalytics","autoTrack","act","startPromise","current","startSession","Promise","race","_","reject","setTimeout","Error","expect","toHaveBeenCalledWith","any","Object","toBe","isTracking","testError","mockRejectedValue","consoleSpy","spyOn","console","mockImplementation","error","toBeNull","mockRestore","promises","all","toHaveBeenCalledTimes","waitFor","timeout","trackQuestionAttempt","questionIndex","responseTime","difficulty","objectContaining","correct","trackingError","resolves","not","toThrow","toHaveBeenCalled","completeSession","Number","toEqual","performanceMetrics","completionError","startTime","performance","now","sessionStartTime","toBeLessThan","trackStartTime","trackTime","Array","from","length","i","unmount"],"mappings":"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"}