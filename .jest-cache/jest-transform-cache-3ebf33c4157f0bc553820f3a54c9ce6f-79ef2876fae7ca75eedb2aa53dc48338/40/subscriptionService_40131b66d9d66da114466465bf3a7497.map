{"version":3,"sources":["D:\\Projects\\family-oriented\\src\\utils\\subscriptionService.ts"],"sourcesContent":["/**\r\n * Subscription Service - Tier-based Feature Gating and Usage Limits\r\n * Provides centralized subscription tier enforcement across the application\r\n */\r\n\r\nimport { logger } from './logger';\r\nimport type { SubscriptionPlan } from '@/lib/supabase/database.types';\r\n\r\n// Subscription tier definitions\r\nexport type SubscriptionTier = 'personal' | 'professional' | 'enterprise';\r\n\r\n// Feature definitions that can be gated by subscription tier\r\nexport type SubscriptionFeature = \r\n  | 'analytics' \r\n  | 'user_management' \r\n  | 'premium_themes' \r\n  | 'custom_branding'\r\n  | 'collections'\r\n  | 'scheduling'\r\n  | 'bulk_operations'\r\n  | 'api_access'\r\n  | 'export_data'\r\n  | 'advanced_reporting';\r\n\r\n// Usage limit types\r\nexport type UsageLimit = \r\n  | 'avatars'\r\n  | 'collections_per_avatar'\r\n  | 'sessions_per_month'\r\n  | 'data_retention_months';\r\n\r\n/**\r\n * Default tier configurations\r\n */\r\nexport const TIER_CONFIGURATIONS: Record<SubscriptionTier, {\r\n  features: Record<SubscriptionFeature, boolean>;\r\n  limits: Record<UsageLimit, number>;\r\n  displayName: string;\r\n  description: string;\r\n  basePrice: number;\r\n}> = {\r\n  personal: {\r\n    displayName: 'Personal Plan',\r\n    description: 'Perfect for families with up to 5 children',\r\n    basePrice: 9.99,\r\n    features: {\r\n      analytics: true,\r\n      user_management: false,\r\n      premium_themes: false,\r\n      custom_branding: false,\r\n      collections: true,\r\n      scheduling: false,\r\n      bulk_operations: false,\r\n      api_access: false,\r\n      export_data: false,\r\n      advanced_reporting: false\r\n    },\r\n    limits: {\r\n      avatars: 5,\r\n      collections_per_avatar: 10,\r\n      sessions_per_month: 1000,\r\n      data_retention_months: 12\r\n    }\r\n  },\r\n  professional: {\r\n    displayName: 'Professional Plan',\r\n    description: 'For educators and small organizations with up to 30 children',\r\n    basePrice: 19.99,\r\n    features: {\r\n      analytics: true,\r\n      user_management: true,\r\n      premium_themes: true,\r\n      custom_branding: false,\r\n      collections: true,\r\n      scheduling: true,\r\n      bulk_operations: true,\r\n      api_access: false,\r\n      export_data: true,\r\n      advanced_reporting: true\r\n    },\r\n    limits: {\r\n      avatars: 30,\r\n      collections_per_avatar: 25,\r\n      sessions_per_month: 5000,\r\n      data_retention_months: 24\r\n    }\r\n  },\r\n  enterprise: {\r\n    displayName: 'Enterprise Plan',\r\n    description: 'For large organizations with unlimited children and full customization',\r\n    basePrice: 49.99,\r\n    features: {\r\n      analytics: true,\r\n      user_management: true,\r\n      premium_themes: true,\r\n      custom_branding: true,\r\n      collections: true,\r\n      scheduling: true,\r\n      bulk_operations: true,\r\n      api_access: true,\r\n      export_data: true,\r\n      advanced_reporting: true\r\n    },\r\n    limits: {\r\n      avatars: 10000, // Effectively unlimited\r\n      collections_per_avatar: 100,\r\n      sessions_per_month: 50000,\r\n      data_retention_months: 60\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Usage tracking and enforcement\r\n */\r\nexport interface UsageData {\r\n  avatarsCount: number;\r\n  collectionsCount: number;\r\n  sessionsThisMonth: number;\r\n  dataRetentionMonths: number;\r\n}\r\n\r\nexport interface FeatureGateResult {\r\n  allowed: boolean;\r\n  reason?: string;\r\n  upgradeRequired?: SubscriptionTier;\r\n  currentUsage?: number;\r\n  limit?: number;\r\n}\r\n\r\n/**\r\n * Subscription Service Class\r\n */\r\nexport class SubscriptionService {\r\n  \r\n  /**\r\n   * Check if a feature is available for the given subscription plan\r\n   */\r\n  static canAccessFeature(\r\n    subscriptionPlan: SubscriptionPlan | null, \r\n    feature: SubscriptionFeature\r\n  ): FeatureGateResult {\r\n    if (!subscriptionPlan) {\r\n      return {\r\n        allowed: false,\r\n        reason: 'No active subscription plan',\r\n        upgradeRequired: 'personal'\r\n      };\r\n    }\r\n\r\n    const tier = subscriptionPlan.tier as SubscriptionTier;\r\n    const tierConfig = TIER_CONFIGURATIONS[tier];\r\n    \r\n    if (!tierConfig) {\r\n      logger.error('Unknown subscription tier:', tier);\r\n      return {\r\n        allowed: false,\r\n        reason: 'Invalid subscription tier'\r\n      };\r\n    }\r\n\r\n    // Check feature inclusion from database or fallback to defaults\r\n    const featuresIncluded = subscriptionPlan.features_included || {};\r\n    const hasFeature = featuresIncluded[feature] ?? tierConfig.features[feature];\r\n\r\n    if (hasFeature) {\r\n      return { allowed: true };\r\n    }\r\n\r\n    // Determine minimum tier required for this feature\r\n    const upgradeRequired = this.getMinimumTierForFeature(feature);\r\n\r\n    return {\r\n      allowed: false,\r\n      reason: `Feature '${feature}' requires ${TIER_CONFIGURATIONS[upgradeRequired].displayName}`,\r\n      upgradeRequired\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Check usage against limits\r\n   */\r\n  static checkUsageLimit(\r\n    subscriptionPlan: SubscriptionPlan | null,\r\n    limitType: UsageLimit,\r\n    currentUsage: number\r\n  ): FeatureGateResult {\r\n    if (!subscriptionPlan) {\r\n      return {\r\n        allowed: false,\r\n        reason: 'No active subscription plan',\r\n        upgradeRequired: 'personal'\r\n      };\r\n    }\r\n\r\n    const tier = subscriptionPlan.tier as SubscriptionTier;\r\n    const tierConfig = TIER_CONFIGURATIONS[tier];\r\n    \r\n    if (!tierConfig) {\r\n      return {\r\n        allowed: false,\r\n        reason: 'Invalid subscription tier'\r\n      };\r\n    }\r\n\r\n    // Get limit from database plan or fallback to defaults\r\n    const limitKey = limitType === 'avatars' ? 'avatar_limit' : `${limitType}_limit`;\r\n    const limit = subscriptionPlan[limitKey] ?? tierConfig.limits[limitType];\r\n\r\n    if (currentUsage < limit) {\r\n      return { \r\n        allowed: true, \r\n        currentUsage, \r\n        limit \r\n      };\r\n    }\r\n\r\n    // Usage exceeded - suggest upgrade\r\n    const upgradeRequired = this.getNextTierWithHigherLimit(tier, limitType, currentUsage);\r\n\r\n    return {\r\n      allowed: false,\r\n      reason: `${limitType} limit exceeded (${currentUsage}/${limit})`,\r\n      upgradeRequired,\r\n      currentUsage,\r\n      limit\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Avatar creation enforcement\r\n   */\r\n  static canCreateAvatar(\r\n    subscriptionPlan: SubscriptionPlan | null,\r\n    currentAvatarsCount: number\r\n  ): FeatureGateResult {\r\n    return this.checkUsageLimit(subscriptionPlan, 'avatars', currentAvatarsCount);\r\n  }\r\n\r\n  /**\r\n   * Collection creation enforcement\r\n   */\r\n  static canCreateCollection(\r\n    subscriptionPlan: SubscriptionPlan | null,\r\n    currentCollectionsCount: number\r\n  ): FeatureGateResult {\r\n    return this.checkUsageLimit(subscriptionPlan, 'collections_per_avatar', currentCollectionsCount + 1);\r\n  }\r\n\r\n  /**\r\n   * Get all available features for a subscription plan\r\n   */\r\n  static getAvailableFeatures(subscriptionPlan: SubscriptionPlan | null): SubscriptionFeature[] {\r\n    if (!subscriptionPlan) return [];\r\n\r\n    const tier = subscriptionPlan.tier as SubscriptionTier;\r\n    const tierConfig = TIER_CONFIGURATIONS[tier];\r\n    const featuresIncluded = subscriptionPlan.features_included || {};\r\n\r\n    const availableFeatures: SubscriptionFeature[] = [];\r\n    \r\n    for (const feature of Object.keys(tierConfig.features) as SubscriptionFeature[]) {\r\n      const hasFeature = featuresIncluded[feature] ?? tierConfig.features[feature];\r\n      if (hasFeature) {\r\n        availableFeatures.push(feature);\r\n      }\r\n    }\r\n\r\n    return availableFeatures;\r\n  }\r\n\r\n  /**\r\n   * Get usage summary for a subscription plan\r\n   */\r\n  static getUsageSummary(\r\n    subscriptionPlan: SubscriptionPlan | null,\r\n    usageData: UsageData\r\n  ): Record<UsageLimit, FeatureGateResult> {\r\n    const summary: Record<UsageLimit, FeatureGateResult> = {} as Record<UsageLimit, FeatureGateResult>;\r\n\r\n    for (const limitType of Object.keys(TIER_CONFIGURATIONS.personal.limits) as UsageLimit[]) {\r\n      const currentUsage = this.getCurrentUsageValue(usageData, limitType);\r\n      summary[limitType] = this.checkUsageLimit(subscriptionPlan, limitType, currentUsage);\r\n    }\r\n\r\n    return summary;\r\n  }\r\n\r\n  /**\r\n   * Helper: Get minimum tier required for a feature\r\n   */\r\n  private static getMinimumTierForFeature(feature: SubscriptionFeature): SubscriptionTier {\r\n    const tiers: SubscriptionTier[] = ['personal', 'professional', 'enterprise'];\r\n    \r\n    for (const tier of tiers) {\r\n      if (TIER_CONFIGURATIONS[tier].features[feature]) {\r\n        return tier;\r\n      }\r\n    }\r\n    \r\n    return 'enterprise'; // Fallback to highest tier\r\n  }\r\n\r\n  /**\r\n   * Helper: Get next tier with higher limit\r\n   */\r\n  private static getNextTierWithHigherLimit(\r\n    currentTier: SubscriptionTier, \r\n    limitType: UsageLimit, \r\n    requiredUsage: number\r\n  ): SubscriptionTier {\r\n    const tiers: SubscriptionTier[] = ['personal', 'professional', 'enterprise'];\r\n    const currentIndex = tiers.indexOf(currentTier);\r\n    \r\n    for (let i = currentIndex + 1; i < tiers.length; i++) {\r\n      const tier = tiers[i];\r\n      if (TIER_CONFIGURATIONS[tier].limits[limitType] >= requiredUsage) {\r\n        return tier;\r\n      }\r\n    }\r\n    \r\n    return 'enterprise'; // Fallback to highest tier\r\n  }\r\n\r\n  /**\r\n   * Helper: Extract current usage value from usage data\r\n   */\r\n  private static getCurrentUsageValue(usageData: UsageData, limitType: UsageLimit): number {\r\n    switch (limitType) {\r\n      case 'avatars':\r\n        return usageData.avatarsCount;\r\n      case 'collections_per_avatar':\r\n        return usageData.collectionsCount;\r\n      case 'sessions_per_month':\r\n        return usageData.sessionsThisMonth;\r\n      case 'data_retention_months':\r\n        return usageData.dataRetentionMonths;\r\n      default:\r\n        return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Format feature gate result for UI display\r\n   */\r\n  static formatFeatureGateMessage(result: FeatureGateResult): string {\r\n    if (result.allowed) {\r\n      return 'Feature available';\r\n    }\r\n\r\n    if (result.upgradeRequired) {\r\n      const tierName = TIER_CONFIGURATIONS[result.upgradeRequired].displayName;\r\n      return `${result.reason}. Upgrade to ${tierName} to unlock this feature.`;\r\n    }\r\n\r\n    return result.reason || 'Feature not available';\r\n  }\r\n\r\n  /**\r\n   * Get plan comparison data for upgrade UI\r\n   */\r\n  static getPlanComparison(): Record<SubscriptionTier, {\r\n    displayName: string;\r\n    description: string;\r\n    features: string[];\r\n    limits: string[];\r\n    price: number;\r\n  }> {\r\n    const comparison: Record<SubscriptionTier, {\r\n      displayName: string;\r\n      description: string;\r\n      features: string[];\r\n      limits: string[];\r\n      price: number;\r\n    }> = {} as Record<SubscriptionTier, {\r\n      displayName: string;\r\n      description: string;\r\n      features: string[];\r\n      limits: string[];\r\n      price: number;\r\n    }>;\r\n\r\n    for (const [tier, config] of Object.entries(TIER_CONFIGURATIONS)) {\r\n      const enabledFeatures = Object.entries(config.features)\r\n        .filter(([, enabled]) => enabled)\r\n        .map(([featureName]) => featureName);\r\n\r\n      const limitsDisplay = Object.entries(config.limits)\r\n        .map(([limit, value]) => `${limit}: ${value === 10000 ? 'Unlimited' : value}`);\r\n\r\n      comparison[tier as SubscriptionTier] = {\r\n        displayName: config.displayName,\r\n        description: config.description,\r\n        price: config.basePrice,\r\n        features: enabledFeatures,\r\n        limits: limitsDisplay\r\n      };\r\n    }\r\n\r\n    return comparison;\r\n  }\r\n\r\n  /**\r\n   * Analyze tier transition impact\r\n   */\r\n  static analyzeTierTransition(\r\n    currentTier: SubscriptionTier,\r\n    targetTier: SubscriptionTier,\r\n    currentUsage: UsageData\r\n  ): {\r\n    isUpgrade: boolean;\r\n    isDowngrade: boolean;\r\n    featureChanges: {\r\n      gained: SubscriptionFeature[];\r\n      lost: SubscriptionFeature[];\r\n    };\r\n    usageImpact: {\r\n      overLimitItems: Array<{\r\n        type: UsageLimit;\r\n        current: number;\r\n        newLimit: number;\r\n        impact: string;\r\n      }>;\r\n    };\r\n    costImpact: {\r\n      currentCost: number;\r\n      newCost: number;\r\n      monthlyDifference: number;\r\n      prorationAmount: number;\r\n      prorationDescription: string;\r\n    };\r\n    warnings: string[];\r\n    canTransition: boolean;\r\n  } {\r\n    const currentConfig = TIER_CONFIGURATIONS[currentTier];\r\n    const targetConfig = TIER_CONFIGURATIONS[targetTier];\r\n    \r\n    // Safety check for invalid tiers\r\n    if (!currentConfig || !targetConfig) {\r\n      return {\r\n        isUpgrade: false,\r\n        isDowngrade: false,\r\n        featureChanges: { gained: [], lost: [] },\r\n        usageImpact: { overLimitItems: [] },\r\n        costImpact: {\r\n          currentCost: 0,\r\n          newCost: 0,\r\n          monthlyDifference: 0,\r\n          prorationAmount: 0,\r\n          prorationDescription: 'Invalid tier configuration'\r\n        },\r\n        warnings: ['Invalid tier configuration'],\r\n        canTransition: false\r\n      };\r\n    }\r\n    \r\n    const tierOrder = { personal: 1, professional: 2, enterprise: 3 };\r\n    \r\n    const isUpgrade = tierOrder[targetTier] > tierOrder[currentTier];\r\n    const isDowngrade = tierOrder[targetTier] < tierOrder[currentTier];\r\n\r\n    // Analyze feature changes\r\n    const gainedFeatures: SubscriptionFeature[] = [];\r\n    const lostFeatures: SubscriptionFeature[] = [];\r\n\r\n    Object.entries(targetConfig.features).forEach(([featureName, enabled]) => {\r\n      const currentlyEnabled = currentConfig.features[featureName as SubscriptionFeature];\r\n      if (enabled && !currentlyEnabled) {\r\n        gainedFeatures.push(featureName as SubscriptionFeature);\r\n      } else if (!enabled && currentlyEnabled) {\r\n        lostFeatures.push(featureName as SubscriptionFeature);\r\n      }\r\n    });\r\n\r\n    // Analyze usage impact\r\n    const overLimitItems: Array<{\r\n      type: UsageLimit;\r\n      current: number;\r\n      newLimit: number;\r\n      impact: string;\r\n    }> = [];\r\n    const warnings = [];\r\n\r\n    Object.entries(targetConfig.limits).forEach(([limitType, newLimit]) => {\r\n      const currentUsageValue = this.getCurrentUsageValue(currentUsage, limitType as UsageLimit);\r\n      \r\n      if (currentUsageValue > newLimit) {\r\n        const impact = this.getUsageLimitImpactMessage(limitType as UsageLimit, currentUsageValue, newLimit);\r\n        overLimitItems.push({\r\n          type: limitType as UsageLimit,\r\n          current: currentUsageValue,\r\n          newLimit,\r\n          impact\r\n        });\r\n        warnings.push(`${limitType}: ${impact}`);\r\n      }\r\n    });\r\n\r\n    // Add feature-specific warnings\r\n    if (lostFeatures.length > 0) {\r\n      warnings.push(`You will lose access to: ${lostFeatures.join(', ')}`);\r\n    }\r\n\r\n    if (currentTier === 'enterprise' && targetTier !== 'enterprise') {\r\n      warnings.push('You will lose custom branding and advanced enterprise features');\r\n    }\r\n\r\n    // Calculate cost impact\r\n    const currentCost = currentConfig.basePrice || 0;\r\n    const newCost = targetConfig.basePrice || 0;\r\n    const monthlyDifference = newCost - currentCost;\r\n    const proration = this.calculateProration(currentCost, newCost);\r\n\r\n    const canTransition = overLimitItems.length === 0 || isUpgrade;\r\n\r\n    return {\r\n      isUpgrade,\r\n      isDowngrade,\r\n      featureChanges: {\r\n        gained: gainedFeatures,\r\n        lost: lostFeatures\r\n      },\r\n      usageImpact: {\r\n        overLimitItems\r\n      },\r\n      costImpact: {\r\n        currentCost,\r\n        newCost,\r\n        monthlyDifference,\r\n        prorationAmount: proration.prorationAmount,\r\n        prorationDescription: proration.description\r\n      },\r\n      warnings,\r\n      canTransition\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get available tier transitions\r\n   */\r\n  static getAvailableTransitions(currentTier: SubscriptionTier): {\r\n    upgrades: SubscriptionTier[];\r\n    downgrades: SubscriptionTier[];\r\n  } {\r\n    const allTiers: SubscriptionTier[] = ['personal', 'professional', 'enterprise'];\r\n    const tierOrder = { personal: 1, professional: 2, enterprise: 3 };\r\n    const currentOrder = tierOrder[currentTier];\r\n\r\n    return {\r\n      upgrades: allTiers.filter(tier => tierOrder[tier] > currentOrder),\r\n      downgrades: allTiers.filter(tier => tierOrder[tier] < currentOrder)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate proration amount for tier change\r\n   */\r\n  static calculateProration(\r\n    currentMonthlyPrice: number,\r\n    newMonthlyPrice: number,\r\n    daysPassed: number = new Date().getDate(),\r\n    daysInMonth: number = new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0).getDate()\r\n  ): {\r\n    prorationAmount: number;\r\n    description: string;\r\n  } {\r\n    const remainingDays = daysInMonth - daysPassed;\r\n    const dailyDifference = (newMonthlyPrice - currentMonthlyPrice) / daysInMonth;\r\n    const prorationAmount = Math.round(dailyDifference * remainingDays * 100) / 100;\r\n\r\n    const description = prorationAmount > 0 \r\n      ? `You'll be charged $${Math.abs(prorationAmount).toFixed(2)} for the remaining ${remainingDays} days of this billing cycle.`\r\n      : prorationAmount < 0\r\n      ? `You'll receive a credit of $${Math.abs(prorationAmount).toFixed(2)} for the remaining ${remainingDays} days.`\r\n      : 'No proration required.';\r\n\r\n    return {\r\n      prorationAmount,\r\n      description\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Helper: Get usage limit impact message\r\n   */\r\n  private static getUsageLimitImpactMessage(\r\n    limitType: UsageLimit,\r\n    currentUsage: number,\r\n    newLimit: number\r\n  ): string {\r\n    const excess = currentUsage - newLimit;\r\n    \r\n    switch (limitType) {\r\n      case 'avatars':\r\n        return `${excess} avatar(s) will need to be removed or archived`;\r\n      case 'collections_per_avatar':\r\n        return `Some collections may need to be removed or consolidated`;\r\n      case 'sessions_per_month':\r\n        return `Monthly session limit will be reduced from ${currentUsage} to ${newLimit}`;\r\n      case 'data_retention_months':\r\n        return `Data retention will be reduced from ${currentUsage} to ${newLimit} months`;\r\n      default:\r\n        return `Usage will be limited to ${newLimit} (currently ${currentUsage})`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate if a tier transition is safe\r\n   */\r\n  static validateTierTransition(\r\n    currentTier: SubscriptionTier,\r\n    targetTier: SubscriptionTier,\r\n    currentUsage: UsageData\r\n  ): {\r\n    valid: boolean;\r\n    reasons: string[];\r\n  } {\r\n    if (currentTier === targetTier) {\r\n      return {\r\n        valid: false,\r\n        reasons: ['Cannot transition to the same tier']\r\n      };\r\n    }\r\n\r\n    const analysis = this.analyzeTierTransition(currentTier, targetTier, currentUsage);\r\n    \r\n    if (!analysis.canTransition) {\r\n      return {\r\n        valid: false,\r\n        reasons: analysis.warnings\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      reasons: []\r\n    };\r\n  }\r\n}\r\n\r\n// Export for convenience\r\nexport const subscriptionService = SubscriptionService; "],"names":["SubscriptionService","TIER_CONFIGURATIONS","subscriptionService","personal","displayName","description","basePrice","features","analytics","user_management","premium_themes","custom_branding","collections","scheduling","bulk_operations","api_access","export_data","advanced_reporting","limits","avatars","collections_per_avatar","sessions_per_month","data_retention_months","professional","enterprise","canAccessFeature","subscriptionPlan","feature","allowed","reason","upgradeRequired","tier","tierConfig","logger","error","featuresIncluded","features_included","hasFeature","getMinimumTierForFeature","checkUsageLimit","limitType","currentUsage","limitKey","limit","getNextTierWithHigherLimit","canCreateAvatar","currentAvatarsCount","canCreateCollection","currentCollectionsCount","getAvailableFeatures","availableFeatures","Object","keys","push","getUsageSummary","usageData","summary","getCurrentUsageValue","tiers","currentTier","requiredUsage","currentIndex","indexOf","i","length","avatarsCount","collectionsCount","sessionsThisMonth","dataRetentionMonths","formatFeatureGateMessage","result","tierName","getPlanComparison","comparison","config","entries","enabledFeatures","filter","enabled","map","featureName","limitsDisplay","value","price","analyzeTierTransition","targetTier","currentConfig","targetConfig","isUpgrade","isDowngrade","featureChanges","gained","lost","usageImpact","overLimitItems","costImpact","currentCost","newCost","monthlyDifference","prorationAmount","prorationDescription","warnings","canTransition","tierOrder","gainedFeatures","lostFeatures","forEach","currentlyEnabled","newLimit","currentUsageValue","impact","getUsageLimitImpactMessage","type","current","join","proration","calculateProration","getAvailableTransitions","allTiers","currentOrder","upgrades","downgrades","currentMonthlyPrice","newMonthlyPrice","daysPassed","Date","getDate","daysInMonth","getFullYear","getMonth","remainingDays","dailyDifference","Math","round","abs","toFixed","excess","validateTierTransition","valid","reasons","analysis"],"mappings":"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"}