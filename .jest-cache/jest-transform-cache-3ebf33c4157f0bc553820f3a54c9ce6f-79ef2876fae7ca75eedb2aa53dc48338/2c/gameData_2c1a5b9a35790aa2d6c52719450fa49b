2d20c72c85bad8271e70e1bffd0432bf
// Academic subject definitions with colors
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GAMES: function() {
        return GAMES;
    },
    GAME_CATEGORIES: function() {
        return GAME_CATEGORIES;
    },
    GAME_GROUPINGS: function() {
        return GAME_GROUPINGS;
    },
    GameDiscoveryEngine: function() {
        return GameDiscoveryEngine;
    },
    GameUtils: function() {
        return GameUtils;
    },
    SUBJECTS: function() {
        return SUBJECTS;
    },
    TAG_CATEGORIES: function() {
        return TAG_CATEGORIES;
    },
    gameDiscovery: function() {
        return gameDiscovery;
    }
});
const SUBJECTS = {
    'Language Arts': {
        color: '#ff6d00',
        icon: 'üìö'
    },
    'Mathematics': {
        color: '#4361ee',
        icon: 'üî¢'
    },
    'Social Studies': {
        color: '#64f7e7',
        icon: 'üåç'
    },
    'Visual Arts': {
        color: '#ff5a5f',
        icon: 'üé®'
    }
};
const TAG_CATEGORIES = {
    'skill-type': [
        'counting',
        'recognition',
        'memory',
        'logic',
        'creativity',
        'phonics',
        'vocabulary',
        'spatial-awareness'
    ],
    'interaction': [
        'drag-drop',
        'click',
        'keyboard',
        'voice',
        'touch',
        'gesture'
    ],
    'difficulty': [
        'starter',
        'easy',
        'medium',
        'challenging'
    ],
    'duration': [
        'quick',
        'short',
        'medium',
        'long'
    ],
    'feature': [
        'audio',
        'animation',
        'multiplayer',
        'adaptive',
        'progressive'
    ],
    'curriculum': [
        'common-core',
        'early-learning',
        'pre-k',
        'kindergarten'
    ]
};
const GAMES = [
    {
        id: 'numbers',
        title: 'Numbers',
        description: 'Learn to recognize numbers and count objects',
        href: '/games/numbers',
        emoji: 'üî¢',
        color: '#4361ee',
        subject: 'Mathematics',
        tags: [
            'counting',
            'recognition',
            'numbers',
            'beginner'
        ],
        ageRange: [
            3,
            6
        ],
        skillLevel: 'beginner',
        estimatedDuration: 10,
        learningObjectives: [
            'Number recognition',
            'Counting skills',
            'One-to-one correspondence'
        ],
        hasAudio: true,
        hasVisuals: true,
        isInteractive: true,
        supportsMultiplayer: false,
        status: 'active',
        lastUpdated: '2024-01-15',
        version: '1.0.0'
    },
    {
        id: 'letters',
        title: 'Letters',
        description: 'Learn the alphabet and letter sounds',
        href: '/games/letters',
        emoji: 'üî§',
        color: '#ff6d00',
        subject: 'Language Arts',
        tags: [
            'alphabet',
            'phonics',
            'recognition',
            'beginner'
        ],
        ageRange: [
            3,
            7
        ],
        skillLevel: 'beginner',
        estimatedDuration: 12,
        learningObjectives: [
            'Letter recognition',
            'Phonetic awareness',
            'Alphabet sequence'
        ],
        hasAudio: true,
        hasVisuals: true,
        isInteractive: true,
        supportsMultiplayer: false,
        status: 'active',
        lastUpdated: '2024-01-15',
        version: '1.0.0'
    },
    {
        id: 'shapes',
        title: 'Shapes',
        description: 'Identify different shapes',
        href: '/games/shapes',
        emoji: '‚≠ê',
        color: '#2ec4b6',
        subject: 'Visual Arts',
        tags: [
            'shapes',
            'geometry',
            'recognition',
            'spatial-awareness'
        ],
        ageRange: [
            3,
            6
        ],
        skillLevel: 'beginner',
        estimatedDuration: 8,
        learningObjectives: [
            'Shape recognition',
            'Geometric understanding',
            'Visual discrimination'
        ],
        hasAudio: true,
        hasVisuals: true,
        isInteractive: true,
        supportsMultiplayer: false,
        status: 'active',
        lastUpdated: '2024-01-15',
        version: '1.0.0'
    },
    {
        id: 'shape-sorter',
        title: 'Shape Sorter',
        description: 'Drag shapes into the correct holes',
        href: '/games/shapes/sorter',
        emoji: 'üî∑',
        color: '#2ec4b6',
        subject: 'Visual Arts',
        tags: [
            'shapes',
            'drag-drop',
            'sorting',
            'spatial-awareness',
            'motor-skills'
        ],
        ageRange: [
            3,
            5
        ],
        skillLevel: 'beginner',
        estimatedDuration: 6,
        learningObjectives: [
            'Fine motor skills',
            'Shape matching',
            'Problem solving'
        ],
        prerequisites: [
            'shapes'
        ],
        hasAudio: true,
        hasVisuals: true,
        isInteractive: true,
        supportsMultiplayer: false,
        status: 'active',
        lastUpdated: '2024-01-15',
        version: '1.0.0'
    },
    {
        id: 'colors',
        title: 'Colors',
        description: 'Recognize and match colors',
        href: '/games/colors',
        emoji: 'üåà',
        color: '#ff5a5f',
        subject: 'Visual Arts',
        tags: [
            'colors',
            'recognition',
            'matching',
            'visual-perception'
        ],
        ageRange: [
            2,
            5
        ],
        skillLevel: 'beginner',
        estimatedDuration: 7,
        learningObjectives: [
            'Color recognition',
            'Color naming',
            'Visual discrimination'
        ],
        hasAudio: true,
        hasVisuals: true,
        isInteractive: true,
        supportsMultiplayer: false,
        status: 'active',
        lastUpdated: '2024-01-15',
        version: '1.0.0'
    },
    {
        id: 'patterns',
        title: 'Patterns',
        description: 'Find the patterns and sequences',
        href: '/games/patterns',
        emoji: 'üìä',
        color: '#ffbe0b',
        subject: 'Visual Arts',
        tags: [
            'patterns',
            'sequences',
            'logic',
            'prediction'
        ],
        ageRange: [
            4,
            7
        ],
        skillLevel: 'intermediate',
        estimatedDuration: 12,
        learningObjectives: [
            'Pattern recognition',
            'Logical thinking',
            'Prediction skills'
        ],
        hasAudio: true,
        hasVisuals: true,
        isInteractive: true,
        supportsMultiplayer: false,
        status: 'active',
        lastUpdated: '2024-01-15',
        version: '1.0.0'
    },
    {
        id: 'addition',
        title: 'Addition',
        description: 'Practice simple addition problems',
        href: '/games/math/addition',
        emoji: '‚ûï',
        color: '#2ec4b6',
        subject: 'Mathematics',
        tags: [
            'addition',
            'arithmetic',
            'calculation',
            'numbers'
        ],
        ageRange: [
            5,
            8
        ],
        skillLevel: 'intermediate',
        estimatedDuration: 15,
        learningObjectives: [
            'Addition facts',
            'Mathematical reasoning',
            'Problem solving'
        ],
        prerequisites: [
            'numbers'
        ],
        hasAudio: true,
        hasVisuals: true,
        isInteractive: true,
        supportsMultiplayer: false,
        status: 'active',
        lastUpdated: '2024-01-15',
        version: '1.0.0'
    },
    {
        id: 'subtraction',
        title: 'Subtraction',
        description: 'Practice simple subtraction problems',
        href: '/games/math/subtraction',
        emoji: '‚ûñ',
        color: '#ffbe0b',
        subject: 'Mathematics',
        tags: [
            'subtraction',
            'arithmetic',
            'calculation',
            'numbers'
        ],
        ageRange: [
            5,
            8
        ],
        skillLevel: 'intermediate',
        estimatedDuration: 15,
        learningObjectives: [
            'Subtraction facts',
            'Mathematical reasoning',
            'Problem solving'
        ],
        prerequisites: [
            'numbers',
            'addition'
        ],
        hasAudio: true,
        hasVisuals: true,
        isInteractive: true,
        supportsMultiplayer: false,
        status: 'active',
        lastUpdated: '2024-01-15',
        version: '1.0.0'
    },
    {
        id: 'fill-in-the-blank',
        title: 'Fill in the Blank',
        description: 'Complete the missing letters in words',
        href: '/games/fill-in-the-blank',
        emoji: '‚úèÔ∏è',
        color: '#ff9e40',
        subject: 'Language Arts',
        tags: [
            'spelling',
            'vocabulary',
            'letters',
            'word-completion'
        ],
        ageRange: [
            5,
            8
        ],
        skillLevel: 'intermediate',
        estimatedDuration: 10,
        learningObjectives: [
            'Spelling skills',
            'Word recognition',
            'Letter-sound relationships'
        ],
        prerequisites: [
            'letters'
        ],
        hasAudio: true,
        hasVisuals: true,
        isInteractive: true,
        supportsMultiplayer: false,
        status: 'active',
        lastUpdated: '2024-01-15',
        version: '1.0.0'
    },
    {
        id: 'geography',
        title: 'Geography',
        description: 'Learn about continents and US states',
        href: '/games/geography',
        emoji: 'üåç',
        color: '#64f7e7',
        subject: 'Social Studies',
        tags: [
            'geography',
            'continents',
            'states',
            'world-knowledge'
        ],
        ageRange: [
            6,
            10
        ],
        skillLevel: 'intermediate',
        estimatedDuration: 20,
        learningObjectives: [
            'Geographic knowledge',
            'Spatial relationships',
            'Cultural awareness'
        ],
        hasAudio: true,
        hasVisuals: true,
        isInteractive: true,
        supportsMultiplayer: false,
        status: 'active',
        lastUpdated: '2024-01-15',
        version: '1.0.0'
    },
    {
        id: 'rhyming',
        title: 'Rhyming Words',
        description: 'Pick the word that rhymes!',
        href: '/games/rhyming',
        emoji: 'üß©',
        color: '#64f7e7',
        subject: 'Language Arts',
        tags: [
            'rhyming',
            'phonics',
            'word-play',
            'sound-patterns'
        ],
        ageRange: [
            4,
            7
        ],
        skillLevel: 'intermediate',
        estimatedDuration: 8,
        learningObjectives: [
            'Phonological awareness',
            'Sound patterns',
            'Vocabulary expansion'
        ],
        prerequisites: [
            'letters'
        ],
        hasAudio: true,
        hasVisuals: true,
        isInteractive: true,
        supportsMultiplayer: false,
        status: 'active',
        lastUpdated: '2024-01-15',
        version: '1.0.0'
    },
    {
        id: 'alphabet-sequence',
        title: 'Alphabet Sequence',
        description: 'Memorize the alphabet order by finding missing letters',
        href: '/games/alphabet-sequence',
        emoji: 'üî§',
        color: '#9381ff',
        subject: 'Language Arts',
        tags: [
            'alphabet',
            'memory',
            'sequence',
            'order',
            'beginner'
        ],
        ageRange: [
            4,
            7
        ],
        skillLevel: 'beginner',
        estimatedDuration: 10,
        learningObjectives: [
            'Alphabet memorization',
            'Sequential thinking',
            'Letter recognition'
        ],
        prerequisites: [
            'letters'
        ],
        hasAudio: true,
        hasVisuals: true,
        isInteractive: true,
        supportsMultiplayer: false,
        status: 'active',
        lastUpdated: '2024-01-15',
        version: '1.0.0'
    },
    {
        id: 'number-sequence',
        title: 'Number Sequence',
        description: 'Memorize number order by finding missing numbers',
        href: '/games/number-sequence',
        emoji: '1Ô∏è‚É£',
        color: '#4361ee',
        subject: 'Mathematics',
        tags: [
            'numbers',
            'memory',
            'sequence',
            'order',
            'counting'
        ],
        ageRange: [
            4,
            7
        ],
        skillLevel: 'beginner',
        estimatedDuration: 10,
        learningObjectives: [
            'Number sequence memorization',
            'Sequential counting',
            'Number recognition'
        ],
        prerequisites: [
            'numbers'
        ],
        hasAudio: true,
        hasVisuals: true,
        isInteractive: true,
        supportsMultiplayer: false,
        status: 'active',
        lastUpdated: '2024-01-15',
        version: '1.0.0'
    }
];
const GAME_GROUPINGS = [
    {
        id: 'math-basics',
        title: 'Math Fundamentals',
        description: 'Essential math skills for early learners',
        emoji: 'üî¢',
        color: '#4361ee',
        criteria: {
            subjects: [
                'Mathematics'
            ],
            skillLevels: [
                'beginner'
            ]
        },
        featured: true
    },
    {
        id: 'language-foundation',
        title: 'Language Building Blocks',
        description: 'Core language and literacy skills',
        emoji: 'üìö',
        color: '#ff6d00',
        criteria: {
            subjects: [
                'Language Arts'
            ],
            skillLevels: [
                'beginner'
            ]
        },
        featured: true
    },
    {
        id: 'quick-games',
        title: 'Quick Play',
        description: 'Games that can be completed in under 10 minutes',
        emoji: '‚ö°',
        color: '#2ec4b6',
        criteria: {
            tags: [
                'quick'
            ]
        }
    },
    {
        id: 'interactive-play',
        title: 'Interactive Adventures',
        description: 'Hands-on games with rich interactions',
        emoji: 'üéÆ',
        color: '#ff5a5f',
        criteria: {
            tags: [
                'drag-drop',
                'interactive'
            ]
        }
    },
    {
        id: 'visual-arts',
        title: 'Creative & Visual',
        description: 'Games focusing on visual skills and creativity',
        emoji: 'üé®',
        color: '#ff5a5f',
        criteria: {
            subjects: [
                'Visual Arts'
            ]
        },
        featured: true
    },
    {
        id: 'advanced-learners',
        title: 'Challenge Mode',
        description: 'Advanced games for confident learners',
        emoji: 'üèÜ',
        color: '#9381ff',
        criteria: {
            skillLevels: [
                'intermediate',
                'advanced'
            ]
        }
    }
];
class GameDiscoveryEngine {
    constructor(games = GAMES){
        this.games = games;
    }
    /**
   * Search games with text query and filters
   */ search(query = '', filters = {}) {
        let results = [
            ...this.games
        ];
        // Filter by status (default to active only)
        if (!filters.status) {
            results = results.filter((game)=>game.status === 'active');
        } else {
            results = results.filter((game)=>filters.status.includes(game.status));
        }
        // Text search
        if (query.trim()) {
            const searchTerm = query.toLowerCase();
            results = results.filter((game)=>game.title.toLowerCase().includes(searchTerm) || game.description.toLowerCase().includes(searchTerm) || game.tags.some((tag)=>tag.toLowerCase().includes(searchTerm)) || game.learningObjectives.some((obj)=>obj.toLowerCase().includes(searchTerm)));
        }
        // Apply filters
        if (filters.subjects?.length) {
            results = results.filter((g)=>filters.subjects.includes(g.subject));
        }
        if (filters.tags?.length) {
            results = results.filter((g)=>filters.tags.some((tag)=>g.tags.includes(tag)));
        }
        if (filters.ageRange) {
            const [minAge, maxAge] = filters.ageRange;
            results = results.filter((g)=>g.ageRange[0] <= maxAge && g.ageRange[1] >= minAge);
        }
        if (filters.skillLevels?.length) {
            results = results.filter((g)=>filters.skillLevels.includes(g.skillLevel));
        }
        if (filters.features?.length) {
            results = results.filter((g)=>filters.features.every((feature)=>feature === 'audio' && g.hasAudio || feature === 'multiplayer' && g.supportsMultiplayer || feature === 'interactive' && g.isInteractive || g.tags.includes(feature)));
        }
        return results;
    }
    /**
   * Get games for a specific grouping
   */ getGamesForGroup(groupId) {
        const group = GAME_GROUPINGS.find((g)=>g.id === groupId);
        if (!group) return [];
        return this.search('', group.criteria);
    }
    /**
   * Get games by subject
   */ getGamesBySubject(subject) {
        return this.search('', {
            subjects: [
                subject
            ]
        });
    }
    /**
   * Get featured games
   */ getFeaturedGames() {
        const featuredGroups = GAME_GROUPINGS.filter((g)=>g.featured);
        const featuredGameIds = new Set();
        featuredGroups.forEach((group)=>{
            const games = this.getGamesForGroup(group.id);
            games.slice(0, 2).forEach((game)=>featuredGameIds.add(game.id)); // Max 2 per group
        });
        return Array.from(featuredGameIds).map((id)=>this.games.find((g)=>g.id === id));
    }
    /**
   * Get available filter facets based on current results
   */ getFacets(currentFilters = {}) {
        const filteredGames = this.search('', currentFilters);
        return {
            subjects: this.buildFacet(filteredGames, 'subject'),
            skillLevels: this.buildFacet(filteredGames, 'skillLevel'),
            tags: this.buildTagFacets(filteredGames),
            ageRanges: this.buildAgeRangeFacets(filteredGames)
        };
    }
    /**
   * Get autocomplete suggestions based on search query
   * Returns suggestions from game titles, tags, and learning objectives
   */ getAutocompleteSuggestions(query, limit = 8) {
        if (!query.trim()) return [];
        const suggestions = [];
        const queryLower = query.toLowerCase();
        const seen = new Set();
        // Game titles
        this.games.forEach((game)=>{
            if (game.title.toLowerCase().includes(queryLower) && !seen.has(game.title)) {
                suggestions.push({
                    type: 'game',
                    value: game.title,
                    label: game.title,
                    emoji: game.emoji,
                    subject: game.subject
                });
                seen.add(game.title);
            }
        });
        // Popular tags
        const allTags = this.games.flatMap((game)=>game.tags);
        const tagCounts = allTags.reduce((acc, tag)=>{
            acc[tag] = (acc[tag] || 0) + 1;
            return acc;
        }, {});
        Object.entries(tagCounts).filter(([tag])=>tag.toLowerCase().includes(queryLower) && !seen.has(tag)).sort(([, a], [, b])=>b - a) // Sort by popularity
        .forEach(([tag])=>{
            suggestions.push({
                type: 'tag',
                value: tag,
                label: `#${tag}`,
                count: tagCounts[tag]
            });
            seen.add(tag);
        });
        // Learning objectives
        this.games.forEach((game)=>{
            game.learningObjectives.forEach((objective)=>{
                if (objective.toLowerCase().includes(queryLower) && !seen.has(objective)) {
                    suggestions.push({
                        type: 'objective',
                        value: objective,
                        label: objective,
                        gameTitle: game.title
                    });
                    seen.add(objective);
                }
            });
        });
        return suggestions.slice(0, limit);
    }
    /**
   * Get all available tags grouped by category with counts
   */ getTagsByCategory(currentFilters = {}) {
        const filteredGames = this.search('', currentFilters);
        const allTags = filteredGames.flatMap((game)=>game.tags);
        const tagCounts = allTags.reduce((acc, tag)=>{
            acc[tag] = (acc[tag] || 0) + 1;
            return acc;
        }, {});
        return Object.entries(TAG_CATEGORIES).map(([categoryKey, categoryTags])=>({
                id: categoryKey,
                name: this.formatCategoryName(categoryKey),
                tags: categoryTags.filter((tag)=>tagCounts[tag] > 0).map((tag)=>({
                        name: tag,
                        count: tagCounts[tag],
                        label: this.formatTagLabel(tag)
                    })).sort((a, b)=>b.count - a.count)
            })).filter((category)=>category.tags.length > 0);
    }
    /**
   * Format category name for display
   */ formatCategoryName(categoryKey) {
        const nameMap = {
            'skill-type': 'Skills',
            'interaction': 'Interaction',
            'difficulty': 'Difficulty',
            'duration': 'Duration',
            'feature': 'Features',
            'curriculum': 'Curriculum'
        };
        return nameMap[categoryKey] || categoryKey;
    }
    /**
   * Format tag label for display
   */ formatTagLabel(tag) {
        return tag.split('-').map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
    }
    /**
   * Enhanced search with facet filtering and sorting
   */ searchWithFacets(query = '', filters = {}) {
        let results = this.search(query, filters);
        // Apply facet filters
        if (filters.facets) {
            results = this.applyFacetFilters(results, filters.facets);
        }
        // Apply sorting
        if (filters.sort) {
            results = this.sortGames(results, filters.sort, query);
        }
        return results;
    }
    /**
   * Apply facet filters to game results
   */ applyFacetFilters(games, facets) {
        let filtered = games;
        // Age range filtering
        if (facets.ageRanges.length > 0) {
            filtered = filtered.filter((game)=>{
                return facets.ageRanges.some((range)=>{
                    const [minAge, maxAge] = this.parseAgeRange(range);
                    return game.ageRange[0] <= maxAge && game.ageRange[1] >= minAge;
                });
            });
        }
        // Duration filtering
        if (facets.durations.length > 0) {
            filtered = filtered.filter((game)=>{
                return facets.durations.some((duration)=>{
                    const [minDuration, maxDuration] = this.parseDurationRange(duration);
                    return game.estimatedDuration >= minDuration && game.estimatedDuration <= maxDuration;
                });
            });
        }
        // Skill level filtering
        if (facets.skillLevels.length > 0) {
            filtered = filtered.filter((game)=>facets.skillLevels.includes(game.skillLevel));
        }
        // Features filtering
        if (facets.features.length > 0) {
            filtered = filtered.filter((game)=>{
                return facets.features.every((feature)=>{
                    switch(feature){
                        case 'audio':
                            return game.hasAudio;
                        case 'multiplayer':
                            return game.supportsMultiplayer;
                        case 'interactive':
                            return game.isInteractive;
                        case 'visuals':
                            return game.hasVisuals;
                        default:
                            return game.tags.includes(feature);
                    }
                });
            });
        }
        return filtered;
    }
    /**
   * Sort games based on criteria
   */ sortGames(games, sort, query = '') {
        const sorted = [
            ...games
        ];
        switch(sort.field){
            case 'relevance':
                return this.sortByRelevance(sorted, query);
            case 'skillLevel':
                return sorted.sort((a, b)=>{
                    const skillOrder = {
                        'beginner': 1,
                        'intermediate': 2,
                        'advanced': 3
                    };
                    const comparison = skillOrder[a.skillLevel] - skillOrder[b.skillLevel];
                    return sort.direction === 'desc' ? -comparison : comparison;
                });
            case 'duration':
                return sorted.sort((a, b)=>{
                    const comparison = a.estimatedDuration - b.estimatedDuration;
                    return sort.direction === 'desc' ? -comparison : comparison;
                });
            case 'lastUpdated':
                return sorted.sort((a, b)=>{
                    const comparison = new Date(a.lastUpdated).getTime() - new Date(b.lastUpdated).getTime();
                    return sort.direction === 'desc' ? -comparison : comparison;
                });
            case 'title':
                return sorted.sort((a, b)=>{
                    const comparison = a.title.localeCompare(b.title);
                    return sort.direction === 'desc' ? -comparison : comparison;
                });
            default:
                return sorted;
        }
    }
    /**
   * Sort by relevance based on search query
   */ sortByRelevance(games, query) {
        if (!query.trim()) {
            // If no query, sort by popularity (tag count) and then alphabetically
            return games.sort((a, b)=>{
                const aPopularity = a.tags.length;
                const bPopularity = b.tags.length;
                if (aPopularity !== bPopularity) {
                    return bPopularity - aPopularity;
                }
                return a.title.localeCompare(b.title);
            });
        }
        const queryLower = query.toLowerCase();
        return games.sort((a, b)=>{
            let scoreA = 0;
            let scoreB = 0;
            // Title exact match (highest priority)
            if (a.title.toLowerCase() === queryLower) scoreA += 100;
            if (b.title.toLowerCase() === queryLower) scoreB += 100;
            // Title starts with query
            if (a.title.toLowerCase().startsWith(queryLower)) scoreA += 50;
            if (b.title.toLowerCase().startsWith(queryLower)) scoreB += 50;
            // Title contains query
            if (a.title.toLowerCase().includes(queryLower)) scoreA += 25;
            if (b.title.toLowerCase().includes(queryLower)) scoreB += 25;
            // Tag exact match
            if (a.tags.some((tag)=>tag.toLowerCase() === queryLower)) scoreA += 20;
            if (b.tags.some((tag)=>tag.toLowerCase() === queryLower)) scoreB += 20;
            // Tag contains query
            if (a.tags.some((tag)=>tag.toLowerCase().includes(queryLower))) scoreA += 10;
            if (b.tags.some((tag)=>tag.toLowerCase().includes(queryLower))) scoreB += 10;
            // Learning objectives contain query
            if (a.learningObjectives.some((obj)=>obj.toLowerCase().includes(queryLower))) scoreA += 5;
            if (b.learningObjectives.some((obj)=>obj.toLowerCase().includes(queryLower))) scoreB += 5;
            // Description contains query
            if (a.description.toLowerCase().includes(queryLower)) scoreA += 2;
            if (b.description.toLowerCase().includes(queryLower)) scoreB += 2;
            return scoreB - scoreA;
        });
    }
    /**
   * Parse age range string to min/max values
   */ parseAgeRange(range) {
        const rangeMap = {
            '2-3': [
                2,
                3
            ],
            '3-4': [
                3,
                4
            ],
            '4-5': [
                4,
                5
            ],
            '5-6': [
                5,
                6
            ],
            '6+': [
                6,
                10
            ]
        };
        return rangeMap[range] || [
            0,
            10
        ];
    }
    /**
   * Parse duration range string to min/max values (in minutes)
   */ parseDurationRange(range) {
        const rangeMap = {
            'quick': [
                0,
                5
            ],
            'short': [
                5,
                10
            ],
            'medium': [
                10,
                15
            ],
            'long': [
                15,
                60
            ]
        };
        return rangeMap[range] || [
            0,
            60
        ];
    }
    /**
   * Get facet options with counts for sidebar
   */ getFacetOptions(currentFilters = {}) {
        const baseGames = this.search(currentFilters.query || '', currentFilters);
        return {
            ageRanges: [
                {
                    range: '2-3',
                    label: '2-3 years',
                    count: this.countGamesInAgeRange(baseGames, '2-3')
                },
                {
                    range: '3-4',
                    label: '3-4 years',
                    count: this.countGamesInAgeRange(baseGames, '3-4')
                },
                {
                    range: '4-5',
                    label: '4-5 years',
                    count: this.countGamesInAgeRange(baseGames, '4-5')
                },
                {
                    range: '5-6',
                    label: '5-6 years',
                    count: this.countGamesInAgeRange(baseGames, '5-6')
                },
                {
                    range: '6+',
                    label: '6+ years',
                    count: this.countGamesInAgeRange(baseGames, '6+')
                }
            ].filter((item)=>item.count > 0),
            durations: [
                {
                    range: 'quick',
                    label: 'Quick (‚â§5 min)',
                    count: this.countGamesInDurationRange(baseGames, 'quick')
                },
                {
                    range: 'short',
                    label: 'Short (5-10 min)',
                    count: this.countGamesInDurationRange(baseGames, 'short')
                },
                {
                    range: 'medium',
                    label: 'Medium (10-15 min)',
                    count: this.countGamesInDurationRange(baseGames, 'medium')
                },
                {
                    range: 'long',
                    label: 'Long (15+ min)',
                    count: this.countGamesInDurationRange(baseGames, 'long')
                }
            ].filter((item)=>item.count > 0),
            skillLevels: [
                {
                    level: 'beginner',
                    label: 'Beginner',
                    count: this.countGamesBySkillLevel(baseGames, 'beginner')
                },
                {
                    level: 'intermediate',
                    label: 'Intermediate',
                    count: this.countGamesBySkillLevel(baseGames, 'intermediate')
                },
                {
                    level: 'advanced',
                    label: 'Advanced',
                    count: this.countGamesBySkillLevel(baseGames, 'advanced')
                }
            ].filter((item)=>item.count > 0),
            features: [
                {
                    feature: 'audio',
                    label: 'Audio Support',
                    count: this.countGamesByFeature(baseGames, 'audio')
                },
                {
                    feature: 'interactive',
                    label: 'Interactive',
                    count: this.countGamesByFeature(baseGames, 'interactive')
                },
                {
                    feature: 'visuals',
                    label: 'Rich Visuals',
                    count: this.countGamesByFeature(baseGames, 'visuals')
                },
                {
                    feature: 'multiplayer',
                    label: 'Multiplayer',
                    count: this.countGamesByFeature(baseGames, 'multiplayer')
                }
            ].filter((item)=>item.count > 0)
        };
    }
    /**
   * Helper methods for counting games by facet criteria
   */ countGamesInAgeRange(games, range) {
        const [minAge, maxAge] = this.parseAgeRange(range);
        return games.filter((game)=>game.ageRange[0] <= maxAge && game.ageRange[1] >= minAge).length;
    }
    countGamesInDurationRange(games, range) {
        const [minDuration, maxDuration] = this.parseDurationRange(range);
        return games.filter((game)=>game.estimatedDuration >= minDuration && game.estimatedDuration <= maxDuration).length;
    }
    countGamesBySkillLevel(games, level) {
        return games.filter((game)=>game.skillLevel === level).length;
    }
    countGamesByFeature(games, feature) {
        return games.filter((game)=>{
            switch(feature){
                case 'audio':
                    return game.hasAudio;
                case 'interactive':
                    return game.isInteractive;
                case 'visuals':
                    return game.hasVisuals;
                case 'multiplayer':
                    return game.supportsMultiplayer;
                default:
                    return false;
            }
        }).length;
    }
    buildFacet(games, field) {
        const counts = games.reduce((acc, game)=>{
            const value = game[field];
            acc[value] = (acc[value] || 0) + 1;
            return acc;
        }, {});
        return Object.entries(counts).map(([value, count])=>({
                value,
                count
            })).sort((a, b)=>b.count - a.count);
    }
    buildTagFacets(games) {
        const tagCounts = games.reduce((acc, game)=>{
            game.tags.forEach((tag)=>{
                acc[tag] = (acc[tag] || 0) + 1;
            });
            return acc;
        }, {});
        return Object.entries(tagCounts).map(([tag, count])=>({
                tag,
                count
            })).sort((a, b)=>b.count - a.count);
    }
    buildAgeRangeFacets(games) {
        const ranges = [
            {
                label: '2-3 years',
                min: 2,
                max: 3
            },
            {
                label: '3-4 years',
                min: 3,
                max: 4
            },
            {
                label: '4-5 years',
                min: 4,
                max: 5
            },
            {
                label: '5-6 years',
                min: 5,
                max: 6
            },
            {
                label: '6+ years',
                min: 6,
                max: 10
            }
        ];
        return ranges.map((range)=>({
                ...range,
                count: games.filter((g)=>g.ageRange[0] <= range.max && g.ageRange[1] >= range.min).length
            })).filter((range)=>range.count > 0);
    }
    /**
   * Parse natural language query into structured filters
   */ parseNaturalLanguageQuery(query) {
        const queryLower = query.toLowerCase();
        const result = {};
        // Extract skill level
        if (queryLower.includes('beginner')) result.skillLevel = 'beginner';
        else if (queryLower.includes('intermediate')) result.skillLevel = 'intermediate';
        else if (queryLower.includes('advanced')) result.skillLevel = 'advanced';
        // Extract duration
        if (queryLower.includes('quick') || queryLower.includes('under 5')) result.duration = 'quick';
        else if (queryLower.includes('short') || queryLower.includes('5-10')) result.duration = 'short';
        else if (queryLower.includes('medium') || queryLower.includes('10-15')) result.duration = 'medium';
        else if (queryLower.includes('long') || queryLower.includes('15+')) result.duration = 'long';
        // Extract features
        const features = [];
        if (queryLower.includes('audio')) features.push('audio');
        if (queryLower.includes('multiplayer')) features.push('multiplayer');
        if (queryLower.includes('interactive')) features.push('interactive');
        if (queryLower.includes('visual')) features.push('visuals');
        if (features.length > 0) result.features = features;
        // Extract subject
        Object.keys(SUBJECTS).forEach((key)=>{
            if (queryLower.includes(key.toLowerCase())) {
                result.subject = key;
            }
        });
        // Extract age range
        const ageMatch = queryLower.match(/(\d+)[-+]?\s*(?:years?|yrs?)?/);
        if (ageMatch) {
            const age = parseInt(ageMatch[1]);
            if (age >= 2 && age <= 6) {
                result.ageRange = [
                    age,
                    age + 1
                ];
            }
        }
        return result;
    }
    /**
   * Get recommended games based on query and filters
   * Falls back to popular games if no matches found
   */ getRecommendedGames(query = '', filters = {}) {
        // First try exact matches
        const exactMatches = this.searchWithFacets(query, filters);
        if (exactMatches.length > 0) {
            return exactMatches.map((game)=>({
                    game,
                    score: 1,
                    reason: 'Exact match'
                }));
        }
        // Try natural language parsing
        const parsedQuery = this.parseNaturalLanguageQuery(query);
        const naturalMatches = this.searchWithFacets('', {
            ...filters,
            skillLevels: parsedQuery.skillLevel ? [
                parsedQuery.skillLevel
            ] : undefined,
            subjects: parsedQuery.subject ? [
                parsedQuery.subject
            ] : undefined,
            features: parsedQuery.features,
            ageRange: parsedQuery.ageRange
        });
        if (naturalMatches.length > 0) {
            return naturalMatches.map((game)=>({
                    game,
                    score: 0.8,
                    reason: 'Natural language match'
                }));
        }
        // Fallback to popular games
        const popularGames = this.getPopularGames();
        return popularGames.map((game)=>({
                game,
                score: 0.6,
                reason: 'Popular game'
            }));
    }
    /**
   * Get popular games based on completion rate and engagement
   */ getPopularGames() {
        // Sort games by tag count (proxy for popularity) and completion rate
        return [
            ...this.games
        ].sort((a, b)=>{
            const aScore = a.tags.length;
            const bScore = b.tags.length;
            return bScore - aScore;
        }).slice(0, 5); // Return top 5 games
    }
}
const gameDiscovery = new GameDiscoveryEngine();
const GameUtils = {
    /**
   * Get all games grouped by subject (for compatibility)
   */ getGamesBySubjects () {
        return Object.keys(SUBJECTS).reduce((acc, subject)=>{
            acc[subject] = gameDiscovery.getGamesBySubject(subject);
            return acc;
        }, {});
    },
    /**
   * Get game count by subject
   */ getGameCountBySubject (subject) {
        return gameDiscovery.getGamesBySubject(subject).length;
    },
    /**
   * Find game by ID
   */ getGameById (id) {
        return GAMES.find((game)=>game.id === id);
    },
    /**
   * Get prerequisites for a game
   */ getGamePrerequisites (gameId) {
        const game = this.getGameById(gameId);
        if (!game?.prerequisites) return [];
        return game.prerequisites.map((id)=>this.getGameById(id)).filter(Boolean);
    }
};
const GAME_CATEGORIES = Object.keys(SUBJECTS).map((subject)=>{
    const subjectGames = gameDiscovery.getGamesBySubject(subject);
    return {
        key: subject.toLowerCase().replace(/\s+/g, '-'),
        title: subject,
        description: `${subject} games and activities`,
        emoji: SUBJECTS[subject].icon,
        color: SUBJECTS[subject].color,
        subject: subject,
        subgames: subjectGames.map((game)=>({
                title: game.title,
                description: game.description,
                href: game.href,
                emoji: game.emoji,
                color: game.color
            }))
    };
});

//# sourceMappingURL=data:application/json;base64,