{"version":3,"sources":["D:\\Projects\\family-oriented\\src\\context\\UserContext.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';\r\nimport { createClient } from '@/lib/supabase/client';\r\nimport { User } from '@supabase/supabase-js';\r\nimport type { Database } from '@/lib/supabase/database.types';\r\nimport { logger } from '@/utils/logger';\r\nimport { useRouter } from 'next/navigation';\r\nimport { Box } from '@mui/material';\r\nimport { \r\n  getDemoConfig, \r\n  createDemoSubscriptionPlan, \r\n  createDemoAvatars, \r\n  createDemoRoles \r\n} from '@/utils/demoConfig';\r\n\r\n// Types\r\ntype Avatar = Database['public']['Tables']['avatars']['Row'];\r\ntype UserProfile = Database['public']['Tables']['users']['Row'];\r\n\r\n/**\r\n * Extended user context type for roles and subscription tier\r\n */\r\ninterface Role {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n}\r\n\r\ninterface SubscriptionPlan {\r\n  id: string;\r\n  name: string;\r\n  tier: string;\r\n  avatar_limit: number;\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  features_included: any;\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  [key: string]: any;\r\n}\r\n\r\ninterface OrgInfo {\r\n  id: string;\r\n  name: string;\r\n  subscriptionPlan: SubscriptionPlan | null;\r\n}\r\n\r\n/**\r\n * Consolidated loading state for better UX\r\n */\r\ninterface LoadingState {\r\n  user: boolean;\r\n  roles: boolean;\r\n  avatars: boolean;\r\n  // Helper to check if everything is ready for role-based rendering\r\n  isReady: boolean;\r\n}\r\n\r\n/**\r\n * Extended user context type for roles and subscription tier, with View As support\r\n */\r\ninterface ExtendedUserContextType extends UserContextType {\r\n  roles: Role[];\r\n  org: OrgInfo | null;\r\n  hasRole: (roleName: string) => boolean;\r\n  canAccess: (feature: string) => boolean;\r\n  getTierLimit: (feature: string) => number | undefined;\r\n  // View As state and methods\r\n  viewAsRole: string | null;\r\n  viewAsAvatar: Avatar | null;\r\n  isViewAs: boolean;\r\n  setViewAsRole: (role: string | null) => void;\r\n  setViewAsAvatar: (avatar: Avatar | null) => void;\r\n  resetViewAs: () => void;\r\n  // Enhanced loading state\r\n  loadingState: LoadingState;\r\n}\r\n\r\ninterface UserContextType {\r\n  user: User | null;\r\n  userProfile: UserProfile | null;\r\n  avatars: Avatar[];\r\n  currentAvatar: Avatar | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  \r\n  // Actions\r\n  setCurrentAvatar: (avatar: Avatar | null) => void;\r\n  createAvatar: (name: string) => Promise<Avatar | null>;\r\n  refreshAvatars: () => Promise<void>;\r\n  signOut: () => Promise<void>;\r\n}\r\n\r\nconst UserContext = createContext<UserContextType | undefined>(undefined);\r\n\r\n/**\r\n * User provider that manages authentication state and avatar context\r\n * Integrates with Supabase for persistent user and avatar management\r\n * \r\n * Enhanced with:\r\n * - Consolidated loading states\r\n * - Proper demo mode support\r\n * - Elimination of flashing UI elements\r\n */\r\nexport function UserProvider({ children }: { children: ReactNode }) {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\r\n  const [avatars, setAvatars] = useState<Avatar[]>([]);\r\n  const [currentAvatar, setCurrentAvatar] = useState<Avatar | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [roles, setRoles] = useState<Role[]>([]);\r\n  const [org, setOrg] = useState<OrgInfo | null>(null);\r\n  const router = useRouter();\r\n  const [demoMode, setDemoMode] = useState<boolean>(false);\r\n  \r\n  // View As state\r\n  const [viewAsRole, setViewAsRole] = useState<string | null>(null);\r\n  const [viewAsAvatar, setViewAsAvatar] = useState<Avatar | null>(null);\r\n\r\n  // Consolidated loading state\r\n  const [loadingState, setLoadingState] = useState<LoadingState>({\r\n    user: true,\r\n    roles: true,\r\n    avatars: true,\r\n    isReady: false\r\n  });\r\n\r\n  const supabase = createClient();\r\n\r\n  // Helper to update loading state\r\n  const updateLoadingState = useCallback((updates: Partial<LoadingState>) => {\r\n    setLoadingState(prev => {\r\n      const newState = { ...prev, ...updates };\r\n      // Calculate if everything is ready for role-based rendering\r\n      // Only user and roles are required for isReady - avatars can still be loading\r\n      newState.isReady = !newState.user && !newState.roles;\r\n      \r\n      // Debug logging for loading state changes\r\n      console.log('UserContext: Loading state updated:', newState);\r\n      \r\n      return newState;\r\n    });\r\n  }, []);\r\n\r\n  // Load user profile from database\r\n  const loadUserProfile = useCallback(async (userId: string) => {\r\n    try {\r\n      logger.debug('🔍 Loading user profile for ID:', userId);\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .select('*')\r\n        .eq('id', userId)\r\n        .single();\r\n\r\n      logger.debug('📊 User profile query result:', { data, error });\r\n      \r\n      if (error) throw error;\r\n      setUserProfile(data);\r\n      logger.debug('✅ User profile loaded successfully');\r\n    } catch (err) {\r\n      logger.error('❌ Error loading user profile:', err);\r\n      throw err; // Re-throw to trigger fallback in loadDemoUser\r\n    }\r\n  }, [supabase]);\r\n\r\n  // Load avatars for the current user\r\n  const loadAvatars = useCallback(async (userId: string) => {\r\n    try {\r\n      console.log('UserContext: Loading avatars for user:', userId);\r\n      updateLoadingState({ avatars: true });\r\n      const { data, error } = await supabase\r\n        .from('avatars')\r\n        .select('*')\r\n        .eq('user_id', userId)\r\n        .order('created_at', { ascending: true });\r\n\r\n      if (error) throw error;\r\n      \r\n      console.log('UserContext: Avatars loaded successfully:', data?.length || 0);\r\n      setAvatars(data || []);\r\n      \r\n      // Set first avatar as current if none selected and we have avatars\r\n      if (data && data.length > 0) {\r\n        setCurrentAvatar(prev => prev || data[0]);\r\n      }\r\n    } catch (err) {\r\n      logger.error('Error loading avatars:', err);\r\n      console.log('UserContext: Avatar loading failed:', err);\r\n      setError('Failed to load avatars');\r\n      setAvatars([]);\r\n    } finally {\r\n      console.log('UserContext: Avatar loading completed');\r\n      updateLoadingState({ avatars: false });\r\n    }\r\n  }, [supabase, updateLoadingState]);\r\n\r\n  // Fetch roles and org info\r\n  const fetchRolesAndOrg = useCallback(async (userId: string) => {\r\n    try {\r\n      updateLoadingState({ roles: true });\r\n      \r\n      // Fetch user profile from public.users\r\n      const { data: userProfileData, error: userProfileError } = await supabase\r\n        .from('users')\r\n        .select('id, org_id')\r\n        .eq('id', userId)\r\n        .single();\r\n      if (userProfileError) throw userProfileError;\r\n      const orgId = userProfileData?.org_id;\r\n      \r\n      // Fetch org info and subscription plan\r\n      let orgInfo: OrgInfo | null = null;\r\n      if (orgId) {\r\n        const { data: orgData, error: orgError } = await supabase\r\n          .from('organizations')\r\n          .select('id, name, subscription_plan_id')\r\n          .eq('id', orgId)\r\n          .single();\r\n        if (orgError) throw orgError;\r\n        \r\n        let subscriptionPlan: SubscriptionPlan | null = null;\r\n        if (orgData?.subscription_plan_id) {\r\n          const { data: planData, error: planError } = await supabase\r\n            .from('subscription_plans')\r\n            .select('*')\r\n            .eq('id', orgData.subscription_plan_id)\r\n            .single();\r\n          if (planError) throw planError;\r\n          subscriptionPlan = planData;\r\n        }\r\n        \r\n        orgInfo = {\r\n          id: orgData.id,\r\n          name: orgData.name,\r\n          subscriptionPlan,\r\n        };\r\n      }\r\n      setOrg(orgInfo);\r\n      \r\n      // Fetch user roles from user_policies -> permission_policies\r\n      const { data: userPolicies, error: userPoliciesError } = await supabase\r\n        .from('user_policies')\r\n        .select('policy_id, permission_policies(id, policy_name, description)')\r\n        .eq('user_id', userId);\r\n      if (userPoliciesError) throw userPoliciesError;\r\n      \r\n      const userRoles: Role[] = (userPolicies || []).map((up: any) => ({\r\n        id: up.permission_policies.id,\r\n        name: up.permission_policies.policy_name,\r\n        description: up.permission_policies.description,\r\n      }));\r\n      setRoles(userRoles);\r\n      \r\n    } catch (err) {\r\n      logger.error('Error fetching roles/org info:', err);\r\n      setOrg(null);\r\n      setRoles([]);\r\n      setError('Failed to load organization or roles.');\r\n    } finally {\r\n      updateLoadingState({ roles: false });\r\n    }\r\n  }, [supabase, updateLoadingState]);\r\n\r\n  // Enhanced demo user/org/roles fallback\r\n  const loadDemoUserContext = useCallback(async () => {\r\n    try {\r\n      updateLoadingState({ user: true, roles: true, avatars: true });\r\n      setDemoMode(true);\r\n      \r\n      // Try to load demo user/org/roles from DB, fallback to hardcoded\r\n      try {\r\n        // Try to find a demo user in the users table\r\n        const { data: demoUsers } = await supabase\r\n          .from('users')\r\n          .select('*')\r\n          .ilike('email', '%demo%');\r\n        const demoUser = demoUsers && demoUsers.length > 0 ? demoUsers[0] : null;\r\n        \r\n        // Try to find a demo org\r\n        let demoOrg = null;\r\n        let demoPlan = null;\r\n        if (demoUser && demoUser.org_id) {\r\n          const { data: orgData } = await supabase\r\n            .from('organizations')\r\n            .select('*')\r\n            .eq('id', demoUser.org_id)\r\n            .single();\r\n          demoOrg = orgData;\r\n          if (orgData && orgData.subscription_plan_id) {\r\n            const { data: planData } = await supabase\r\n              .from('subscription_plans')\r\n              .select('*')\r\n              .eq('id', orgData.subscription_plan_id)\r\n              .single();\r\n            demoPlan = planData;\r\n          }\r\n        }\r\n        \r\n        // Try to find demo roles\r\n        let demoRoles: Role[] = [];\r\n        if (demoUser) {\r\n          const { data: userPolicies } = await supabase\r\n            .from('user_policies')\r\n            .select('policy_id, permission_policies(id, policy_name, description)')\r\n            .eq('user_id', demoUser.id);\r\n          demoRoles = (userPolicies || []).map((up: any) => ({\r\n            id: up.permission_policies.id,\r\n            name: up.permission_policies.policy_name,\r\n            description: up.permission_policies.description,\r\n          }));\r\n        }\r\n        \r\n        // Set context state from database\r\n        if (demoUser) {\r\n          // Convert database user to Supabase User format\r\n          const supabaseUser = {\r\n            ...demoUser,\r\n            app_metadata: {},\r\n            user_metadata: {},\r\n            aud: 'authenticated'\r\n          } as any;\r\n          setUser(supabaseUser);\r\n          setUserProfile(demoUser);\r\n          \r\n          // Always ensure demo org with subscription plan exists\r\n          const ensuredDemoOrg = demoOrg && demoPlan ? \r\n            { id: demoOrg.id, name: demoOrg.name, subscriptionPlan: demoPlan } :\r\n            (() => {\r\n              // Use configurable demo organization for database users too\r\n              const demoConfig = getDemoConfig();\r\n              const subscriptionPlan = createDemoSubscriptionPlan(demoConfig);\r\n              return {\r\n                id: `${demoUser.id}-org`, \r\n                name: demoConfig.orgName, \r\n                subscriptionPlan \r\n              };\r\n            })();\r\n          \r\n          console.log('Demo org being set for database user:', ensuredDemoOrg);\r\n          setOrg(ensuredDemoOrg);\r\n          setRoles(demoRoles.length > 0 ? demoRoles : [\r\n            { id: '1', name: 'account_owner', description: 'Full administrative access' },\r\n            { id: '2', name: 'org_admin', description: 'Organization management' }\r\n          ]);\r\n          // Load demo avatars\r\n          await loadAvatars(demoUser.id);\r\n          return;\r\n        }\r\n      } catch (dbError) {\r\n        logger.warn('Database demo user not found, using hardcoded fallback:', dbError);\r\n        console.log('Demo mode fallback triggered:', dbError);\r\n      }\r\n      \r\n      // Fallback to configurable demo context\r\n      console.log('UserContext: Creating demo user from configuration');\r\n      \r\n      // Get demo configuration (can be controlled via environment variables or localStorage)\r\n      const demoConfig = getDemoConfig();\r\n      console.log('Demo configuration loaded:', demoConfig);\r\n      \r\n      // Create demo user\r\n      const demoUser = { id: demoConfig.id, email: demoConfig.email, name: demoConfig.name } as any;\r\n      setUser(demoUser);\r\n      setUserProfile({ \r\n        id: demoConfig.id, \r\n        email: demoConfig.email, \r\n        name: demoConfig.name,\r\n        org_id: `${demoConfig.id}-org` \r\n      } as any);\r\n      \r\n      // Create demo organization with appropriate subscription plan\r\n      const subscriptionPlan = createDemoSubscriptionPlan(demoConfig);\r\n      const demoOrg = { \r\n        id: `${demoConfig.id}-org`, \r\n        name: demoConfig.orgName, \r\n        subscriptionPlan \r\n      };\r\n      \r\n      logger.info(`Setting demo org for ${demoConfig.tier} tier:`, demoOrg);\r\n      setOrg(demoOrg);\r\n      console.log('Demo org set:', demoOrg);\r\n      \r\n      // Create demo roles based on configuration\r\n      const demoRoles = createDemoRoles(demoConfig);\r\n      setRoles(demoRoles);\r\n      console.log('Demo roles set:', demoRoles);\r\n      \r\n      // Create demo avatars based on configuration\r\n      const demoAvatars = createDemoAvatars(demoConfig);\r\n      setAvatars(demoAvatars);\r\n      if (demoAvatars.length > 0) {\r\n        setCurrentAvatar(demoAvatars[0]);\r\n      }\r\n      console.log(`Demo avatars created: ${demoAvatars.length}`);\r\n      \r\n    } catch (err) {\r\n      logger.error('Error in demo user context:', err);\r\n      setError('Failed to initialize demo mode');\r\n    } finally {\r\n      // Complete all loading states for demo mode\r\n      console.log('Demo mode initialization complete, updating loading states');\r\n      updateLoadingState({ user: false, roles: false, avatars: false });\r\n    }\r\n  }, [supabase, loadAvatars, updateLoadingState]);\r\n\r\n  // Main user loading effect\r\n  useEffect(() => {\r\n    const loadUser = async () => {\r\n      try {\r\n        updateLoadingState({ user: true });\r\n        setError(null);\r\n        \r\n        const { data: { session } } = await supabase.auth.getSession();\r\n        if (session?.user) {\r\n          // Real user authentication\r\n          setUser(session.user);\r\n          updateLoadingState({ user: false });\r\n          await loadUserProfile(session.user.id);\r\n          \r\n          // Load roles and avatars in parallel\r\n          await Promise.all([\r\n            fetchRolesAndOrg(session.user.id),\r\n            loadAvatars(session.user.id)\r\n          ]);\r\n        } else {\r\n          // No session - load demo mode for development\r\n          logger.info('No user session found, loading demo mode');\r\n          console.log('UserContext: Starting demo mode load');\r\n          await loadDemoUserContext();\r\n          console.log('UserContext: Demo mode load completed');\r\n        }\r\n      } catch (err) {\r\n        logger.error('Error loading user:', err);\r\n        setError('Failed to load user context.');\r\n        updateLoadingState({ user: false, roles: false, avatars: false });\r\n      }\r\n    };\r\n    \r\n    loadUser();\r\n\r\n    // Listen for auth changes\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {\r\n      if (event === 'SIGNED_IN' && session?.user) {\r\n        setUser(session.user);\r\n        updateLoadingState({ user: false });\r\n        await loadUserProfile(session.user.id);\r\n        \r\n        // Load roles and avatars in parallel\r\n        await Promise.all([\r\n          fetchRolesAndOrg(session.user.id),\r\n          loadAvatars(session.user.id)\r\n        ]);\r\n      } else if (event === 'SIGNED_OUT') {\r\n        setUser(null);\r\n        setUserProfile(null);\r\n        setAvatars([]);\r\n        setCurrentAvatar(null);\r\n        setRoles([]);\r\n        setOrg(null);\r\n        // Load demo user for continued development\r\n        await loadDemoUserContext();\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    };\r\n  }, [loadUserProfile, loadDemoUserContext, supabase.auth, loadAvatars, fetchRolesAndOrg, updateLoadingState]);\r\n\r\n  // Utility functions\r\n  const hasRole = useCallback((roleName: string) => {\r\n    // Only return true if we're ready and actually have the role\r\n    return loadingState.isReady && roles.some(r => r.name === roleName);\r\n  }, [roles, loadingState.isReady]);\r\n  \r\n  const canAccess = useCallback((feature: string) => {\r\n    // Only return true if we're ready and have access\r\n    if (!loadingState.isReady || !org?.subscriptionPlan) return false;\r\n    const features = org.subscriptionPlan.features_included || {};\r\n    return features[feature] === true;\r\n  }, [org, loadingState.isReady]);\r\n  \r\n  const getTierLimit = useCallback((feature: string) => {\r\n    return org?.subscriptionPlan?.[`${feature}_limit`];\r\n  }, [org]);\r\n\r\n  // Create a new avatar with subscription limit checking\r\n  const createAvatar = async (name: string): Promise<Avatar | null> => {\r\n    if (!user) {\r\n      setError('Must be logged in to create avatar');\r\n      return null;\r\n    }\r\n\r\n    // Check subscription limits before creating avatar\r\n    const currentAvatarsCount = avatars.length;\r\n    if (org?.subscriptionPlan) {\r\n      const avatarLimit = org.subscriptionPlan.avatar_limit || 5;\r\n      if (currentAvatarsCount >= avatarLimit) {\r\n        const tierName = org.subscriptionPlan.tier || 'current plan';\r\n        setError(`Avatar limit reached (${currentAvatarsCount}/${avatarLimit}). Upgrade your ${tierName} to create more avatars.`);\r\n        return null;\r\n      }\r\n    }\r\n\r\n    try {\r\n      setError(null);\r\n      const { data, error } = await supabase\r\n        .from('avatars')\r\n        .insert({\r\n          user_id: user.id,\r\n          org_id: org?.id || null,\r\n          name: name.trim(),\r\n          theme_settings: {},\r\n          game_preferences: {}\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      \r\n      // Refresh avatars list\r\n      await loadAvatars(user.id);\r\n      \r\n      logger.info('Avatar created successfully:', {\r\n        avatarId: data.id,\r\n        avatarName: data.name,\r\n        currentCount: currentAvatarsCount + 1,\r\n        tier: org?.subscriptionPlan?.tier\r\n      });\r\n      \r\n      return data;\r\n    } catch (err) {\r\n      logger.error('Error creating avatar:', err);\r\n      setError(err instanceof Error ? err.message : 'Failed to create avatar');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Refresh avatars from database\r\n  const refreshAvatars = async () => {\r\n    if (user) {\r\n      await loadAvatars(user.id);\r\n    }\r\n  };\r\n\r\n  // Sign out the current user\r\n  const signOut = async () => {\r\n    try {\r\n      const { error } = await supabase.auth.signOut();\r\n      if (error) throw error;\r\n    } catch (err) {\r\n      logger.error('Error signing out:', err);\r\n      setError('Failed to sign out');\r\n    }\r\n  };\r\n\r\n  // View As functionality\r\n  const isViewAs = viewAsRole !== null || viewAsAvatar !== null;\r\n  const resetViewAs = () => {\r\n    setViewAsRole(null);\r\n    setViewAsAvatar(null);\r\n  };\r\n\r\n  const contextValue: ExtendedUserContextType = {\r\n    user,\r\n    userProfile,\r\n    avatars,\r\n    currentAvatar,\r\n    loading: !loadingState.isReady, // Simplified loading state for backward compatibility\r\n    error,\r\n    setCurrentAvatar,\r\n    createAvatar,\r\n    refreshAvatars,\r\n    signOut,\r\n    roles,\r\n    org,\r\n    hasRole,\r\n    canAccess,\r\n    getTierLimit,\r\n    viewAsRole,\r\n    viewAsAvatar,\r\n    isViewAs,\r\n    setViewAsRole,\r\n    setViewAsAvatar,\r\n    resetViewAs,\r\n    loadingState, // New: detailed loading state\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={contextValue}>\r\n      {demoMode && (\r\n        <Box sx={{ bgcolor: 'warning.main', color: 'black', p: 1, textAlign: 'center' }}>\r\n          <b>Demo Mode:</b> You are using a demo user context. Features may be simulated.\r\n        </Box>\r\n      )}\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n}\r\n\r\n/**\r\n * Hook to access user context\r\n * Provides user authentication state and avatar management\r\n */\r\nexport function useUser(): ExtendedUserContextType {\r\n  const context = useContext(UserContext);\r\n  if (context === undefined) {\r\n    throw new Error('useUser must be used within a UserProvider');\r\n  }\r\n  return context as ExtendedUserContextType;\r\n}\r\n\r\n/**\r\n * Hook specifically for avatar context\r\n * Convenience hook for components that only need avatar information\r\n */\r\nexport function useAvatar() {\r\n  const { currentAvatar, avatars, setCurrentAvatar, createAvatar } = useUser();\r\n  return {\r\n    currentAvatar,\r\n    avatars,\r\n    setCurrentAvatar,\r\n    createAvatar\r\n  };\r\n}\r\n\r\n/**\r\n * Hook for role-based rendering with loading safety\r\n * Only returns true for roles when the user context is fully loaded\r\n */\r\nexport function useRoleGuard() {\r\n  const { hasRole, loadingState, roles } = useUser();\r\n  \r\n  const isReady = loadingState.isReady;\r\n  \r\n  const guardedHasRole = useCallback((roleName: string) => {\r\n    return isReady && hasRole(roleName);\r\n  }, [isReady, hasRole]);\r\n  \r\n  return {\r\n    hasRole: guardedHasRole,\r\n    isReady,\r\n    roles: isReady ? roles : []\r\n  };\r\n} "],"names":["UserProvider","useAvatar","useRoleGuard","useUser","UserContext","createContext","undefined","children","user","setUser","useState","userProfile","setUserProfile","avatars","setAvatars","currentAvatar","setCurrentAvatar","error","setError","roles","setRoles","org","setOrg","router","useRouter","demoMode","setDemoMode","viewAsRole","setViewAsRole","viewAsAvatar","setViewAsAvatar","loadingState","setLoadingState","isReady","supabase","createClient","updateLoadingState","useCallback","updates","prev","newState","console","log","loadUserProfile","userId","logger","debug","data","from","select","eq","single","err","loadAvatars","order","ascending","length","fetchRolesAndOrg","userProfileData","userProfileError","orgId","org_id","orgInfo","orgData","orgError","subscriptionPlan","subscription_plan_id","planData","planError","id","name","userPolicies","userPoliciesError","userRoles","map","up","permission_policies","policy_name","description","loadDemoUserContext","demoUsers","ilike","demoUser","demoOrg","demoPlan","demoRoles","supabaseUser","app_metadata","user_metadata","aud","ensuredDemoOrg","demoConfig","getDemoConfig","createDemoSubscriptionPlan","orgName","dbError","warn","email","info","tier","createDemoRoles","demoAvatars","createDemoAvatars","useEffect","loadUser","session","auth","getSession","Promise","all","subscription","onAuthStateChange","event","unsubscribe","hasRole","roleName","some","r","canAccess","feature","features","features_included","getTierLimit","createAvatar","currentAvatarsCount","avatarLimit","avatar_limit","tierName","insert","user_id","trim","theme_settings","game_preferences","avatarId","avatarName","currentCount","Error","message","refreshAvatars","signOut","isViewAs","resetViewAs","contextValue","loading","Provider","value","Box","sx","bgcolor","color","p","textAlign","b","context","useContext","guardedHasRole"],"mappings":"AAAA;;;;;;;;;;;;IAuGgBA,YAAY;eAAZA;;IAggBAC,SAAS;eAATA;;IAcAC,YAAY;eAAZA;;IA1BAC,OAAO;eAAPA;;;;+DAzlB8E;wBACjE;wBAGN;4BACG;0BACN;4BAMb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8EP,MAAMC,4BAAcC,IAAAA,oBAAa,EAA8BC;AAWxD,SAASN,aAAa,EAAEO,QAAQ,EAA2B;IAChE,MAAM,CAACC,MAAMC,QAAQ,GAAGC,IAAAA,eAAQ,EAAc;IAC9C,MAAM,CAACC,aAAaC,eAAe,GAAGF,IAAAA,eAAQ,EAAqB;IACnE,MAAM,CAACG,SAASC,WAAW,GAAGJ,IAAAA,eAAQ,EAAW,EAAE;IACnD,MAAM,CAACK,eAAeC,iBAAiB,GAAGN,IAAAA,eAAQ,EAAgB;IAClE,MAAM,CAACO,OAAOC,SAAS,GAAGR,IAAAA,eAAQ,EAAgB;IAClD,MAAM,CAACS,OAAOC,SAAS,GAAGV,IAAAA,eAAQ,EAAS,EAAE;IAC7C,MAAM,CAACW,KAAKC,OAAO,GAAGZ,IAAAA,eAAQ,EAAiB;IAC/C,MAAMa,SAASC,IAAAA,qBAAS;IACxB,MAAM,CAACC,UAAUC,YAAY,GAAGhB,IAAAA,eAAQ,EAAU;IAElD,gBAAgB;IAChB,MAAM,CAACiB,YAAYC,cAAc,GAAGlB,IAAAA,eAAQ,EAAgB;IAC5D,MAAM,CAACmB,cAAcC,gBAAgB,GAAGpB,IAAAA,eAAQ,EAAgB;IAEhE,6BAA6B;IAC7B,MAAM,CAACqB,cAAcC,gBAAgB,GAAGtB,IAAAA,eAAQ,EAAe;QAC7DF,MAAM;QACNW,OAAO;QACPN,SAAS;QACToB,SAAS;IACX;IAEA,MAAMC,WAAWC,IAAAA,oBAAY;IAE7B,iCAAiC;IACjC,MAAMC,qBAAqBC,IAAAA,kBAAW,EAAC,CAACC;QACtCN,gBAAgBO,CAAAA;YACd,MAAMC,WAAW;gBAAE,GAAGD,IAAI;gBAAE,GAAGD,OAAO;YAAC;YACvC,4DAA4D;YAC5D,8EAA8E;YAC9EE,SAASP,OAAO,GAAG,CAACO,SAAShC,IAAI,IAAI,CAACgC,SAASrB,KAAK;YAEpD,0CAA0C;YAC1CsB,QAAQC,GAAG,CAAC,uCAAuCF;YAEnD,OAAOA;QACT;IACF,GAAG,EAAE;IAEL,kCAAkC;IAClC,MAAMG,kBAAkBN,IAAAA,kBAAW,EAAC,OAAOO;QACzC,IAAI;YACFC,cAAM,CAACC,KAAK,CAAC,mCAAmCF;YAChD,MAAM,EAAEG,IAAI,EAAE9B,KAAK,EAAE,GAAG,MAAMiB,SAC3Bc,IAAI,CAAC,SACLC,MAAM,CAAC,KACPC,EAAE,CAAC,MAAMN,QACTO,MAAM;YAETN,cAAM,CAACC,KAAK,CAAC,iCAAiC;gBAAEC;gBAAM9B;YAAM;YAE5D,IAAIA,OAAO,MAAMA;YACjBL,eAAemC;YACfF,cAAM,CAACC,KAAK,CAAC;QACf,EAAE,OAAOM,KAAK;YACZP,cAAM,CAAC5B,KAAK,CAAC,iCAAiCmC;YAC9C,MAAMA,KAAK,+CAA+C;QAC5D;IACF,GAAG;QAAClB;KAAS;IAEb,oCAAoC;IACpC,MAAMmB,cAAchB,IAAAA,kBAAW,EAAC,OAAOO;QACrC,IAAI;YACFH,QAAQC,GAAG,CAAC,0CAA0CE;YACtDR,mBAAmB;gBAAEvB,SAAS;YAAK;YACnC,MAAM,EAAEkC,IAAI,EAAE9B,KAAK,EAAE,GAAG,MAAMiB,SAC3Bc,IAAI,CAAC,WACLC,MAAM,CAAC,KACPC,EAAE,CAAC,WAAWN,QACdU,KAAK,CAAC,cAAc;gBAAEC,WAAW;YAAK;YAEzC,IAAItC,OAAO,MAAMA;YAEjBwB,QAAQC,GAAG,CAAC,6CAA6CK,MAAMS,UAAU;YACzE1C,WAAWiC,QAAQ,EAAE;YAErB,mEAAmE;YACnE,IAAIA,QAAQA,KAAKS,MAAM,GAAG,GAAG;gBAC3BxC,iBAAiBuB,CAAAA,OAAQA,QAAQQ,IAAI,CAAC,EAAE;YAC1C;QACF,EAAE,OAAOK,KAAK;YACZP,cAAM,CAAC5B,KAAK,CAAC,0BAA0BmC;YACvCX,QAAQC,GAAG,CAAC,uCAAuCU;YACnDlC,SAAS;YACTJ,WAAW,EAAE;QACf,SAAU;YACR2B,QAAQC,GAAG,CAAC;YACZN,mBAAmB;gBAAEvB,SAAS;YAAM;QACtC;IACF,GAAG;QAACqB;QAAUE;KAAmB;IAEjC,2BAA2B;IAC3B,MAAMqB,mBAAmBpB,IAAAA,kBAAW,EAAC,OAAOO;QAC1C,IAAI;YACFR,mBAAmB;gBAAEjB,OAAO;YAAK;YAEjC,uCAAuC;YACvC,MAAM,EAAE4B,MAAMW,eAAe,EAAEzC,OAAO0C,gBAAgB,EAAE,GAAG,MAAMzB,SAC9Dc,IAAI,CAAC,SACLC,MAAM,CAAC,cACPC,EAAE,CAAC,MAAMN,QACTO,MAAM;YACT,IAAIQ,kBAAkB,MAAMA;YAC5B,MAAMC,QAAQF,iBAAiBG;YAE/B,uCAAuC;YACvC,IAAIC,UAA0B;YAC9B,IAAIF,OAAO;gBACT,MAAM,EAAEb,MAAMgB,OAAO,EAAE9C,OAAO+C,QAAQ,EAAE,GAAG,MAAM9B,SAC9Cc,IAAI,CAAC,iBACLC,MAAM,CAAC,kCACPC,EAAE,CAAC,MAAMU,OACTT,MAAM;gBACT,IAAIa,UAAU,MAAMA;gBAEpB,IAAIC,mBAA4C;gBAChD,IAAIF,SAASG,sBAAsB;oBACjC,MAAM,EAAEnB,MAAMoB,QAAQ,EAAElD,OAAOmD,SAAS,EAAE,GAAG,MAAMlC,SAChDc,IAAI,CAAC,sBACLC,MAAM,CAAC,KACPC,EAAE,CAAC,MAAMa,QAAQG,oBAAoB,EACrCf,MAAM;oBACT,IAAIiB,WAAW,MAAMA;oBACrBH,mBAAmBE;gBACrB;gBAEAL,UAAU;oBACRO,IAAIN,QAAQM,EAAE;oBACdC,MAAMP,QAAQO,IAAI;oBAClBL;gBACF;YACF;YACA3C,OAAOwC;YAEP,6DAA6D;YAC7D,MAAM,EAAEf,MAAMwB,YAAY,EAAEtD,OAAOuD,iBAAiB,EAAE,GAAG,MAAMtC,SAC5Dc,IAAI,CAAC,iBACLC,MAAM,CAAC,gEACPC,EAAE,CAAC,WAAWN;YACjB,IAAI4B,mBAAmB,MAAMA;YAE7B,MAAMC,YAAoB,AAACF,CAAAA,gBAAgB,EAAE,AAAD,EAAGG,GAAG,CAAC,CAACC,KAAa,CAAA;oBAC/DN,IAAIM,GAAGC,mBAAmB,CAACP,EAAE;oBAC7BC,MAAMK,GAAGC,mBAAmB,CAACC,WAAW;oBACxCC,aAAaH,GAAGC,mBAAmB,CAACE,WAAW;gBACjD,CAAA;YACA1D,SAASqD;QAEX,EAAE,OAAOrB,KAAK;YACZP,cAAM,CAAC5B,KAAK,CAAC,kCAAkCmC;YAC/C9B,OAAO;YACPF,SAAS,EAAE;YACXF,SAAS;QACX,SAAU;YACRkB,mBAAmB;gBAAEjB,OAAO;YAAM;QACpC;IACF,GAAG;QAACe;QAAUE;KAAmB;IAEjC,wCAAwC;IACxC,MAAM2C,sBAAsB1C,IAAAA,kBAAW,EAAC;QACtC,IAAI;YACFD,mBAAmB;gBAAE5B,MAAM;gBAAMW,OAAO;gBAAMN,SAAS;YAAK;YAC5Da,YAAY;YAEZ,iEAAiE;YACjE,IAAI;gBACF,6CAA6C;gBAC7C,MAAM,EAAEqB,MAAMiC,SAAS,EAAE,GAAG,MAAM9C,SAC/Bc,IAAI,CAAC,SACLC,MAAM,CAAC,KACPgC,KAAK,CAAC,SAAS;gBAClB,MAAMC,WAAWF,aAAaA,UAAUxB,MAAM,GAAG,IAAIwB,SAAS,CAAC,EAAE,GAAG;gBAEpE,yBAAyB;gBACzB,IAAIG,UAAU;gBACd,IAAIC,WAAW;gBACf,IAAIF,YAAYA,SAASrB,MAAM,EAAE;oBAC/B,MAAM,EAAEd,MAAMgB,OAAO,EAAE,GAAG,MAAM7B,SAC7Bc,IAAI,CAAC,iBACLC,MAAM,CAAC,KACPC,EAAE,CAAC,MAAMgC,SAASrB,MAAM,EACxBV,MAAM;oBACTgC,UAAUpB;oBACV,IAAIA,WAAWA,QAAQG,oBAAoB,EAAE;wBAC3C,MAAM,EAAEnB,MAAMoB,QAAQ,EAAE,GAAG,MAAMjC,SAC9Bc,IAAI,CAAC,sBACLC,MAAM,CAAC,KACPC,EAAE,CAAC,MAAMa,QAAQG,oBAAoB,EACrCf,MAAM;wBACTiC,WAAWjB;oBACb;gBACF;gBAEA,yBAAyB;gBACzB,IAAIkB,YAAoB,EAAE;gBAC1B,IAAIH,UAAU;oBACZ,MAAM,EAAEnC,MAAMwB,YAAY,EAAE,GAAG,MAAMrC,SAClCc,IAAI,CAAC,iBACLC,MAAM,CAAC,gEACPC,EAAE,CAAC,WAAWgC,SAASb,EAAE;oBAC5BgB,YAAY,AAACd,CAAAA,gBAAgB,EAAE,AAAD,EAAGG,GAAG,CAAC,CAACC,KAAa,CAAA;4BACjDN,IAAIM,GAAGC,mBAAmB,CAACP,EAAE;4BAC7BC,MAAMK,GAAGC,mBAAmB,CAACC,WAAW;4BACxCC,aAAaH,GAAGC,mBAAmB,CAACE,WAAW;wBACjD,CAAA;gBACF;gBAEA,kCAAkC;gBAClC,IAAII,UAAU;oBACZ,gDAAgD;oBAChD,MAAMI,eAAe;wBACnB,GAAGJ,QAAQ;wBACXK,cAAc,CAAC;wBACfC,eAAe,CAAC;wBAChBC,KAAK;oBACP;oBACAhF,QAAQ6E;oBACR1E,eAAesE;oBAEf,uDAAuD;oBACvD,MAAMQ,iBAAiBP,WAAWC,WAChC;wBAAEf,IAAIc,QAAQd,EAAE;wBAAEC,MAAMa,QAAQb,IAAI;wBAAEL,kBAAkBmB;oBAAS,IACjE,AAAC,CAAA;wBACC,4DAA4D;wBAC5D,MAAMO,aAAaC,IAAAA,yBAAa;wBAChC,MAAM3B,mBAAmB4B,IAAAA,sCAA0B,EAACF;wBACpD,OAAO;4BACLtB,IAAI,GAAGa,SAASb,EAAE,CAAC,IAAI,CAAC;4BACxBC,MAAMqB,WAAWG,OAAO;4BACxB7B;wBACF;oBACF,CAAA;oBAEFxB,QAAQC,GAAG,CAAC,yCAAyCgD;oBACrDpE,OAAOoE;oBACPtE,SAASiE,UAAU7B,MAAM,GAAG,IAAI6B,YAAY;wBAC1C;4BAAEhB,IAAI;4BAAKC,MAAM;4BAAiBQ,aAAa;wBAA6B;wBAC5E;4BAAET,IAAI;4BAAKC,MAAM;4BAAaQ,aAAa;wBAA0B;qBACtE;oBACD,oBAAoB;oBACpB,MAAMzB,YAAY6B,SAASb,EAAE;oBAC7B;gBACF;YACF,EAAE,OAAO0B,SAAS;gBAChBlD,cAAM,CAACmD,IAAI,CAAC,2DAA2DD;gBACvEtD,QAAQC,GAAG,CAAC,iCAAiCqD;YAC/C;YAEA,wCAAwC;YACxCtD,QAAQC,GAAG,CAAC;YAEZ,uFAAuF;YACvF,MAAMiD,aAAaC,IAAAA,yBAAa;YAChCnD,QAAQC,GAAG,CAAC,8BAA8BiD;YAE1C,mBAAmB;YACnB,MAAMT,WAAW;gBAAEb,IAAIsB,WAAWtB,EAAE;gBAAE4B,OAAON,WAAWM,KAAK;gBAAE3B,MAAMqB,WAAWrB,IAAI;YAAC;YACrF7D,QAAQyE;YACRtE,eAAe;gBACbyD,IAAIsB,WAAWtB,EAAE;gBACjB4B,OAAON,WAAWM,KAAK;gBACvB3B,MAAMqB,WAAWrB,IAAI;gBACrBT,QAAQ,GAAG8B,WAAWtB,EAAE,CAAC,IAAI,CAAC;YAChC;YAEA,8DAA8D;YAC9D,MAAMJ,mBAAmB4B,IAAAA,sCAA0B,EAACF;YACpD,MAAMR,UAAU;gBACdd,IAAI,GAAGsB,WAAWtB,EAAE,CAAC,IAAI,CAAC;gBAC1BC,MAAMqB,WAAWG,OAAO;gBACxB7B;YACF;YAEApB,cAAM,CAACqD,IAAI,CAAC,CAAC,qBAAqB,EAAEP,WAAWQ,IAAI,CAAC,MAAM,CAAC,EAAEhB;YAC7D7D,OAAO6D;YACP1C,QAAQC,GAAG,CAAC,iBAAiByC;YAE7B,2CAA2C;YAC3C,MAAME,YAAYe,IAAAA,2BAAe,EAACT;YAClCvE,SAASiE;YACT5C,QAAQC,GAAG,CAAC,mBAAmB2C;YAE/B,6CAA6C;YAC7C,MAAMgB,cAAcC,IAAAA,6BAAiB,EAACX;YACtC7E,WAAWuF;YACX,IAAIA,YAAY7C,MAAM,GAAG,GAAG;gBAC1BxC,iBAAiBqF,WAAW,CAAC,EAAE;YACjC;YACA5D,QAAQC,GAAG,CAAC,CAAC,sBAAsB,EAAE2D,YAAY7C,MAAM,EAAE;QAE3D,EAAE,OAAOJ,KAAK;YACZP,cAAM,CAAC5B,KAAK,CAAC,+BAA+BmC;YAC5ClC,SAAS;QACX,SAAU;YACR,4CAA4C;YAC5CuB,QAAQC,GAAG,CAAC;YACZN,mBAAmB;gBAAE5B,MAAM;gBAAOW,OAAO;gBAAON,SAAS;YAAM;QACjE;IACF,GAAG;QAACqB;QAAUmB;QAAajB;KAAmB;IAE9C,2BAA2B;IAC3BmE,IAAAA,gBAAS,EAAC;QACR,MAAMC,WAAW;YACf,IAAI;gBACFpE,mBAAmB;oBAAE5B,MAAM;gBAAK;gBAChCU,SAAS;gBAET,MAAM,EAAE6B,MAAM,EAAE0D,OAAO,EAAE,EAAE,GAAG,MAAMvE,SAASwE,IAAI,CAACC,UAAU;gBAC5D,IAAIF,SAASjG,MAAM;oBACjB,2BAA2B;oBAC3BC,QAAQgG,QAAQjG,IAAI;oBACpB4B,mBAAmB;wBAAE5B,MAAM;oBAAM;oBACjC,MAAMmC,gBAAgB8D,QAAQjG,IAAI,CAAC6D,EAAE;oBAErC,qCAAqC;oBACrC,MAAMuC,QAAQC,GAAG,CAAC;wBAChBpD,iBAAiBgD,QAAQjG,IAAI,CAAC6D,EAAE;wBAChChB,YAAYoD,QAAQjG,IAAI,CAAC6D,EAAE;qBAC5B;gBACH,OAAO;oBACL,8CAA8C;oBAC9CxB,cAAM,CAACqD,IAAI,CAAC;oBACZzD,QAAQC,GAAG,CAAC;oBACZ,MAAMqC;oBACNtC,QAAQC,GAAG,CAAC;gBACd;YACF,EAAE,OAAOU,KAAK;gBACZP,cAAM,CAAC5B,KAAK,CAAC,uBAAuBmC;gBACpClC,SAAS;gBACTkB,mBAAmB;oBAAE5B,MAAM;oBAAOW,OAAO;oBAAON,SAAS;gBAAM;YACjE;QACF;QAEA2F;QAEA,0BAA0B;QAC1B,MAAM,EAAEzD,MAAM,EAAE+D,YAAY,EAAE,EAAE,GAAG5E,SAASwE,IAAI,CAACK,iBAAiB,CAAC,OAAOC,OAAOP;YAC/E,IAAIO,UAAU,eAAeP,SAASjG,MAAM;gBAC1CC,QAAQgG,QAAQjG,IAAI;gBACpB4B,mBAAmB;oBAAE5B,MAAM;gBAAM;gBACjC,MAAMmC,gBAAgB8D,QAAQjG,IAAI,CAAC6D,EAAE;gBAErC,qCAAqC;gBACrC,MAAMuC,QAAQC,GAAG,CAAC;oBAChBpD,iBAAiBgD,QAAQjG,IAAI,CAAC6D,EAAE;oBAChChB,YAAYoD,QAAQjG,IAAI,CAAC6D,EAAE;iBAC5B;YACH,OAAO,IAAI2C,UAAU,cAAc;gBACjCvG,QAAQ;gBACRG,eAAe;gBACfE,WAAW,EAAE;gBACbE,iBAAiB;gBACjBI,SAAS,EAAE;gBACXE,OAAO;gBACP,2CAA2C;gBAC3C,MAAMyD;YACR;QACF;QAEA,OAAO;YACL+B,aAAaG,WAAW;QAC1B;IACF,GAAG;QAACtE;QAAiBoC;QAAqB7C,SAASwE,IAAI;QAAErD;QAAaI;QAAkBrB;KAAmB;IAE3G,oBAAoB;IACpB,MAAM8E,UAAU7E,IAAAA,kBAAW,EAAC,CAAC8E;QAC3B,6DAA6D;QAC7D,OAAOpF,aAAaE,OAAO,IAAId,MAAMiG,IAAI,CAACC,CAAAA,IAAKA,EAAE/C,IAAI,KAAK6C;IAC5D,GAAG;QAAChG;QAAOY,aAAaE,OAAO;KAAC;IAEhC,MAAMqF,YAAYjF,IAAAA,kBAAW,EAAC,CAACkF;QAC7B,kDAAkD;QAClD,IAAI,CAACxF,aAAaE,OAAO,IAAI,CAACZ,KAAK4C,kBAAkB,OAAO;QAC5D,MAAMuD,WAAWnG,IAAI4C,gBAAgB,CAACwD,iBAAiB,IAAI,CAAC;QAC5D,OAAOD,QAAQ,CAACD,QAAQ,KAAK;IAC/B,GAAG;QAAClG;QAAKU,aAAaE,OAAO;KAAC;IAE9B,MAAMyF,eAAerF,IAAAA,kBAAW,EAAC,CAACkF;QAChC,OAAOlG,KAAK4C,kBAAkB,CAAC,GAAGsD,QAAQ,MAAM,CAAC,CAAC;IACpD,GAAG;QAAClG;KAAI;IAER,uDAAuD;IACvD,MAAMsG,eAAe,OAAOrD;QAC1B,IAAI,CAAC9D,MAAM;YACTU,SAAS;YACT,OAAO;QACT;QAEA,mDAAmD;QACnD,MAAM0G,sBAAsB/G,QAAQ2C,MAAM;QAC1C,IAAInC,KAAK4C,kBAAkB;YACzB,MAAM4D,cAAcxG,IAAI4C,gBAAgB,CAAC6D,YAAY,IAAI;YACzD,IAAIF,uBAAuBC,aAAa;gBACtC,MAAME,WAAW1G,IAAI4C,gBAAgB,CAACkC,IAAI,IAAI;gBAC9CjF,SAAS,CAAC,sBAAsB,EAAE0G,oBAAoB,CAAC,EAAEC,YAAY,gBAAgB,EAAEE,SAAS,wBAAwB,CAAC;gBACzH,OAAO;YACT;QACF;QAEA,IAAI;YACF7G,SAAS;YACT,MAAM,EAAE6B,IAAI,EAAE9B,KAAK,EAAE,GAAG,MAAMiB,SAC3Bc,IAAI,CAAC,WACLgF,MAAM,CAAC;gBACNC,SAASzH,KAAK6D,EAAE;gBAChBR,QAAQxC,KAAKgD,MAAM;gBACnBC,MAAMA,KAAK4D,IAAI;gBACfC,gBAAgB,CAAC;gBACjBC,kBAAkB,CAAC;YACrB,GACCnF,MAAM,GACNE,MAAM;YAET,IAAIlC,OAAO,MAAMA;YAEjB,uBAAuB;YACvB,MAAMoC,YAAY7C,KAAK6D,EAAE;YAEzBxB,cAAM,CAACqD,IAAI,CAAC,gCAAgC;gBAC1CmC,UAAUtF,KAAKsB,EAAE;gBACjBiE,YAAYvF,KAAKuB,IAAI;gBACrBiE,cAAcX,sBAAsB;gBACpCzB,MAAM9E,KAAK4C,kBAAkBkC;YAC/B;YAEA,OAAOpD;QACT,EAAE,OAAOK,KAAK;YACZP,cAAM,CAAC5B,KAAK,CAAC,0BAA0BmC;YACvClC,SAASkC,eAAeoF,QAAQpF,IAAIqF,OAAO,GAAG;YAC9C,OAAO;QACT;IACF;IAEA,gCAAgC;IAChC,MAAMC,iBAAiB;QACrB,IAAIlI,MAAM;YACR,MAAM6C,YAAY7C,KAAK6D,EAAE;QAC3B;IACF;IAEA,4BAA4B;IAC5B,MAAMsE,UAAU;QACd,IAAI;YACF,MAAM,EAAE1H,KAAK,EAAE,GAAG,MAAMiB,SAASwE,IAAI,CAACiC,OAAO;YAC7C,IAAI1H,OAAO,MAAMA;QACnB,EAAE,OAAOmC,KAAK;YACZP,cAAM,CAAC5B,KAAK,CAAC,sBAAsBmC;YACnClC,SAAS;QACX;IACF;IAEA,wBAAwB;IACxB,MAAM0H,WAAWjH,eAAe,QAAQE,iBAAiB;IACzD,MAAMgH,cAAc;QAClBjH,cAAc;QACdE,gBAAgB;IAClB;IAEA,MAAMgH,eAAwC;QAC5CtI;QACAG;QACAE;QACAE;QACAgI,SAAS,CAAChH,aAAaE,OAAO;QAC9BhB;QACAD;QACA2G;QACAe;QACAC;QACAxH;QACAE;QACA6F;QACAI;QACAI;QACA/F;QACAE;QACA+G;QACAhH;QACAE;QACA+G;QACA9G;IACF;IAEA,qBACE,sBAAC3B,YAAY4I,QAAQ;QAACC,OAAOH;;YAC1BrH,0BACC,sBAACyH,aAAG;gBAACC,IAAI;oBAAEC,SAAS;oBAAgBC,OAAO;oBAASC,GAAG;oBAAGC,WAAW;gBAAS;;kCAC5E,qBAACC;kCAAE;;oBAAc;;;YAGpBjJ;;;AAGP;AAMO,SAASJ;IACd,MAAMsJ,UAAUC,IAAAA,iBAAU,EAACtJ;IAC3B,IAAIqJ,YAAYnJ,WAAW;QACzB,MAAM,IAAIkI,MAAM;IAClB;IACA,OAAOiB;AACT;AAMO,SAASxJ;IACd,MAAM,EAAEc,aAAa,EAAEF,OAAO,EAAEG,gBAAgB,EAAE2G,YAAY,EAAE,GAAGxH;IACnE,OAAO;QACLY;QACAF;QACAG;QACA2G;IACF;AACF;AAMO,SAASzH;IACd,MAAM,EAAEgH,OAAO,EAAEnF,YAAY,EAAEZ,KAAK,EAAE,GAAGhB;IAEzC,MAAM8B,UAAUF,aAAaE,OAAO;IAEpC,MAAM0H,iBAAiBtH,IAAAA,kBAAW,EAAC,CAAC8E;QAClC,OAAOlF,WAAWiF,QAAQC;IAC5B,GAAG;QAAClF;QAASiF;KAAQ;IAErB,OAAO;QACLA,SAASyC;QACT1H;QACAd,OAAOc,UAAUd,QAAQ,EAAE;IAC7B;AACF"}