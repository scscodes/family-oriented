{"version":3,"sources":["D:\\Projects\\family-oriented\\src\\app\\dashboard\\page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useAvatar, useUser, useRoleGuard } from \"@/context/UserContext\";\r\nimport { analyticsService, type LearningProgressData, type LearningPathRecommendation, type PerformanceMetrics } from \"@/utils/analyticsService\";\r\nimport { analyticsDebugger } from \"@/utils/analyticsDebug\";\r\nimport { logger } from \"@/utils/logger\";\r\nimport SubscriptionStatus from \"@/features/account/components/SubscriptionStatus\";\r\nimport { \r\n  Box, \r\n  Typography, \r\n  Paper, \r\n  CircularProgress, \r\n  Alert, \r\n  List, \r\n  ListItem, \r\n  ListItemText, \r\n  Button, \r\n  FormControl, \r\n  InputLabel, \r\n  Select, \r\n  MenuItem, \r\n  Card, \r\n  CardContent \r\n} from \"@mui/material\";\r\nimport type { SelectChangeEvent } from \"@mui/material/Select\";\r\nimport { PlayArrow, Star, History, Download, CompareArrows } from '@mui/icons-material';\r\nimport { format } from 'date-fns';\r\nimport dynamic from 'next/dynamic';\r\nimport DashboardDebugPanel from '@/features/analytics/components/DashboardDebugPanel';\r\n\r\n// Dynamically import DashboardCharts to avoid SSR issues with Chart.js\r\nconst DashboardCharts = dynamic(() => import('@/features/analytics/components/DashboardCharts'), {\r\n  ssr: false,\r\n  loading: () => (\r\n    <Box sx={{ p: 2, textAlign: 'center' }}>\r\n      <CircularProgress />\r\n    </Box>\r\n  )\r\n});\r\n\r\n/**\r\n * User Dashboard page for learning progress, recommendations, and metrics.\r\n * Focuses on robust data flow and error handling.\r\n * Uses role guard to prevent flashing of admin-only content.\r\n */\r\nexport default function DashboardPage() {\r\n  const { currentAvatar, setCurrentAvatar } = useAvatar();\r\n  const { avatars, error: userError } = useUser();\r\n  const { hasRole, isReady } = useRoleGuard();\r\n  const avatarId = currentAvatar?.id;\r\n\r\n  const [progress, setProgress] = useState<LearningProgressData[] | null>(null);\r\n  const [recommendations, setRecommendations] = useState<LearningPathRecommendation[] | null>(null);\r\n  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);\r\n  const [comparisonData] = useState<{\r\n    progress: LearningProgressData[];\r\n    metrics: PerformanceMetrics;\r\n  } | null>(null);\r\n  const [comparisonLabel] = useState<string>('');\r\n  const [dashboardLoading, setDashboardLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const runDiagnostic = async () => {\r\n    if (!avatarId) return;\r\n    logger.info('Running analytics diagnostic for avatar:', avatarId);\r\n    await analyticsDebugger.runFullDiagnostic(avatarId);\r\n  };\r\n\r\n  const createTestData = async () => {\r\n    if (!avatarId) return;\r\n    logger.info('Creating simple test data for avatar:', avatarId);\r\n    try {\r\n      const result = await analyticsDebugger.createTestSessionData(avatarId);\r\n      logger.info('Test data creation result:', result);\r\n      \r\n      if (result.success) {\r\n        window.location.reload();\r\n      }\r\n    } catch (err) {\r\n      logger.error('Failed to create test data:', err);\r\n    }\r\n  };\r\n\r\n  const handleAvatarChange = (event: SelectChangeEvent) => {\r\n    const avatarId = event.target.value;\r\n    const selectedAvatar = avatars?.find(a => a.id === avatarId);\r\n    if (selectedAvatar) {\r\n      setCurrentAvatar(selectedAvatar);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      if (!avatarId) {\r\n        setDashboardLoading(false);\r\n        return;\r\n      }\r\n\r\n      setDashboardLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        logger.info('üîÑ Loading analytics data for avatar:', avatarId);\r\n\r\n        const [progressData, recommendationsData, metricsData] = await Promise.all([\r\n          analyticsService.getAvatarProgress(avatarId),\r\n          analyticsService.getLearningPathRecommendations(avatarId),\r\n          analyticsService.getPerformanceMetrics(avatarId)\r\n        ]);\r\n\r\n        logger.debug('üìä Analytics data loaded:', { \r\n          progress: progressData, \r\n          recommendations: recommendationsData, \r\n          metrics: metricsData \r\n        });\r\n\r\n        setProgress(progressData);\r\n        setRecommendations(recommendationsData);\r\n        setMetrics(metricsData);\r\n      } catch (err) {\r\n        logger.error('‚ùå Error loading analytics data:', err);\r\n        setError(err instanceof Error ? err.message : 'Failed to load analytics data');\r\n      } finally {\r\n        setDashboardLoading(false);\r\n      }\r\n    };\r\n\r\n    loadData();\r\n  }, [avatarId]);\r\n\r\n  if (userError) {\r\n    return (\r\n      <Box sx={{ p: 2 }}>\r\n        <Alert severity=\"error\">\r\n          {userError} <br />\r\n          <Button variant=\"outlined\" sx={{ mt: 1 }} onClick={() => window.location.reload()}>\r\n            Reload\r\n          </Button>\r\n        </Alert>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (!avatarId) {\r\n    return (\r\n      <Alert severity=\"info\">\r\n        Please select or create an avatar to view your dashboard.\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  if (dashboardLoading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '200px' }}>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Box sx={{ p: 2 }}>\r\n        <Alert severity=\"error\">{error}</Alert>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ maxWidth: 'lg', mx: 'auto', py: 4 }}>\r\n      {/* Debug Panel - Only appears in development */}\r\n      <DashboardDebugPanel />\r\n      \r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Learning Progress Dashboard\r\n      </Typography>\r\n\r\n      {/* Subscription Status */}\r\n      <Box sx={{ mb: 3 }}>\r\n        <SubscriptionStatus />\r\n      </Box>\r\n\r\n      {/* User Management Dashboard Link (visible to account_owner or org_admin when ready) */}\r\n      {isReady && (hasRole('account_owner') || hasRole('org_admin')) && (\r\n        <Box sx={{ mb: 2 }}>\r\n          <Button variant=\"contained\" color=\"secondary\" href=\"/dashboard/user-management\">\r\n            Manage Users & Roles\r\n          </Button>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Avatar Selection */}\r\n      <Box sx={{ mb: 3 }}>\r\n        <FormControl fullWidth>\r\n          <InputLabel>Select Avatar</InputLabel>\r\n          <Select\r\n            value={avatarId || ''}\r\n            label=\"Select Avatar\"\r\n            onChange={handleAvatarChange}\r\n          >\r\n            {avatars?.map((avatar) => (\r\n              <MenuItem key={avatar.id} value={avatar.id}>\r\n                {avatar.name}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </Box>\r\n\r\n      {/* Current Avatar Info */}\r\n      {currentAvatar && (\r\n        <Paper sx={{ p: 2, mb: 3 }} elevation={2}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Current Avatar: {currentAvatar.name}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            ID: {currentAvatar.id}\r\n          </Typography>\r\n        </Paper>\r\n      )}\r\n\r\n      {/* Quick Access Section */}\r\n      <Box sx={{ mb: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>Quick Actions</Typography>\r\n        <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\r\n          <Button \r\n            variant=\"outlined\" \r\n            startIcon={<PlayArrow />}\r\n            onClick={() => window.location.href = '/games'}\r\n          >\r\n            Play Games\r\n          </Button>\r\n          <Button \r\n            variant=\"outlined\" \r\n            startIcon={<Download />}\r\n            onClick={createTestData}\r\n          >\r\n            Create Test Data\r\n          </Button>\r\n          <Button \r\n            variant=\"outlined\" \r\n            startIcon={<History />}\r\n            onClick={runDiagnostic}\r\n          >\r\n            Run Diagnostic\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Analytics Charts */}\r\n      {metrics && progress && (\r\n        <Box sx={{ mb: 3 }}>\r\n          <Typography variant=\"h6\" gutterBottom>Analytics Overview</Typography>\r\n          <DashboardCharts \r\n            metrics={metrics} \r\n            progress={progress} \r\n            comparisonData={comparisonData || undefined}\r\n            comparisonLabel={comparisonLabel}\r\n          />\r\n        </Box>\r\n      )}\r\n\r\n      {/* Learning Progress */}\r\n      {progress && progress.length > 0 && (\r\n        <Paper sx={{ p: 2, mb: 3 }} elevation={2}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            <Star sx={{ mr: 1, verticalAlign: 'middle' }} />\r\n            Learning Progress\r\n          </Typography>\r\n          <List>\r\n            {progress.map((item, index) => (\r\n              <ListItem key={index}>\r\n                <ListItemText\r\n                  primary={`${item.gameId}: ${item.skillLevel}`}\r\n                  secondary={`Mastery: ${Math.round(item.masteryScore * 100)}% | Last Played: ${\r\n                    item.lastPlayed ? format(new Date(item.lastPlayed), 'MMM dd, yyyy') : 'Never'\r\n                  }`}\r\n                />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Paper>\r\n      )}\r\n\r\n      {/* Recommendations */}\r\n      {recommendations && recommendations.length > 0 && (\r\n        <Paper sx={{ p: 2, mb: 3 }} elevation={2}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            <CompareArrows sx={{ mr: 1, verticalAlign: 'middle' }} />\r\n            Recommended Learning Path\r\n          </Typography>\r\n          <List>\r\n            {recommendations.map((rec, index) => (\r\n              <ListItem key={index}>\r\n                <ListItemText\r\n                  primary={rec.gameId}\r\n                  secondary={`${rec.reason} | Priority: ${rec.priority} | Difficulty: ${rec.estimatedDifficulty}`}\r\n                />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Paper>\r\n      )}\r\n\r\n      {/* Performance Metrics */}\r\n      {metrics && (\r\n        <Paper sx={{ p: 2 }} elevation={2}>\r\n          <Typography variant=\"h6\" gutterBottom>Performance Metrics</Typography>\r\n          <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: 2 }}>\r\n            <Card variant=\"outlined\">\r\n              <CardContent>\r\n                <Typography variant=\"subtitle2\">Engagement Score</Typography>\r\n                <Typography variant=\"h4\">{Math.round(metrics.engagementScore * 100)}%</Typography>\r\n              </CardContent>\r\n            </Card>\r\n            <Card variant=\"outlined\">\r\n              <CardContent>\r\n                <Typography variant=\"subtitle2\">Learning Velocity</Typography>\r\n                <Typography variant=\"h4\">{metrics.learningVelocity.toFixed(1)}</Typography>\r\n              </CardContent>\r\n            </Card>\r\n            <Card variant=\"outlined\">\r\n              <CardContent>\r\n                <Typography variant=\"subtitle2\">Completion Rate</Typography>\r\n                <Typography variant=\"h4\">{Math.round(metrics.overallCompletionRate * 100)}%</Typography>\r\n              </CardContent>\r\n            </Card>\r\n            <Card variant=\"outlined\">\r\n              <CardContent>\r\n                <Typography variant=\"subtitle2\">Avg Session Time</Typography>\r\n                <Typography variant=\"h4\">{Math.round(metrics.averageSessionDuration)} min</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Box>\r\n        </Paper>\r\n      )}\r\n    </Box>\r\n  );\r\n} "],"names":["DashboardPage","DashboardCharts","dynamic","ssr","loading","Box","sx","p","textAlign","CircularProgress","currentAvatar","setCurrentAvatar","useAvatar","avatars","error","userError","useUser","hasRole","isReady","useRoleGuard","avatarId","id","progress","setProgress","useState","recommendations","setRecommendations","metrics","setMetrics","comparisonData","comparisonLabel","dashboardLoading","setDashboardLoading","setError","runDiagnostic","logger","info","analyticsDebugger","runFullDiagnostic","createTestData","result","createTestSessionData","success","window","location","reload","err","handleAvatarChange","event","target","value","selectedAvatar","find","a","useEffect","loadData","progressData","recommendationsData","metricsData","Promise","all","analyticsService","getAvatarProgress","getLearningPathRecommendations","getPerformanceMetrics","debug","Error","message","Alert","severity","br","Button","variant","mt","onClick","display","justifyContent","alignItems","minHeight","maxWidth","mx","py","DashboardDebugPanel","Typography","gutterBottom","mb","SubscriptionStatus","color","href","FormControl","fullWidth","InputLabel","Select","label","onChange","map","avatar","MenuItem","name","Paper","elevation","gap","flexWrap","startIcon","PlayArrow","Download","History","undefined","length","Star","mr","verticalAlign","List","item","index","ListItem","ListItemText","primary","gameId","skillLevel","secondary","Math","round","masteryScore","lastPlayed","format","Date","CompareArrows","rec","reason","priority","estimatedDifficulty","gridTemplateColumns","Card","CardContent","engagementScore","learningVelocity","toFixed","overallCompletionRate","averageSessionDuration"],"mappings":"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"}