514072f51bc16187202a67fbe490df63
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    UserProvider: function() {
        return UserProvider;
    },
    useAvatar: function() {
        return useAvatar;
    },
    useRoleGuard: function() {
        return useRoleGuard;
    },
    useUser: function() {
        return useUser;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _client = require("../lib/supabase/client");
const _logger = require("../utils/logger");
const _demoConfig = require("../utils/demoConfig");
const _DemoContext = require("./DemoContext");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const UserContext = /*#__PURE__*/ (0, _react.createContext)(undefined);
function UserProvider({ children }) {
    const [user, setUser] = (0, _react.useState)(null);
    const [userProfile, setUserProfile] = (0, _react.useState)(null);
    const [avatars, setAvatars] = (0, _react.useState)([]);
    const [currentAvatar, setCurrentAvatar] = (0, _react.useState)(null);
    const [error, setError] = (0, _react.useState)(null);
    const [roles, setRoles] = (0, _react.useState)([]);
    const [org, setOrg] = (0, _react.useState)(null);
    const [demoMode, setDemoMode] = (0, _react.useState)(false);
    // View As state
    const [viewAsRole, setViewAsRole] = (0, _react.useState)(null);
    const [viewAsAvatar, setViewAsAvatar] = (0, _react.useState)(null);
    // Use individual boolean states instead of object to prevent re-render loops
    const [userLoading, setUserLoading] = (0, _react.useState)(true);
    const [rolesLoading, setRolesLoading] = (0, _react.useState)(true);
    const [avatarsLoading, setAvatarsLoading] = (0, _react.useState)(true);
    const [isInitialized, setIsInitialized] = (0, _react.useState)(false);
    // Get demo context for smooth transitions
    let demoContext = null;
    try {
        demoContext = (0, _DemoContext.useDemo)();
    } catch  {
    // Not in demo mode or provider not available
    }
    // Create stable loading state object using individual primitives
    const loadingState = (0, _react.useMemo)(()=>({
            user: userLoading,
            roles: rolesLoading,
            avatars: avatarsLoading,
            isReady: isInitialized && !userLoading && !rolesLoading
        }), [
        userLoading,
        rolesLoading,
        avatarsLoading,
        isInitialized
    ]);
    const supabase = (0, _client.createClient)();
    // Use ref to track initialization to prevent multiple calls
    const initializationRef = (0, _react.useRef)(false);
    // Load user profile from database
    const loadUserProfile = (0, _react.useCallback)(async (userId)=>{
        try {
            _logger.logger.debug('🔍 Loading user profile for ID:', userId);
            const { data, error } = await supabase.from('users').select('*').eq('id', userId).single();
            _logger.logger.debug('📊 User profile query result:', {
                data,
                error
            });
            if (error) throw error;
            setUserProfile(data);
            _logger.logger.debug('✅ User profile loaded successfully');
        } catch (err) {
            _logger.logger.error('❌ Error loading user profile:', err);
            throw err; // Re-throw to trigger fallback in loadDemoUser
        }
    }, [
        supabase
    ]);
    // Load avatars for the current user
    const loadAvatars = (0, _react.useCallback)(async (userId)=>{
        try {
            console.log('UserContext: Loading avatars for user:', userId);
            setAvatarsLoading(true);
            const { data, error } = await supabase.from('avatars').select('*').eq('user_id', userId).order('created_at', {
                ascending: true
            });
            if (error) throw error;
            console.log('UserContext: Avatars loaded successfully:', data?.length || 0);
            setAvatars(data || []);
            // Set first avatar as current if none selected and we have avatars
            if (data && data.length > 0) {
                setCurrentAvatar((prev)=>prev || data[0]);
            }
        } catch (err) {
            _logger.logger.error('Error loading avatars:', err);
            console.log('UserContext: Avatar loading failed:', err);
            setError('Failed to load avatars');
            setAvatars([]);
        } finally{
            console.log('UserContext: Avatar loading completed');
            setAvatarsLoading(false);
        }
    }, [
        supabase
    ]);
    // Fetch roles and org info
    const fetchRolesAndOrg = (0, _react.useCallback)(async (userId)=>{
        try {
            setRolesLoading(true);
            // Fetch user profile from public.users
            const { data: userProfileData, error: userProfileError } = await supabase.from('users').select('id, org_id').eq('id', userId).single();
            if (userProfileError) throw userProfileError;
            const orgId = userProfileData?.org_id;
            // Fetch org info and subscription plan
            let orgInfo = null;
            if (orgId) {
                const { data: orgData, error: orgError } = await supabase.from('organizations').select('id, name, subscription_plan_id').eq('id', orgId).single();
                if (orgError) throw orgError;
                let subscriptionPlan = null;
                if (orgData?.subscription_plan_id) {
                    const { data: planData, error: planError } = await supabase.from('subscription_plans').select('*').eq('id', orgData.subscription_plan_id).single();
                    if (planError) throw planError;
                    subscriptionPlan = planData;
                }
                orgInfo = {
                    id: orgData.id,
                    name: orgData.name,
                    subscriptionPlan
                };
            }
            setOrg(orgInfo);
            // Fetch user roles from user_policies -> permission_policies
            const { data: userPolicies, error: userPoliciesError } = await supabase.from('user_policies').select('policy_id, permission_policies(id, policy_name, description)').eq('user_id', userId);
            if (userPoliciesError) throw userPoliciesError;
            const userRoles = (userPolicies || []).map((up)=>({
                    id: up.permission_policies.id,
                    name: up.permission_policies.policy_name,
                    description: up.permission_policies.description || undefined
                }));
            setRoles(userRoles);
        } catch (err) {
            _logger.logger.error('Error fetching roles/org info:', err);
            setOrg(null);
            setRoles([]);
            setError('Failed to load organization or roles.');
        } finally{
            setRolesLoading(false);
        }
    }, [
        supabase
    ]);
    // Enhanced demo user/org/roles fallback
    const loadDemoUserContext = (0, _react.useCallback)(async ()=>{
        // Get demo configuration from DemoContext if available, otherwise fallback
        const demoConfig = demoContext?.currentConfig || (0, _demoConfig.getDemoConfig)();
        console.log('Demo configuration loaded:', demoConfig);
        try {
            setUserLoading(true);
            setRolesLoading(true);
            setAvatarsLoading(true);
            setDemoMode(true);
            // Try to load demo user/org/roles from DB, fallback to hardcoded
            try {
                // Try to find a demo user in the users table
                const { data: demoUsers } = await supabase.from('users').select('*').ilike('email', '%demo%');
                const demoUser = demoUsers && demoUsers.length > 0 ? demoUsers[0] : null;
                // Try to find a demo org
                let demoOrg = null;
                let demoPlan = null;
                if (demoUser && demoUser.org_id) {
                    const { data: orgData } = await supabase.from('organizations').select('*').eq('id', demoUser.org_id).single();
                    demoOrg = orgData;
                    if (orgData && orgData.subscription_plan_id) {
                        const { data: planData } = await supabase.from('subscription_plans').select('*').eq('id', orgData.subscription_plan_id).single();
                        demoPlan = planData;
                    }
                }
                // Try to find demo roles
                let demoRoles = [];
                if (demoUser) {
                    const { data: userPolicies } = await supabase.from('user_policies').select('policy_id, permission_policies(id, policy_name, description)').eq('user_id', demoUser.id);
                    demoRoles = (userPolicies || []).map((up)=>({
                            id: up.permission_policies.id,
                            name: up.permission_policies.policy_name,
                            description: up.permission_policies.description || undefined
                        }));
                }
                // Set context state from database
                if (demoUser) {
                    // Convert database user to Supabase User format
                    const supabaseUser = {
                        ...demoUser,
                        app_metadata: {},
                        user_metadata: {},
                        aud: 'authenticated'
                    };
                    setUser(supabaseUser);
                    setUserProfile({
                        id: demoConfig.id,
                        email: demoConfig.email,
                        first_name: demoConfig.name?.split(' ')[0] || null,
                        last_name: demoConfig.name?.split(' ').slice(1).join(' ') || null,
                        org_id: `${demoConfig.id}-org`,
                        account_type: 'demo',
                        created_at: new Date().toISOString(),
                        updated_at: new Date().toISOString(),
                        last_login: new Date().toISOString(),
                        phone: null,
                        timezone: null,
                        locale: 'en'
                    });
                    // Always ensure demo org with subscription plan exists
                    const ensuredDemoOrg = demoOrg && demoPlan ? {
                        id: demoOrg.id,
                        name: demoOrg.name,
                        subscriptionPlan: demoPlan
                    } : (()=>{
                        // Use configurable demo organization for database users too
                        const demoConfig = (0, _demoConfig.getDemoConfig)();
                        const subscriptionPlan = (0, _demoConfig.createDemoSubscriptionPlan)(demoConfig);
                        return {
                            id: `${demoUser.id}-org`,
                            name: demoConfig.orgName,
                            subscriptionPlan
                        };
                    })();
                    console.log('Demo org being set for database user:', ensuredDemoOrg);
                    setOrg(ensuredDemoOrg);
                    setRoles(demoRoles.length > 0 ? demoRoles : [
                        {
                            id: '1',
                            name: 'account_owner',
                            description: 'Full administrative access'
                        },
                        {
                            id: '2',
                            name: 'org_admin',
                            description: 'Organization management'
                        }
                    ]);
                    // Load demo avatars
                    await loadAvatars(demoUser.id);
                    return;
                }
            } catch (dbError) {
                _logger.logger.warn('Database demo user not found, using hardcoded fallback:', dbError);
                console.log('Demo mode fallback triggered:', dbError);
            }
            // Fallback to configurable demo context
            console.log('UserContext: Creating demo user from configuration');
            // Create demo user
            const demoUser = {
                id: demoConfig.id,
                email: demoConfig.email,
                name: demoConfig.name,
                app_metadata: {},
                user_metadata: {},
                aud: 'authenticated',
                created_at: new Date().toISOString()
            };
            setUser(demoUser);
            setUserProfile({
                id: demoConfig.id,
                email: demoConfig.email,
                first_name: demoConfig.name?.split(' ')[0] || null,
                last_name: demoConfig.name?.split(' ').slice(1).join(' ') || null,
                org_id: `${demoConfig.id}-org`,
                account_type: 'demo',
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
                last_login: new Date().toISOString(),
                phone: null,
                timezone: null,
                locale: 'en'
            });
            // Create demo organization with appropriate subscription plan
            const subscriptionPlan = (0, _demoConfig.createDemoSubscriptionPlan)(demoConfig);
            const demoOrg = {
                id: `${demoConfig.id}-org`,
                name: demoConfig.orgName,
                subscriptionPlan
            };
            _logger.logger.info(`Setting demo org for ${demoConfig.tier} tier:`, demoOrg);
            setOrg(demoOrg);
            console.log('Demo org set:', demoOrg);
            // Create demo roles based on configuration
            const demoRoles = (0, _demoConfig.createDemoRoles)(demoConfig);
            setRoles(demoRoles);
            console.log('Demo roles set:', demoRoles);
            // Create demo avatars based on configuration
            const demoAvatars = (0, _demoConfig.createDemoAvatars)(demoConfig);
            setAvatars(demoAvatars);
            if (demoAvatars.length > 0) {
                setCurrentAvatar(demoAvatars[0]);
            }
            console.log(`Demo avatars created: ${demoAvatars.length}`);
        } catch (err) {
            _logger.logger.error('Error in demo user context:', err);
            setError('Failed to initialize demo mode');
        } finally{
            // Complete all loading states for demo mode
            console.log('Demo mode initialization complete, updating loading states');
            setUserLoading(false);
            setRolesLoading(false);
            setAvatarsLoading(false);
            setIsInitialized(true);
        }
    }, [
        supabase,
        loadAvatars
    ]);
    // Main initialization effect - runs only once
    (0, _react.useEffect)(()=>{
        if (initializationRef.current) return;
        initializationRef.current = true;
        const loadUser = async ()=>{
            try {
                setUserLoading(true);
                setError(null);
                const { data: { session } } = await supabase.auth.getSession();
                if (session?.user) {
                    // Real user authentication
                    setUser(session.user);
                    setUserLoading(false);
                    await loadUserProfile(session.user.id);
                    // Load roles and avatars in parallel
                    await Promise.all([
                        fetchRolesAndOrg(session.user.id),
                        loadAvatars(session.user.id)
                    ]);
                    setIsInitialized(true);
                } else {
                    // No session - load demo mode for development
                    _logger.logger.info('No user session found, loading demo mode');
                    console.log('UserContext: Starting demo mode load');
                    await loadDemoUserContext();
                    console.log('UserContext: Demo mode load completed');
                }
            } catch (err) {
                _logger.logger.error('Error loading user:', err);
                setError('Failed to load user context.');
                setUserLoading(false);
                setRolesLoading(false);
                setAvatarsLoading(false);
                setIsInitialized(true);
            }
        };
        loadUser();
        // Listen for auth changes
        const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session)=>{
            if (event === 'SIGNED_IN' && session?.user) {
                setUser(session.user);
                setUserLoading(false);
                await loadUserProfile(session.user.id);
                // Load roles and avatars in parallel
                await Promise.all([
                    fetchRolesAndOrg(session.user.id),
                    loadAvatars(session.user.id)
                ]);
                setIsInitialized(true);
            } else if (event === 'SIGNED_OUT') {
                setUser(null);
                setUserProfile(null);
                setAvatars([]);
                setCurrentAvatar(null);
                setRoles([]);
                setOrg(null);
                // Load demo user for continued development
                await loadDemoUserContext();
            }
        });
        return ()=>{
            subscription.unsubscribe();
        };
    }, [
        supabase.auth,
        loadUserProfile,
        loadDemoUserContext,
        fetchRolesAndOrg,
        loadAvatars
    ]);
    // Listen for demo scenario changes from DemoContext
    (0, _react.useEffect)(()=>{
        if (!demoContext) return;
        const handleDemoScenarioChange = async (event)=>{
            const customEvent = event;
            const { config: newConfig } = customEvent.detail;
            try {
                _logger.logger.info('Demo scenario changed, updating user context:', newConfig);
                // Update demo user context with new configuration
                const demoUser = {
                    id: newConfig.id,
                    email: newConfig.email,
                    name: newConfig.name,
                    app_metadata: {},
                    user_metadata: {},
                    aud: 'authenticated',
                    created_at: new Date().toISOString()
                };
                setUser(demoUser);
                setUserProfile({
                    id: newConfig.id,
                    email: newConfig.email,
                    first_name: newConfig.name?.split(' ')[0] || null,
                    last_name: newConfig.name?.split(' ').slice(1).join(' ') || null,
                    org_id: `${newConfig.id}-org`,
                    account_type: 'demo',
                    created_at: new Date().toISOString(),
                    updated_at: new Date().toISOString(),
                    last_login: new Date().toISOString(),
                    phone: null,
                    timezone: null,
                    locale: 'en'
                });
                // Create demo organization with new subscription plan
                const subscriptionPlan = (0, _demoConfig.createDemoSubscriptionPlan)(newConfig);
                const demoOrg = {
                    id: `${newConfig.id}-org`,
                    name: newConfig.orgName,
                    subscriptionPlan
                };
                setOrg(demoOrg);
                // Create demo roles
                const demoRoles = (0, _demoConfig.createDemoRoles)(newConfig);
                setRoles(demoRoles);
                // Create demo avatars
                const demoAvatars = (0, _demoConfig.createDemoAvatars)(newConfig);
                setAvatars(demoAvatars);
                if (demoAvatars.length > 0) {
                    setCurrentAvatar(demoAvatars[0]);
                }
                _logger.logger.info('Demo user context updated successfully for new scenario');
            } catch (err) {
                _logger.logger.error('Failed to update user context for new demo scenario:', err);
                setError('Failed to switch demo scenario');
            }
        };
        // Add event listener for demo scenario changes
        if (typeof window !== 'undefined') {
            window.addEventListener('demoScenarioChanged', handleDemoScenarioChange);
            return ()=>{
                window.removeEventListener('demoScenarioChanged', handleDemoScenarioChange);
            };
        }
    }, [
        demoContext
    ]);
    // Utility functions
    const hasRole = (0, _react.useCallback)((roleName)=>{
        // Only return true if we're ready and actually have the role
        return loadingState.isReady && roles.some((r)=>r.name === roleName);
    }, [
        roles,
        loadingState.isReady
    ]);
    const canAccess = (0, _react.useCallback)((feature)=>{
        // Only return true if we're ready and have access
        if (!loadingState.isReady || !org?.subscriptionPlan) return false;
        const features = org.subscriptionPlan.features_included || {};
        return features[feature] === true;
    }, [
        org,
        loadingState.isReady
    ]);
    const getTierLimit = (0, _react.useCallback)((feature)=>{
        return org?.subscriptionPlan?.[`${feature}_limit`];
    }, [
        org
    ]);
    // Create a new avatar with subscription limit checking
    const createAvatar = async (name)=>{
        if (!user) {
            setError('Must be logged in to create avatar');
            return null;
        }
        // Check subscription limits before creating avatar
        const currentAvatarsCount = avatars.length;
        if (org?.subscriptionPlan) {
            const avatarLimit = org.subscriptionPlan.avatar_limit || 5;
            if (currentAvatarsCount >= avatarLimit) {
                const tierName = org.subscriptionPlan.tier || 'current plan';
                setError(`Avatar limit reached (${currentAvatarsCount}/${avatarLimit}). Upgrade your ${tierName} to create more avatars.`);
                return null;
            }
        }
        try {
            setError(null);
            const { data, error } = await supabase.from('avatars').insert({
                user_id: user.id,
                org_id: org?.id || null,
                name: name.trim(),
                theme_settings: {},
                game_preferences: {}
            }).select().single();
            if (error) throw error;
            // Refresh avatars list
            await loadAvatars(user.id);
            _logger.logger.info('Avatar created successfully:', {
                avatarId: data.id,
                avatarName: data.name,
                currentCount: currentAvatarsCount + 1,
                tier: org?.subscriptionPlan?.tier
            });
            return data;
        } catch (err) {
            _logger.logger.error('Error creating avatar:', err);
            setError(err instanceof Error ? err.message : 'Failed to create avatar');
            return null;
        }
    };
    // Refresh avatars from database
    const refreshAvatars = async ()=>{
        if (user) {
            await loadAvatars(user.id);
        }
    };
    // Sign out the current user
    const signOut = async ()=>{
        try {
            const { error } = await supabase.auth.signOut();
            if (error) throw error;
        } catch (err) {
            _logger.logger.error('Error signing out:', err);
            setError('Failed to sign out');
        }
    };
    // View As functionality
    const isViewAs = viewAsRole !== null || viewAsAvatar !== null;
    const resetViewAs = ()=>{
        setViewAsRole(null);
        setViewAsAvatar(null);
    };
    const contextValue = {
        user,
        userProfile,
        avatars,
        currentAvatar,
        loading: !loadingState.isReady,
        error,
        setCurrentAvatar,
        createAvatar,
        refreshAvatars,
        signOut,
        roles,
        org,
        hasRole,
        canAccess,
        getTierLimit,
        viewAsRole,
        viewAsAvatar,
        isViewAs,
        setViewAsRole,
        setViewAsAvatar,
        resetViewAs,
        loadingState
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(UserContext.Provider, {
        value: contextValue,
        children: children
    });
}
function useUser() {
    const context = (0, _react.useContext)(UserContext);
    if (!context) {
        throw new Error('useUser must be used within a UserProvider');
    }
    return context;
}
function useAvatar() {
    const { currentAvatar, setCurrentAvatar, avatars, createAvatar } = useUser();
    const switchAvatar = (0, _react.useCallback)((avatarId)=>{
        const avatar = avatars.find((a)=>a.id === avatarId);
        if (avatar) {
            setCurrentAvatar(avatar);
        }
    }, [
        avatars,
        setCurrentAvatar
    ]);
    return {
        currentAvatar,
        setCurrentAvatar,
        avatars,
        switchAvatar,
        createAvatar
    };
}
function useRoleGuard() {
    const { hasRole, canAccess, roles, loadingState } = useUser();
    // Backward compatible hasRole function 
    const guardedHasRole = (0, _react.useCallback)((roleName)=>{
        return loadingState.isReady && hasRole(roleName);
    }, [
        hasRole,
        loadingState.isReady
    ]);
    const requireRole = (0, _react.useCallback)((requiredRole)=>{
        if (!loadingState.isReady) return {
            allowed: false,
            reason: 'Loading...'
        };
        const allowed = hasRole(requiredRole);
        return {
            allowed,
            reason: allowed ? undefined : `Requires ${requiredRole} role`
        };
    }, [
        hasRole,
        loadingState.isReady
    ]);
    const requireFeature = (0, _react.useCallback)((feature)=>{
        if (!loadingState.isReady) return {
            allowed: false,
            reason: 'Loading...'
        };
        const allowed = canAccess(feature);
        return {
            allowed,
            reason: allowed ? undefined : `Feature ${feature} not available in current plan`
        };
    }, [
        canAccess,
        loadingState.isReady
    ]);
    return {
        // Backward compatible interface
        hasRole: guardedHasRole,
        isReady: loadingState.isReady,
        roles: loadingState.isReady ? roles : [],
        // New enhanced interface
        requireRole,
        requireFeature
    };
}

//# sourceMappingURL=data:application/json;base64,