1f553c5cdb0d2119d0c2d9392f54cf38
/**
 * Demo Transition Preview Component
 * Shows users what will change when switching demo scenarios
 * Provides validation and preview of tier transitions
 */ 'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return DemoTransitionPreview;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _material = require("@mui/material");
const _CheckCircle = /*#__PURE__*/ _interop_require_default(require("@mui/icons-material/CheckCircle"));
const _Cancel = /*#__PURE__*/ _interop_require_default(require("@mui/icons-material/Cancel"));
const _Upgrade = /*#__PURE__*/ _interop_require_default(require("@mui/icons-material/Upgrade"));
const _ArrowDownward = /*#__PURE__*/ _interop_require_default(require("@mui/icons-material/ArrowDownward"));
const _Person = /*#__PURE__*/ _interop_require_default(require("@mui/icons-material/Person"));
const _Security = /*#__PURE__*/ _interop_require_default(require("@mui/icons-material/Security"));
const _DemoContext = require("../../../context/DemoContext");
const _UserContext = require("../../../context/UserContext");
const _subscriptionService = require("../../../utils/subscriptionService");
const _demoConfig = require("../../../utils/demoConfig");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function DemoTransitionPreview({ targetScenarioKey }) {
    const { currentConfig } = (0, _DemoContext.useDemo)();
    const { avatars } = (0, _UserContext.useUser)();
    const targetConfig = _demoConfig.DEMO_SCENARIOS[targetScenarioKey];
    if (!targetConfig) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Alert, {
            severity: "error",
            children: [
                "Unknown scenario: ",
                targetScenarioKey
            ]
        });
    }
    const currentTier = currentConfig.tier;
    const targetTier = targetConfig.tier;
    const isUpgrade = getTierPriority(targetTier) > getTierPriority(currentTier);
    const isDowngrade = getTierPriority(targetTier) < getTierPriority(currentTier);
    const isSameTier = currentTier === targetTier;
    const currentTierConfig = _subscriptionService.TIER_CONFIGURATIONS[currentTier];
    const targetTierConfig = _subscriptionService.TIER_CONFIGURATIONS[targetTier];
    // Calculate feature changes
    const currentFeatures = Object.entries(currentTierConfig.features).filter(([, enabled])=>enabled).map(([name])=>name);
    const targetFeatures = Object.entries(targetTierConfig.features).filter(([, enabled])=>enabled).map(([name])=>name);
    const gainedFeatures = targetFeatures.filter((f)=>!currentFeatures.includes(f));
    const lostFeatures = currentFeatures.filter((f)=>!targetFeatures.includes(f));
    // Check avatar limit compatibility
    const currentAvatarCount = avatars?.length || 0;
    const currentAvatarLimit = currentTierConfig.limits.avatars;
    const targetAvatarLimit = targetTierConfig.limits.avatars;
    const avatarLimitIssue = targetAvatarLimit < currentAvatarCount;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
                sx: {
                    mb: 2
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                        variant: "subtitle2",
                        gutterBottom: true,
                        children: "Tier Change"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
                        sx: {
                            display: 'flex',
                            alignItems: 'center',
                            gap: 1
                        },
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Chip, {
                                label: currentTierConfig.displayName,
                                size: "small",
                                variant: "outlined"
                            }),
                            isUpgrade ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_Upgrade.default, {
                                color: "success"
                            }) : isDowngrade ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_ArrowDownward.default, {
                                color: "warning"
                            }) : '→',
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Chip, {
                                label: targetTierConfig.displayName,
                                size: "small",
                                color: isUpgrade ? 'success' : isDowngrade ? 'warning' : 'default'
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
                sx: {
                    mb: 2
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                        variant: "subtitle2",
                        gutterBottom: true,
                        children: "Avatar Limits"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
                        sx: {
                            display: 'flex',
                            alignItems: 'center',
                            gap: 1
                        },
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_Person.default, {
                                sx: {
                                    fontSize: 16
                                }
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Typography, {
                                variant: "body2",
                                children: [
                                    currentAvatarLimit === 10000 ? 'Unlimited' : currentAvatarLimit,
                                    " → ",
                                    targetAvatarLimit === 10000 ? 'Unlimited' : targetAvatarLimit
                                ]
                            }),
                            avatarLimitIssue && /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Chip, {
                                label: "⚠️ Over Limit",
                                size: "small",
                                color: "error",
                                variant: "outlined"
                            })
                        ]
                    }),
                    avatarLimitIssue && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Alert, {
                        severity: "warning",
                        sx: {
                            mt: 1
                        },
                        children: [
                            "Current avatar count (",
                            currentAvatarCount,
                            ") exceeds target limit (",
                            targetAvatarLimit,
                            "). Some avatars may need to be removed."
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
                sx: {
                    mb: 2
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                        variant: "subtitle2",
                        gutterBottom: true,
                        children: "Role Changes"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
                        sx: {
                            display: 'flex',
                            alignItems: 'center',
                            gap: 1
                        },
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_Security.default, {
                                sx: {
                                    fontSize: 16
                                }
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Typography, {
                                variant: "body2",
                                children: [
                                    currentConfig.roles.join(', '),
                                    " → ",
                                    targetConfig.roles.join(', ')
                                ]
                            })
                        ]
                    })
                ]
            }),
            !isSameTier && (gainedFeatures.length > 0 || lostFeatures.length > 0) && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Divider, {
                        sx: {
                            my: 2
                        }
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                        variant: "subtitle2",
                        gutterBottom: true,
                        children: "Feature Changes"
                    }),
                    gainedFeatures.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.List, {
                        dense: true,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                                variant: "caption",
                                color: "success.main",
                                sx: {
                                    fontWeight: 600
                                },
                                children: "Gained Features:"
                            }),
                            gainedFeatures.map((feature)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.ListItem, {
                                    sx: {
                                        py: 0.25
                                    },
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.ListItemIcon, {
                                            sx: {
                                                minWidth: 24
                                            },
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_CheckCircle.default, {
                                                sx: {
                                                    fontSize: 16,
                                                    color: 'success.main'
                                                }
                                            })
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.ListItemText, {
                                            primary: formatFeatureName(feature),
                                            primaryTypographyProps: {
                                                variant: 'body2'
                                            }
                                        })
                                    ]
                                }, feature))
                        ]
                    }),
                    lostFeatures.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.List, {
                        dense: true,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                                variant: "caption",
                                color: "error.main",
                                sx: {
                                    fontWeight: 600
                                },
                                children: "Lost Features:"
                            }),
                            lostFeatures.map((feature)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.ListItem, {
                                    sx: {
                                        py: 0.25
                                    },
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.ListItemIcon, {
                                            sx: {
                                                minWidth: 24
                                            },
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Cancel.default, {
                                                sx: {
                                                    fontSize: 16,
                                                    color: 'error.main'
                                                }
                                            })
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.ListItemText, {
                                            primary: formatFeatureName(feature),
                                            primaryTypographyProps: {
                                                variant: 'body2'
                                            }
                                        })
                                    ]
                                }, feature))
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Divider, {
                sx: {
                    my: 2
                }
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                        variant: "subtitle2",
                        gutterBottom: true,
                        children: "Organization"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Typography, {
                        variant: "body2",
                        color: "text.secondary",
                        children: [
                            currentConfig.orgName,
                            " → ",
                            targetConfig.orgName
                        ]
                    })
                ]
            })
        ]
    });
}
// Helper functions
function getTierPriority(tier) {
    const priorities = {
        personal: 1,
        professional: 2,
        enterprise: 3
    };
    return priorities[tier];
}
function formatFeatureName(feature) {
    return feature.replace(/_/g, ' ').replace(/\b\w/g, (l)=>l.toUpperCase());
}

//# sourceMappingURL=data:application/json;base64,