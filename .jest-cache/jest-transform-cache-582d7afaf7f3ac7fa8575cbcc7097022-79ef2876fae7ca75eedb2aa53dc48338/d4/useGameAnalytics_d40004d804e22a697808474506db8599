2a86e45ba782b8c6f54af5f819be6af3
/**
 * React hook for integrating analytics tracking with game sessions
 * Automatically tracks game start, progress, and completion
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useAggregateAnalytics: function() {
        return useAggregateAnalytics;
    },
    useGameAnalytics: function() {
        return useGameAnalytics;
    }
});
const _react = require("react");
const _analyticsService = require("../utils/analyticsService");
const _SettingsContext = require("../context/SettingsContext");
const _logger = require("../utils/logger");
function useGameAnalytics(options) {
    const { gameType, avatarId, orgId, autoTrack = true } = options;
    const { settings } = (0, _SettingsContext.useSettings)();
    const [state, setState] = (0, _react.useState)({
        sessionId: null,
        isTracking: false,
        sessionData: null,
        recommendations: [],
        performanceMetrics: null
    });
    const sessionStartTime = (0, _react.useRef)(null);
    const questionsAttempted = (0, _react.useRef)(0);
    const questionsCorrect = (0, _react.useRef)(0);
    /**
   * Start a new game session
   */ const startSession = (0, _react.useCallback)(async ()=>{
        if (state.isTracking) {
            _logger.logger.warn('Session already in progress');
            return state.sessionId;
        }
        try {
            const sessionId = await _analyticsService.analyticsService.startGameSession(avatarId, gameType, settings, orgId);
            sessionStartTime.current = new Date();
            questionsAttempted.current = 0;
            questionsCorrect.current = 0;
            setState((prev)=>({
                    ...prev,
                    sessionId,
                    isTracking: true,
                    sessionData: null // Will be populated when session completes
                }));
            return sessionId;
        } catch (error) {
            _logger.logger.error('Failed to start analytics session:', error);
            return null;
        }
    }, [
        avatarId,
        gameType,
        settings,
        orgId,
        state.isTracking,
        state.sessionId
    ]);
    /**
   * Track a question attempt
   */ const trackQuestionAttempt = (0, _react.useCallback)(async (isCorrect, questionData)=>{
        if (!state.sessionId || !state.isTracking) {
            _logger.logger.warn('No active session for question tracking');
            return;
        }
        questionsAttempted.current++;
        if (isCorrect) {
            questionsCorrect.current++;
        }
        try {
            await _analyticsService.analyticsService.trackEvent(state.sessionId, avatarId, 'question_answer', {
                correct: isCorrect,
                questionNumber: questionsAttempted.current,
                ...questionData
            });
        } catch (error) {
            _logger.logger.error('Failed to track question attempt:', error);
        }
    }, [
        state.sessionId,
        state.isTracking,
        avatarId
    ]);
    /**
   * Track other game events
   */ const trackEvent = (0, _react.useCallback)(async (eventType, eventData)=>{
        if (!state.sessionId || !state.isTracking) {
            _logger.logger.warn('No active session for event tracking');
            return;
        }
        try {
            await _analyticsService.analyticsService.trackEvent(state.sessionId, avatarId, eventType, eventData || {});
        } catch (error) {
            _logger.logger.error(`Failed to track ${eventType} event:`, error);
        }
    }, [
        state.sessionId,
        state.isTracking,
        avatarId
    ]);
    /**
   * Complete the current session
   */ const completeSession = (0, _react.useCallback)(async (finalScore)=>{
        if (!state.sessionId || !state.isTracking) {
            _logger.logger.warn('No active session to complete');
            return;
        }
        const calculatedScore = finalScore ?? (questionsAttempted.current > 0 ? questionsCorrect.current / questionsAttempted.current * 100 : 0);
        try {
            await _analyticsService.analyticsService.completeGameSession(state.sessionId, calculatedScore, questionsAttempted.current, questionsCorrect.current);
            setState((prev)=>({
                    ...prev,
                    isTracking: false,
                    sessionData: null
                }));
            // Refresh recommendations and performance metrics after session completion
            setTimeout(async ()=>{
                try {
                    const [recommendations, metrics] = await Promise.all([
                        _analyticsService.analyticsService.getLearningPathRecommendations(avatarId, 5),
                        _analyticsService.analyticsService.getPerformanceMetrics(avatarId)
                    ]);
                    setState((prev)=>({
                            ...prev,
                            recommendations,
                            performanceMetrics: metrics
                        }));
                } catch (error) {
                    _logger.logger.error('Failed to load post-session data:', error);
                }
            }, 0);
        } catch (error) {
            _logger.logger.error('Failed to complete session:', error);
        }
    }, [
        state.sessionId,
        state.isTracking,
        avatarId
    ]);
    /**
   * Abandon the current session (user quit without completing)
   */ const abandonSession = (0, _react.useCallback)(async ()=>{
        if (!state.sessionId || !state.isTracking) {
            return;
        }
        try {
            await _analyticsService.analyticsService.trackEvent(state.sessionId, avatarId, 'game_abandon', {
                questionsAttempted: questionsAttempted.current,
                questionsCorrect: questionsCorrect.current,
                timeSpent: sessionStartTime.current ? Math.floor((Date.now() - sessionStartTime.current.getTime()) / 1000) : 0
            });
        } catch (error) {
            _logger.logger.error('Failed to track session abandonment:', error);
        }
        setState((prev)=>({
                ...prev,
                isTracking: false,
                sessionData: null,
                sessionId: null
            }));
    }, [
        state.sessionId,
        state.isTracking,
        avatarId,
        sessionStartTime
    ]);
    /**
   * Load learning path recommendations
   */ const loadRecommendations = (0, _react.useCallback)(async ()=>{
        try {
            const recommendations = await _analyticsService.analyticsService.getLearningPathRecommendations(avatarId, 5);
            setState((prev)=>({
                    ...prev,
                    recommendations
                }));
        } catch (error) {
            _logger.logger.error('Failed to load recommendations:', error);
        }
    }, [
        avatarId
    ]);
    /**
   * Load performance metrics
   */ const loadPerformanceMetrics = (0, _react.useCallback)(async ()=>{
        try {
            const metrics = await _analyticsService.analyticsService.getPerformanceMetrics(avatarId);
            setState((prev)=>({
                    ...prev,
                    performanceMetrics: metrics
                }));
        } catch (error) {
            _logger.logger.error('Failed to load performance metrics:', error);
        }
    }, [
        avatarId
    ]);
    /**
   * Get current session statistics
   */ const getSessionStats = ()=>{
        return {
            questionsAttempted: questionsAttempted.current,
            questionsCorrect: questionsCorrect.current,
            accuracy: questionsAttempted.current > 0 ? questionsCorrect.current / questionsAttempted.current * 100 : 0,
            timeElapsed: sessionStartTime.current ? Math.floor((Date.now() - sessionStartTime.current.getTime()) / 1000) : 0
        };
    };
    // Auto-start session when component mounts if autoTrack is enabled
    (0, _react.useEffect)(()=>{
        if (autoTrack && !state.isTracking) {
            startSession();
        }
        // Load initial data
        loadRecommendations();
        loadPerformanceMetrics();
        // Cleanup function to abandon session if component unmounts while tracking
        return ()=>{
            if (state.isTracking) {
                abandonSession();
            }
        };
    }, [
        gameType,
        avatarId,
        autoTrack,
        state.isTracking,
        startSession,
        loadRecommendations,
        loadPerformanceMetrics,
        abandonSession
    ]);
    // Auto-complete session when questions are finished (if autoTrack enabled)
    (0, _react.useEffect)(()=>{
        if (autoTrack && state.isTracking && questionsAttempted.current >= (settings.questionsPerSession || 10)) {
            completeSession();
        }
    }, [
        autoTrack,
        state.isTracking,
        settings.questionsPerSession,
        completeSession
    ]);
    return {
        // Session management
        startSession,
        completeSession,
        abandonSession,
        // Event tracking
        trackQuestionAttempt,
        trackEvent,
        // Data access
        getSessionStats,
        loadRecommendations,
        loadPerformanceMetrics,
        // State
        sessionId: state.sessionId,
        isTracking: state.isTracking,
        recommendations: state.recommendations,
        performanceMetrics: state.performanceMetrics,
        // Current session stats
        ...getSessionStats()
    };
}
function useAggregateAnalytics(orgId) {
    const [analytics, setAnalytics] = (0, _react.useState)(null);
    const [loading, setLoading] = (0, _react.useState)(true);
    const loadAnalytics = (0, _react.useCallback)(async ()=>{
        setLoading(true);
        try {
            const data = _analyticsService.analyticsService.getAggregateAnalytics(orgId);
            setAnalytics(data);
        } catch (error) {
            _logger.logger.error('Failed to load aggregate analytics:', error);
        } finally{
            setLoading(false);
        }
    }, [
        orgId
    ]);
    (0, _react.useEffect)(()=>{
        loadAnalytics();
    }, [
        orgId,
        loadAnalytics
    ]);
    return {
        analytics,
        loading,
        refresh: loadAnalytics
    };
}

//# sourceMappingURL=data:application/json;base64,