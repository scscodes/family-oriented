{"version":3,"sources":["C:\\repos\\family-oriented\\src\\shared\\components\\cards\\ChoiceCard_styled.tsx"],"sourcesContent":["import { styled, Card, CardActionArea } from '@mui/material';\r\nimport { GameType } from '@/utils/gameUtils';\r\nimport { borderRadius, transitions, accessibility, shadows } from '@/theme/tokens';\r\n\r\ninterface StyledChoiceCardProps {\r\n  selected?: boolean;\r\n  correct?: boolean;\r\n  incorrect?: boolean;\r\n  disabled?: boolean;\r\n  gameType?: GameType;\r\n}\r\n\r\n/**\r\n * Enhanced choice card for games with proper state management\r\n * Consolidates game-specific styling and accessibility features\r\n */\r\nexport const StyledChoiceCard = styled(Card)<StyledChoiceCardProps>(({ \r\n  theme, \r\n  selected = false, \r\n  correct = false, \r\n  incorrect = false, \r\n  disabled = false,\r\n  gameType \r\n}) => {\r\n  const isCorrectState = selected && correct;\r\n  const isIncorrectState = selected && incorrect;\r\n  \r\n  const baseStyles = {\r\n    minHeight: '100px',\r\n    borderRadius: borderRadius.lg,\r\n    border: '2px solid transparent',\r\n    cursor: 'pointer',\r\n    transition: `all ${transitions.duration.normal}`,\r\n    opacity: disabled ? 0.6 : 1,\r\n    pointerEvents: disabled ? 'none' as const : 'auto' as const,\r\n    \r\n    '&:hover': {\r\n      transform: 'scale(1.02)',\r\n      boxShadow: shadows.cardHover,\r\n    },\r\n    \r\n    '&:focus-visible': {\r\n      outline: `${accessibility.focusRing.width} ${accessibility.focusRing.style} ${accessibility.focusRing.color}`,\r\n      outlineOffset: '2px',\r\n    },\r\n  };\r\n\r\n  const stateStyles = selected ? {\r\n    borderColor: isCorrectState \r\n      ? theme.palette.success.main \r\n      : isIncorrectState \r\n        ? theme.palette.error.main \r\n        : theme.palette.primary.main,\r\n    borderWidth: '2px',\r\n    borderStyle: 'solid' as const,\r\n    boxShadow: isCorrectState\r\n      ? '0 0 0 3px rgba(76, 175, 80, 0.3)'\r\n      : isIncorrectState\r\n        ? '0 0 0 3px rgba(244, 67, 54, 0.3)'\r\n        : '0 4px 12px rgba(0,0,0,0.15)',\r\n  } : {};\r\n\r\n  const gameStyles = gameType === 'colors' ? {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    fontWeight: 500,\r\n    fontSize: '1.1rem',\r\n  } : gameType === 'shapes' ? {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    '& .MuiSvgIcon-root': {\r\n      fontSize: 80,\r\n      transition: 'transform 0.3s ease, color 0.3s ease',\r\n      ...(selected && {\r\n        transform: 'scale(1.1)',\r\n        color: isCorrectState \r\n          ? theme.palette.success.light \r\n          : isIncorrectState \r\n            ? theme.palette.error.light \r\n            : undefined,\r\n      }),\r\n    },\r\n  } : {};\r\n\r\n  return {\r\n    ...baseStyles,\r\n    ...stateStyles,\r\n    ...gameStyles,\r\n  };\r\n});\r\n\r\n/**\r\n * Styled card action area with proper focus management\r\n */\r\nexport const StyledChoiceCardAction = styled(CardActionArea)(({ theme }) => ({\r\n  height: '100%',\r\n  padding: theme.spacing(2),\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n  minHeight: accessibility.touchTarget.minSize,\r\n  \r\n  '&:focus-visible': {\r\n    outline: `${accessibility.focusRing.width} ${accessibility.focusRing.style} ${accessibility.focusRing.color}`,\r\n    outlineOffset: '2px',\r\n  },\r\n})); "],"names":["StyledChoiceCard","StyledChoiceCardAction","styled","Card","theme","selected","correct","incorrect","disabled","gameType","isCorrectState","isIncorrectState","baseStyles","minHeight","borderRadius","lg","border","cursor","transition","transitions","duration","normal","opacity","pointerEvents","transform","boxShadow","shadows","cardHover","outline","accessibility","focusRing","width","style","color","outlineOffset","stateStyles","borderColor","palette","success","main","error","primary","borderWidth","borderStyle","gameStyles","display","alignItems","justifyContent","fontWeight","fontSize","light","undefined","CardActionArea","height","padding","spacing","touchTarget","minSize"],"mappings":";;;;;;;;;;;IAgBaA,gBAAgB;eAAhBA;;IAgFAC,sBAAsB;eAAtBA;;;0BAhGgC;wBAEqB;AAc3D,MAAMD,mBAAmBE,IAAAA,gBAAM,EAACC,cAAI,EAAyB,CAAC,EACnEC,KAAK,EACLC,WAAW,KAAK,EAChBC,UAAU,KAAK,EACfC,YAAY,KAAK,EACjBC,WAAW,KAAK,EAChBC,QAAQ,EACT;IACC,MAAMC,iBAAiBL,YAAYC;IACnC,MAAMK,mBAAmBN,YAAYE;IAErC,MAAMK,aAAa;QACjBC,WAAW;QACXC,cAAcA,oBAAY,CAACC,EAAE;QAC7BC,QAAQ;QACRC,QAAQ;QACRC,YAAY,CAAC,IAAI,EAAEC,mBAAW,CAACC,QAAQ,CAACC,MAAM,EAAE;QAChDC,SAASd,WAAW,MAAM;QAC1Be,eAAef,WAAW,SAAkB;QAE5C,WAAW;YACTgB,WAAW;YACXC,WAAWC,eAAO,CAACC,SAAS;QAC9B;QAEA,mBAAmB;YACjBC,SAAS,GAAGC,qBAAa,CAACC,SAAS,CAACC,KAAK,CAAC,CAAC,EAAEF,qBAAa,CAACC,SAAS,CAACE,KAAK,CAAC,CAAC,EAAEH,qBAAa,CAACC,SAAS,CAACG,KAAK,EAAE;YAC7GC,eAAe;QACjB;IACF;IAEA,MAAMC,cAAc9B,WAAW;QAC7B+B,aAAa1B,iBACTN,MAAMiC,OAAO,CAACC,OAAO,CAACC,IAAI,GAC1B5B,mBACEP,MAAMiC,OAAO,CAACG,KAAK,CAACD,IAAI,GACxBnC,MAAMiC,OAAO,CAACI,OAAO,CAACF,IAAI;QAChCG,aAAa;QACbC,aAAa;QACblB,WAAWf,iBACP,qCACAC,mBACE,qCACA;IACR,IAAI,CAAC;IAEL,MAAMiC,aAAanC,aAAa,WAAW;QACzCoC,SAAS;QACTC,YAAY;QACZC,gBAAgB;QAChBC,YAAY;QACZC,UAAU;IACZ,IAAIxC,aAAa,WAAW;QAC1BoC,SAAS;QACTC,YAAY;QACZC,gBAAgB;QAChB,sBAAsB;YACpBE,UAAU;YACV/B,YAAY;YACZ,GAAIb,YAAY;gBACdmB,WAAW;gBACXS,OAAOvB,iBACHN,MAAMiC,OAAO,CAACC,OAAO,CAACY,KAAK,GAC3BvC,mBACEP,MAAMiC,OAAO,CAACG,KAAK,CAACU,KAAK,GACzBC;YACR,CAAC;QACH;IACF,IAAI,CAAC;IAEL,OAAO;QACL,GAAGvC,UAAU;QACb,GAAGuB,WAAW;QACd,GAAGS,UAAU;IACf;AACF;AAKO,MAAM3C,yBAAyBC,IAAAA,gBAAM,EAACkD,wBAAc,EAAE,CAAC,EAAEhD,KAAK,EAAE,GAAM,CAAA;QAC3EiD,QAAQ;QACRC,SAASlD,MAAMmD,OAAO,CAAC;QACvBV,SAAS;QACTC,YAAY;QACZC,gBAAgB;QAChBlC,WAAWgB,qBAAa,CAAC2B,WAAW,CAACC,OAAO;QAE5C,mBAAmB;YACjB7B,SAAS,GAAGC,qBAAa,CAACC,SAAS,CAACC,KAAK,CAAC,CAAC,EAAEF,qBAAa,CAACC,SAAS,CAACE,KAAK,CAAC,CAAC,EAAEH,qBAAa,CAACC,SAAS,CAACG,KAAK,EAAE;YAC7GC,eAAe;QACjB;IACF,CAAA"}