3bed8980377f486cf0a72cb5fb6a8316
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, /**
 * Enhanced search bar with autocomplete suggestions from game titles, tags, and learning objectives
 * Supports keyboard navigation and highlighted matches
 */ "default", {
    enumerable: true,
    get: function() {
        return AutocompleteSearchBar;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _material = require("@mui/material");
const _Search = /*#__PURE__*/ _interop_require_default(require("@mui/icons-material/Search"));
const _Tag = /*#__PURE__*/ _interop_require_default(require("@mui/icons-material/Tag"));
const _School = /*#__PURE__*/ _interop_require_default(require("@mui/icons-material/School"));
const _Gamepad = /*#__PURE__*/ _interop_require_default(require("@mui/icons-material/Gamepad"));
const _gameData = require("../../../utils/gameData");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function AutocompleteSearchBar({ value, onChange, placeholder = "Search games, tags, or learning objectives...", debounceMs = 300 }) {
    const [suggestions, setSuggestions] = (0, _react.useState)([]);
    const [showSuggestions, setShowSuggestions] = (0, _react.useState)(false);
    const [selectedIndex, setSelectedIndex] = (0, _react.useState)(-1);
    const [isLoading, setIsLoading] = (0, _react.useState)(false);
    const inputRef = (0, _react.useRef)(null);
    const listRef = (0, _react.useRef)(null);
    const debounceRef = (0, _react.useRef)();
    // Debounced search function
    const debouncedSearch = (0, _react.useCallback)((query)=>{
        if (debounceRef.current) {
            clearTimeout(debounceRef.current);
        }
        debounceRef.current = setTimeout(()=>{
            if (query.trim()) {
                setIsLoading(true);
                const results = _gameData.gameDiscovery.getAutocompleteSuggestions(query, 8);
                setSuggestions(results);
                setShowSuggestions(results.length > 0);
                setSelectedIndex(-1);
                setIsLoading(false);
            } else {
                setSuggestions([]);
                setShowSuggestions(false);
                setSelectedIndex(-1);
            }
        }, debounceMs);
    }, [
        debounceMs
    ]);
    // Handle input change
    const handleInputChange = (newValue)=>{
        onChange(newValue);
        debouncedSearch(newValue);
    };
    // Handle suggestion selection
    const handleSuggestionSelect = (suggestion)=>{
        onChange(suggestion.value);
        setShowSuggestions(false);
        setSelectedIndex(-1);
        inputRef.current?.focus();
    };
    // Handle keyboard navigation
    const handleKeyDown = (event)=>{
        if (!showSuggestions || suggestions.length === 0) return;
        switch(event.key){
            case 'ArrowDown':
                event.preventDefault();
                setSelectedIndex((prev)=>prev < suggestions.length - 1 ? prev + 1 : prev);
                break;
            case 'ArrowUp':
                event.preventDefault();
                setSelectedIndex((prev)=>prev > 0 ? prev - 1 : -1);
                break;
            case 'Enter':
                event.preventDefault();
                if (selectedIndex >= 0 && selectedIndex < suggestions.length) {
                    handleSuggestionSelect(suggestions[selectedIndex]);
                }
                break;
            case 'Escape':
                setShowSuggestions(false);
                setSelectedIndex(-1);
                break;
        }
    };
    // Scroll selected item into view
    (0, _react.useEffect)(()=>{
        if (selectedIndex >= 0 && listRef.current) {
            const selectedElement = listRef.current.children[selectedIndex];
            if (selectedElement) {
                selectedElement.scrollIntoView({
                    block: 'nearest',
                    behavior: 'smooth'
                });
            }
        }
    }, [
        selectedIndex
    ]);
    // Close suggestions when clicking outside
    (0, _react.useEffect)(()=>{
        const handleClickOutside = (event)=>{
            const target = event.target;
            if (inputRef.current && !inputRef.current.contains(target)) {
                setShowSuggestions(false);
                setSelectedIndex(-1);
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return ()=>document.removeEventListener('mousedown', handleClickOutside);
    }, []);
    // Get icon for suggestion type
    const getSuggestionIcon = (suggestion)=>{
        switch(suggestion.type){
            case 'game':
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Gamepad.default, {});
            case 'tag':
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Tag.default, {});
            case 'objective':
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_School.default, {});
            default:
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Search.default, {});
        }
    };
    // Get subject color
    const getSubjectColor = (subject)=>{
        if (!subject) return undefined;
        return _gameData.SUBJECTS[subject]?.color;
    };
    // Highlight matching text
    const highlightMatch = (text, query)=>{
        if (!query.trim()) return text;
        const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
        const parts = text.split(regex);
        return parts.map((part, index)=>regex.test(part) ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Box, {
                component: "span",
                sx: {
                    fontWeight: 600,
                    backgroundColor: 'primary.light',
                    color: 'primary.contrastText',
                    px: 0.5,
                    borderRadius: 0.5
                },
                children: part
            }, index) : part);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
        sx: {
            position: 'relative',
            width: '100%'
        },
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.TextField, {
                ref: inputRef,
                label: "Search",
                variant: "outlined",
                value: value,
                onChange: (e)=>handleInputChange(e.target.value),
                onKeyDown: handleKeyDown,
                onFocus: ()=>{
                    if (suggestions.length > 0) {
                        setShowSuggestions(true);
                    }
                },
                fullWidth: true,
                size: "medium",
                placeholder: placeholder,
                InputProps: {
                    startAdornment: /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.InputAdornment, {
                        position: "start",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Search.default, {})
                    }),
                    inputProps: {
                        'aria-label': 'Search games with autocomplete',
                        'aria-expanded': showSuggestions,
                        'aria-haspopup': 'listbox',
                        'aria-activedescendant': selectedIndex >= 0 ? `suggestion-${selectedIndex}` : undefined,
                        autoComplete: 'off'
                    }
                },
                sx: {
                    background: '#fff',
                    '& .MuiOutlinedInput-root': {
                        '&.Mui-focused': {
                            '& .MuiOutlinedInput-notchedOutline': {
                                borderWidth: 2
                            }
                        }
                    }
                }
            }),
            showSuggestions && suggestions.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Paper, {
                elevation: 8,
                sx: {
                    position: 'absolute',
                    top: '100%',
                    left: 0,
                    right: 0,
                    zIndex: 1300,
                    maxHeight: 400,
                    overflow: 'auto',
                    mt: 1,
                    borderRadius: 2
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.List, {
                    ref: listRef,
                    dense: true,
                    role: "listbox",
                    "aria-label": "Search suggestions",
                    sx: {
                        py: 0
                    },
                    children: suggestions.map((suggestion, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_material.ListItem, {
                            disablePadding: true,
                            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.ListItemButton, {
                                id: `suggestion-${index}`,
                                selected: selectedIndex === index,
                                onClick: ()=>handleSuggestionSelect(suggestion),
                                role: "option",
                                "aria-selected": selectedIndex === index,
                                sx: {
                                    py: 1.5,
                                    '&.Mui-selected': {
                                        backgroundColor: 'primary.light',
                                        color: 'primary.contrastText',
                                        '&:hover': {
                                            backgroundColor: 'primary.main'
                                        }
                                    }
                                },
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.ListItemIcon, {
                                        sx: {
                                            minWidth: 40,
                                            color: 'inherit'
                                        },
                                        children: suggestion.emoji ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                                            variant: "h6",
                                            children: suggestion.emoji
                                        }) : getSuggestionIcon(suggestion)
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.ListItemText, {
                                        primary: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
                                            sx: {
                                                display: 'flex',
                                                alignItems: 'center',
                                                gap: 1
                                            },
                                            children: [
                                                highlightMatch(suggestion.label, value),
                                                suggestion.count && /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Chip, {
                                                    label: suggestion.count,
                                                    size: "small",
                                                    variant: "outlined",
                                                    sx: {
                                                        height: 20,
                                                        fontSize: '0.75rem'
                                                    }
                                                }),
                                                suggestion.subject && /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Chip, {
                                                    label: _gameData.SUBJECTS[suggestion.subject].icon,
                                                    size: "small",
                                                    sx: {
                                                        height: 20,
                                                        backgroundColor: getSubjectColor(suggestion.subject) + '20',
                                                        color: getSubjectColor(suggestion.subject),
                                                        border: `1px solid ${getSubjectColor(suggestion.subject)}50`
                                                    }
                                                })
                                            ]
                                        }),
                                        secondary: suggestion.gameTitle && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Typography, {
                                            variant: "caption",
                                            color: "text.secondary",
                                            children: [
                                                "from ",
                                                suggestion.gameTitle
                                            ]
                                        })
                                    })
                                ]
                            })
                        }, `${suggestion.type}-${suggestion.value}`))
                })
            }),
            isLoading && /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Box, {
                sx: {
                    position: 'absolute',
                    top: '50%',
                    right: 16,
                    transform: 'translateY(-50%)'
                }
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,