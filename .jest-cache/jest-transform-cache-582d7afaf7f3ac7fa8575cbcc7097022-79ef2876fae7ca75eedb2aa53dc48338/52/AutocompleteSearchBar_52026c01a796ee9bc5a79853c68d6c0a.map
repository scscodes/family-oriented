{"version":3,"sources":["C:\\repos\\family-oriented\\src\\shared\\components\\forms\\AutocompleteSearchBar.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useCallback, useRef, useEffect } from 'react';\r\nimport { \r\n  TextField, \r\n  InputAdornment, \r\n  Paper, \r\n  List, \r\n  ListItem, \r\n  ListItemButton,\r\n  ListItemIcon, \r\n  ListItemText,\r\n  Chip,\r\n  Box,\r\n  Typography\r\n} from '@mui/material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport TagIcon from '@mui/icons-material/Tag';\r\nimport SchoolIcon from '@mui/icons-material/School';\r\nimport GamepadIcon from '@mui/icons-material/Gamepad';\r\n\r\nimport { gameDiscovery, AutocompleteSuggestion, SUBJECTS } from '@/utils/gameData';\r\n\r\ninterface AutocompleteSearchBarProps {\r\n  value: string;\r\n  onChange: (value: string) => void;\r\n  placeholder?: string;\r\n  debounceMs?: number;\r\n}\r\n\r\n/**\r\n * Enhanced search bar with autocomplete suggestions from game titles, tags, and learning objectives\r\n * Supports keyboard navigation and highlighted matches\r\n */\r\nexport default function AutocompleteSearchBar({ \r\n  value, \r\n  onChange, \r\n  placeholder = \"Search games, tags, or learning objectives...\",\r\n  debounceMs = 300\r\n}: AutocompleteSearchBarProps) {\r\n  const [suggestions, setSuggestions] = useState<AutocompleteSuggestion[]>([]);\r\n  const [showSuggestions, setShowSuggestions] = useState(false);\r\n  const [selectedIndex, setSelectedIndex] = useState(-1);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  \r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const listRef = useRef<HTMLUListElement>(null);\r\n  const debounceRef = useRef<NodeJS.Timeout>();\r\n\r\n  // Debounced search function\r\n  const debouncedSearch = useCallback((query: string) => {\r\n    if (debounceRef.current) {\r\n      clearTimeout(debounceRef.current);\r\n    }\r\n    \r\n    debounceRef.current = setTimeout(() => {\r\n      if (query.trim()) {\r\n        setIsLoading(true);\r\n        const results = gameDiscovery.getAutocompleteSuggestions(query, 8);\r\n        setSuggestions(results);\r\n        setShowSuggestions(results.length > 0);\r\n        setSelectedIndex(-1);\r\n        setIsLoading(false);\r\n      } else {\r\n        setSuggestions([]);\r\n        setShowSuggestions(false);\r\n        setSelectedIndex(-1);\r\n      }\r\n    }, debounceMs);\r\n  }, [debounceMs]);\r\n\r\n  // Handle input change\r\n  const handleInputChange = (newValue: string) => {\r\n    onChange(newValue);\r\n    debouncedSearch(newValue);\r\n  };\r\n\r\n  // Handle suggestion selection\r\n  const handleSuggestionSelect = (suggestion: AutocompleteSuggestion) => {\r\n    onChange(suggestion.value);\r\n    setShowSuggestions(false);\r\n    setSelectedIndex(-1);\r\n    inputRef.current?.focus();\r\n  };\r\n\r\n  // Handle keyboard navigation\r\n  const handleKeyDown = (event: React.KeyboardEvent) => {\r\n    if (!showSuggestions || suggestions.length === 0) return;\r\n\r\n    switch (event.key) {\r\n      case 'ArrowDown':\r\n        event.preventDefault();\r\n        setSelectedIndex(prev => \r\n          prev < suggestions.length - 1 ? prev + 1 : prev\r\n        );\r\n        break;\r\n        \r\n      case 'ArrowUp':\r\n        event.preventDefault();\r\n        setSelectedIndex(prev => prev > 0 ? prev - 1 : -1);\r\n        break;\r\n        \r\n      case 'Enter':\r\n        event.preventDefault();\r\n        if (selectedIndex >= 0 && selectedIndex < suggestions.length) {\r\n          handleSuggestionSelect(suggestions[selectedIndex]);\r\n        }\r\n        break;\r\n        \r\n      case 'Escape':\r\n        setShowSuggestions(false);\r\n        setSelectedIndex(-1);\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Scroll selected item into view\r\n  useEffect(() => {\r\n    if (selectedIndex >= 0 && listRef.current) {\r\n      const selectedElement = listRef.current.children[selectedIndex] as HTMLElement;\r\n      if (selectedElement) {\r\n        selectedElement.scrollIntoView({\r\n          block: 'nearest',\r\n          behavior: 'smooth'\r\n        });\r\n      }\r\n    }\r\n  }, [selectedIndex]);\r\n\r\n  // Close suggestions when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      const target = event.target as Node;\r\n      if (inputRef.current && !inputRef.current.contains(target)) {\r\n        setShowSuggestions(false);\r\n        setSelectedIndex(-1);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, []);\r\n\r\n  // Get icon for suggestion type\r\n  const getSuggestionIcon = (suggestion: AutocompleteSuggestion) => {\r\n    switch (suggestion.type) {\r\n      case 'game':\r\n        return <GamepadIcon />;\r\n      case 'tag':\r\n        return <TagIcon />;\r\n      case 'objective':\r\n        return <SchoolIcon />;\r\n      default:\r\n        return <SearchIcon />;\r\n    }\r\n  };\r\n\r\n  // Get subject color\r\n  const getSubjectColor = (subject?: keyof typeof SUBJECTS) => {\r\n    if (!subject) return undefined;\r\n    return SUBJECTS[subject]?.color;\r\n  };\r\n\r\n  // Highlight matching text\r\n  const highlightMatch = (text: string, query: string) => {\r\n    if (!query.trim()) return text;\r\n    \r\n    const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi');\r\n    const parts = text.split(regex);\r\n    \r\n    return parts.map((part, index) => \r\n      regex.test(part) ? (\r\n        <Box component=\"span\" key={index} sx={{ fontWeight: 600, backgroundColor: 'primary.light', color: 'primary.contrastText', px: 0.5, borderRadius: 0.5 }}>\r\n          {part}\r\n        </Box>\r\n      ) : part\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ position: 'relative', width: '100%' }}>\r\n      <TextField\r\n        ref={inputRef}\r\n        label=\"Search\"\r\n        variant=\"outlined\"\r\n        value={value}\r\n        onChange={e => handleInputChange(e.target.value)}\r\n        onKeyDown={handleKeyDown}\r\n        onFocus={() => {\r\n          if (suggestions.length > 0) {\r\n            setShowSuggestions(true);\r\n          }\r\n        }}\r\n        fullWidth\r\n        size=\"medium\"\r\n        placeholder={placeholder}\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <SearchIcon />\r\n            </InputAdornment>\r\n          ),\r\n          inputProps: {\r\n            'aria-label': 'Search games with autocomplete',\r\n            'aria-expanded': showSuggestions,\r\n            'aria-haspopup': 'listbox',\r\n            'aria-activedescendant': selectedIndex >= 0 ? `suggestion-${selectedIndex}` : undefined,\r\n            autoComplete: 'off'\r\n          }\r\n        }}\r\n        sx={{ \r\n          background: '#fff',\r\n          '& .MuiOutlinedInput-root': {\r\n            '&.Mui-focused': {\r\n              '& .MuiOutlinedInput-notchedOutline': {\r\n                borderWidth: 2\r\n              }\r\n            }\r\n          }\r\n        }}\r\n      />\r\n\r\n      {/* Suggestions Dropdown */}\r\n      {showSuggestions && suggestions.length > 0 && (\r\n        <Paper \r\n          elevation={8}\r\n          sx={{ \r\n            position: 'absolute',\r\n            top: '100%',\r\n            left: 0,\r\n            right: 0,\r\n            zIndex: 1300,\r\n            maxHeight: 400,\r\n            overflow: 'auto',\r\n            mt: 1,\r\n            borderRadius: 2\r\n          }}\r\n        >\r\n          <List \r\n            ref={listRef}\r\n            dense \r\n            role=\"listbox\"\r\n            aria-label=\"Search suggestions\"\r\n            sx={{ py: 0 }}\r\n          >\r\n            {suggestions.map((suggestion, index) => (\r\n              <ListItem\r\n                key={`${suggestion.type}-${suggestion.value}`}\r\n                disablePadding\r\n              >\r\n                <ListItemButton\r\n                  id={`suggestion-${index}`}\r\n                  selected={selectedIndex === index}\r\n                  onClick={() => handleSuggestionSelect(suggestion)}\r\n                  role=\"option\"\r\n                  aria-selected={selectedIndex === index}\r\n                  sx={{\r\n                    py: 1.5,\r\n                    '&.Mui-selected': {\r\n                      backgroundColor: 'primary.light',\r\n                      color: 'primary.contrastText',\r\n                      '&:hover': {\r\n                        backgroundColor: 'primary.main'\r\n                      }\r\n                    }\r\n                  }}\r\n                >\r\n                <ListItemIcon sx={{ minWidth: 40, color: 'inherit' }}>\r\n                  {suggestion.emoji ? (\r\n                    <Typography variant=\"h6\">{suggestion.emoji}</Typography>\r\n                  ) : (\r\n                    getSuggestionIcon(suggestion)\r\n                  )}\r\n                </ListItemIcon>\r\n                \r\n                <ListItemText\r\n                  primary={\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                      {highlightMatch(suggestion.label, value)}\r\n                      {suggestion.count && (\r\n                        <Chip \r\n                          label={suggestion.count} \r\n                          size=\"small\" \r\n                          variant=\"outlined\"\r\n                          sx={{ height: 20, fontSize: '0.75rem' }}\r\n                        />\r\n                      )}\r\n                      {suggestion.subject && (\r\n                        <Chip \r\n                          label={SUBJECTS[suggestion.subject].icon}\r\n                          size=\"small\"\r\n                          sx={{ \r\n                            height: 20,\r\n                            backgroundColor: getSubjectColor(suggestion.subject) + '20',\r\n                            color: getSubjectColor(suggestion.subject),\r\n                            border: `1px solid ${getSubjectColor(suggestion.subject)}50`\r\n                          }}\r\n                        />\r\n                      )}\r\n                    </Box>\r\n                  }\r\n                  secondary={suggestion.gameTitle && (\r\n                    <Typography variant=\"caption\" color=\"text.secondary\">\r\n                      from {suggestion.gameTitle}\r\n                    </Typography>\r\n                  )}\r\n                />\r\n                </ListItemButton>\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Paper>\r\n      )}\r\n\r\n      {/* Loading indicator could be added here if needed */}\r\n      {isLoading && (\r\n        <Box sx={{ position: 'absolute', top: '50%', right: 16, transform: 'translateY(-50%)' }}>\r\n          {/* Could add a small spinner here */}\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n} "],"names":["AutocompleteSearchBar","value","onChange","placeholder","debounceMs","suggestions","setSuggestions","useState","showSuggestions","setShowSuggestions","selectedIndex","setSelectedIndex","isLoading","setIsLoading","inputRef","useRef","listRef","debounceRef","debouncedSearch","useCallback","query","current","clearTimeout","setTimeout","trim","results","gameDiscovery","getAutocompleteSuggestions","length","handleInputChange","newValue","handleSuggestionSelect","suggestion","focus","handleKeyDown","event","key","preventDefault","prev","useEffect","selectedElement","children","scrollIntoView","block","behavior","handleClickOutside","target","contains","document","addEventListener","removeEventListener","getSuggestionIcon","type","GamepadIcon","TagIcon","SchoolIcon","SearchIcon","getSubjectColor","subject","undefined","SUBJECTS","color","highlightMatch","text","regex","RegExp","replace","parts","split","map","part","index","test","Box","component","sx","fontWeight","backgroundColor","px","borderRadius","position","width","TextField","ref","label","variant","e","onKeyDown","onFocus","fullWidth","size","InputProps","startAdornment","InputAdornment","inputProps","autoComplete","background","borderWidth","Paper","elevation","top","left","right","zIndex","maxHeight","overflow","mt","List","dense","role","aria-label","py","ListItem","disablePadding","ListItemButton","id","selected","onClick","aria-selected","ListItemIcon","minWidth","emoji","Typography","ListItemText","primary","display","alignItems","gap","count","Chip","height","fontSize","icon","border","secondary","gameTitle","transform"],"mappings":"AAAA;;;;;+BA8BA;;;CAGC,GACD;;;eAAwBA;;;;uBAhCiC;0BAalD;+DACgB;4DACH;+DACG;gEACC;0BAEwC;;;;;;AAajD,SAASA,sBAAsB,EAC5CC,KAAK,EACLC,QAAQ,EACRC,cAAc,+CAA+C,EAC7DC,aAAa,GAAG,EACW;IAC3B,MAAM,CAACC,aAAaC,eAAe,GAAGC,IAAAA,eAAQ,EAA2B,EAAE;IAC3E,MAAM,CAACC,iBAAiBC,mBAAmB,GAAGF,IAAAA,eAAQ,EAAC;IACvD,MAAM,CAACG,eAAeC,iBAAiB,GAAGJ,IAAAA,eAAQ,EAAC,CAAC;IACpD,MAAM,CAACK,WAAWC,aAAa,GAAGN,IAAAA,eAAQ,EAAC;IAE3C,MAAMO,WAAWC,IAAAA,aAAM,EAAmB;IAC1C,MAAMC,UAAUD,IAAAA,aAAM,EAAmB;IACzC,MAAME,cAAcF,IAAAA,aAAM;IAE1B,4BAA4B;IAC5B,MAAMG,kBAAkBC,IAAAA,kBAAW,EAAC,CAACC;QACnC,IAAIH,YAAYI,OAAO,EAAE;YACvBC,aAAaL,YAAYI,OAAO;QAClC;QAEAJ,YAAYI,OAAO,GAAGE,WAAW;YAC/B,IAAIH,MAAMI,IAAI,IAAI;gBAChBX,aAAa;gBACb,MAAMY,UAAUC,uBAAa,CAACC,0BAA0B,CAACP,OAAO;gBAChEd,eAAemB;gBACfhB,mBAAmBgB,QAAQG,MAAM,GAAG;gBACpCjB,iBAAiB,CAAC;gBAClBE,aAAa;YACf,OAAO;gBACLP,eAAe,EAAE;gBACjBG,mBAAmB;gBACnBE,iBAAiB,CAAC;YACpB;QACF,GAAGP;IACL,GAAG;QAACA;KAAW;IAEf,sBAAsB;IACtB,MAAMyB,oBAAoB,CAACC;QACzB5B,SAAS4B;QACTZ,gBAAgBY;IAClB;IAEA,8BAA8B;IAC9B,MAAMC,yBAAyB,CAACC;QAC9B9B,SAAS8B,WAAW/B,KAAK;QACzBQ,mBAAmB;QACnBE,iBAAiB,CAAC;QAClBG,SAASO,OAAO,EAAEY;IACpB;IAEA,6BAA6B;IAC7B,MAAMC,gBAAgB,CAACC;QACrB,IAAI,CAAC3B,mBAAmBH,YAAYuB,MAAM,KAAK,GAAG;QAElD,OAAQO,MAAMC,GAAG;YACf,KAAK;gBACHD,MAAME,cAAc;gBACpB1B,iBAAiB2B,CAAAA,OACfA,OAAOjC,YAAYuB,MAAM,GAAG,IAAIU,OAAO,IAAIA;gBAE7C;YAEF,KAAK;gBACHH,MAAME,cAAc;gBACpB1B,iBAAiB2B,CAAAA,OAAQA,OAAO,IAAIA,OAAO,IAAI,CAAC;gBAChD;YAEF,KAAK;gBACHH,MAAME,cAAc;gBACpB,IAAI3B,iBAAiB,KAAKA,gBAAgBL,YAAYuB,MAAM,EAAE;oBAC5DG,uBAAuB1B,WAAW,CAACK,cAAc;gBACnD;gBACA;YAEF,KAAK;gBACHD,mBAAmB;gBACnBE,iBAAiB,CAAC;gBAClB;QACJ;IACF;IAEA,iCAAiC;IACjC4B,IAAAA,gBAAS,EAAC;QACR,IAAI7B,iBAAiB,KAAKM,QAAQK,OAAO,EAAE;YACzC,MAAMmB,kBAAkBxB,QAAQK,OAAO,CAACoB,QAAQ,CAAC/B,cAAc;YAC/D,IAAI8B,iBAAiB;gBACnBA,gBAAgBE,cAAc,CAAC;oBAC7BC,OAAO;oBACPC,UAAU;gBACZ;YACF;QACF;IACF,GAAG;QAAClC;KAAc;IAElB,0CAA0C;IAC1C6B,IAAAA,gBAAS,EAAC;QACR,MAAMM,qBAAqB,CAACV;YAC1B,MAAMW,SAASX,MAAMW,MAAM;YAC3B,IAAIhC,SAASO,OAAO,IAAI,CAACP,SAASO,OAAO,CAAC0B,QAAQ,CAACD,SAAS;gBAC1DrC,mBAAmB;gBACnBE,iBAAiB,CAAC;YACpB;QACF;QAEAqC,SAASC,gBAAgB,CAAC,aAAaJ;QACvC,OAAO,IAAMG,SAASE,mBAAmB,CAAC,aAAaL;IACzD,GAAG,EAAE;IAEL,+BAA+B;IAC/B,MAAMM,oBAAoB,CAACnB;QACzB,OAAQA,WAAWoB,IAAI;YACrB,KAAK;gBACH,qBAAO,qBAACC,gBAAW;YACrB,KAAK;gBACH,qBAAO,qBAACC,YAAO;YACjB,KAAK;gBACH,qBAAO,qBAACC,eAAU;YACpB;gBACE,qBAAO,qBAACC,eAAU;QACtB;IACF;IAEA,oBAAoB;IACpB,MAAMC,kBAAkB,CAACC;QACvB,IAAI,CAACA,SAAS,OAAOC;QACrB,OAAOC,kBAAQ,CAACF,QAAQ,EAAEG;IAC5B;IAEA,0BAA0B;IAC1B,MAAMC,iBAAiB,CAACC,MAAc3C;QACpC,IAAI,CAACA,MAAMI,IAAI,IAAI,OAAOuC;QAE1B,MAAMC,QAAQ,IAAIC,OAAO,CAAC,CAAC,EAAE7C,MAAM8C,OAAO,CAAC,uBAAuB,QAAQ,CAAC,CAAC,EAAE;QAC9E,MAAMC,QAAQJ,KAAKK,KAAK,CAACJ;QAEzB,OAAOG,MAAME,GAAG,CAAC,CAACC,MAAMC,QACtBP,MAAMQ,IAAI,CAACF,sBACT,qBAACG,aAAG;gBAACC,WAAU;gBAAmBC,IAAI;oBAAEC,YAAY;oBAAKC,iBAAiB;oBAAiBhB,OAAO;oBAAwBiB,IAAI;oBAAKC,cAAc;gBAAI;0BAClJT;eADwBC,SAGzBD;IAER;IAEA,qBACE,sBAACG,aAAG;QAACE,IAAI;YAAEK,UAAU;YAAYC,OAAO;QAAO;;0BAC7C,qBAACC,mBAAS;gBACRC,KAAKrE;gBACLsE,OAAM;gBACNC,SAAQ;gBACRpF,OAAOA;gBACPC,UAAUoF,CAAAA,IAAKzD,kBAAkByD,EAAExC,MAAM,CAAC7C,KAAK;gBAC/CsF,WAAWrD;gBACXsD,SAAS;oBACP,IAAInF,YAAYuB,MAAM,GAAG,GAAG;wBAC1BnB,mBAAmB;oBACrB;gBACF;gBACAgF,SAAS;gBACTC,MAAK;gBACLvF,aAAaA;gBACbwF,YAAY;oBACVC,8BACE,qBAACC,wBAAc;wBAACb,UAAS;kCACvB,cAAA,qBAACxB,eAAU;;oBAGfsC,YAAY;wBACV,cAAc;wBACd,iBAAiBtF;wBACjB,iBAAiB;wBACjB,yBAAyBE,iBAAiB,IAAI,CAAC,WAAW,EAAEA,eAAe,GAAGiD;wBAC9EoC,cAAc;oBAChB;gBACF;gBACApB,IAAI;oBACFqB,YAAY;oBACZ,4BAA4B;wBAC1B,iBAAiB;4BACf,sCAAsC;gCACpCC,aAAa;4BACf;wBACF;oBACF;gBACF;;YAIDzF,mBAAmBH,YAAYuB,MAAM,GAAG,mBACvC,qBAACsE,eAAK;gBACJC,WAAW;gBACXxB,IAAI;oBACFK,UAAU;oBACVoB,KAAK;oBACLC,MAAM;oBACNC,OAAO;oBACPC,QAAQ;oBACRC,WAAW;oBACXC,UAAU;oBACVC,IAAI;oBACJ3B,cAAc;gBAChB;0BAEA,cAAA,qBAAC4B,cAAI;oBACHxB,KAAKnE;oBACL4F,KAAK;oBACLC,MAAK;oBACLC,cAAW;oBACXnC,IAAI;wBAAEoC,IAAI;oBAAE;8BAEX1G,YAAYgE,GAAG,CAAC,CAACrC,YAAYuC,sBAC5B,qBAACyC,kBAAQ;4BAEPC,cAAc;sCAEd,cAAA,sBAACC,wBAAc;gCACbC,IAAI,CAAC,WAAW,EAAE5C,OAAO;gCACzB6C,UAAU1G,kBAAkB6D;gCAC5B8C,SAAS,IAAMtF,uBAAuBC;gCACtC6E,MAAK;gCACLS,iBAAe5G,kBAAkB6D;gCACjCI,IAAI;oCACFoC,IAAI;oCACJ,kBAAkB;wCAChBlC,iBAAiB;wCACjBhB,OAAO;wCACP,WAAW;4CACTgB,iBAAiB;wCACnB;oCACF;gCACF;;kDAEF,qBAAC0C,sBAAY;wCAAC5C,IAAI;4CAAE6C,UAAU;4CAAI3D,OAAO;wCAAU;kDAChD7B,WAAWyF,KAAK,iBACf,qBAACC,oBAAU;4CAACrC,SAAQ;sDAAMrD,WAAWyF,KAAK;6CAE1CtE,kBAAkBnB;;kDAItB,qBAAC2F,sBAAY;wCACXC,uBACE,sBAACnD,aAAG;4CAACE,IAAI;gDAAEkD,SAAS;gDAAQC,YAAY;gDAAUC,KAAK;4CAAE;;gDACtDjE,eAAe9B,WAAWoD,KAAK,EAAEnF;gDACjC+B,WAAWgG,KAAK,kBACf,qBAACC,cAAI;oDACH7C,OAAOpD,WAAWgG,KAAK;oDACvBtC,MAAK;oDACLL,SAAQ;oDACRV,IAAI;wDAAEuD,QAAQ;wDAAIC,UAAU;oDAAU;;gDAGzCnG,WAAW0B,OAAO,kBACjB,qBAACuE,cAAI;oDACH7C,OAAOxB,kBAAQ,CAAC5B,WAAW0B,OAAO,CAAC,CAAC0E,IAAI;oDACxC1C,MAAK;oDACLf,IAAI;wDACFuD,QAAQ;wDACRrD,iBAAiBpB,gBAAgBzB,WAAW0B,OAAO,IAAI;wDACvDG,OAAOJ,gBAAgBzB,WAAW0B,OAAO;wDACzC2E,QAAQ,CAAC,UAAU,EAAE5E,gBAAgBzB,WAAW0B,OAAO,EAAE,EAAE,CAAC;oDAC9D;;;;wCAKR4E,WAAWtG,WAAWuG,SAAS,kBAC7B,sBAACb,oBAAU;4CAACrC,SAAQ;4CAAUxB,OAAM;;gDAAiB;gDAC7C7B,WAAWuG,SAAS;;;;;;2BAxD3B,GAAGvG,WAAWoB,IAAI,CAAC,CAAC,EAAEpB,WAAW/B,KAAK,EAAE;;;YAoEtDW,2BACC,qBAAC6D,aAAG;gBAACE,IAAI;oBAAEK,UAAU;oBAAYoB,KAAK;oBAAOE,OAAO;oBAAIkC,WAAW;gBAAmB;;;;AAM9F"}