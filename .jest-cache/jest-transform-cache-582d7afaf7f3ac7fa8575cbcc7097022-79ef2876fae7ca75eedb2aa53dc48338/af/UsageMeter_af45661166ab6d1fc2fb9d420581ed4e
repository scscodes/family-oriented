6a5d3ed5e342b1648dce1604021678b0
/**
 * UsageMeter Component
 * Displays subscription usage against limits with visual indicators
 * Shows upgrade prompts when approaching or exceeding limits
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    UsageOverview: function() {
        return UsageOverview;
    },
    /**
 * Usage meter with subscription-aware limits and upgrade prompts
 */ default: function() {
        return UsageMeter;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _material = require("@mui/material");
const _Warning = /*#__PURE__*/ _interop_require_default(require("@mui/icons-material/Warning"));
const _Error = /*#__PURE__*/ _interop_require_default(require("@mui/icons-material/Error"));
const _CheckCircle = /*#__PURE__*/ _interop_require_default(require("@mui/icons-material/CheckCircle"));
const _Upgrade = /*#__PURE__*/ _interop_require_default(require("@mui/icons-material/Upgrade"));
const _useSubscription = require("../../../hooks/useSubscription");
const _TierTransitionButton = /*#__PURE__*/ _interop_require_default(require("../../../features/subscription/components/TierTransitionButton"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function UsageMeter({ limitType, currentUsage, label, showUpgradePrompt = true, compact = false, warningThreshold = 0.8, hideWhenUnlimited = true }) {
    const { checkUsageLimit, formatFeatureMessage, tier } = (0, _useSubscription.useSubscription)();
    const usageResult = checkUsageLimit(limitType, currentUsage);
    const limit = usageResult.limit || 0;
    // Hide meter for effectively unlimited plans (like enterprise)
    if (hideWhenUnlimited && limit >= 10000) {
        return null;
    }
    const percentage = Math.min(currentUsage / limit * 100, 100);
    const isWarning = currentUsage / limit >= warningThreshold;
    const isError = !usageResult.allowed;
    const displayLabel = label || limitType.replace(/_/g, ' ').replace(/\b\w/g, (l)=>l.toUpperCase());
    // Determine color and icon based on usage
    let color = 'primary';
    let icon = /*#__PURE__*/ (0, _jsxruntime.jsx)(_CheckCircle.default, {
        color: "success"
    });
    let statusText = 'Good';
    if (isError) {
        color = 'error';
        icon = /*#__PURE__*/ (0, _jsxruntime.jsx)(_Error.default, {
            color: "error"
        });
        statusText = 'Limit Exceeded';
    } else if (isWarning) {
        color = 'warning';
        icon = /*#__PURE__*/ (0, _jsxruntime.jsx)(_Warning.default, {
            color: "warning"
        });
        statusText = 'Approaching Limit';
    }
    if (compact) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
            sx: {
                display: 'flex',
                alignItems: 'center',
                gap: 2,
                minWidth: 200
            },
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                    variant: "body2",
                    color: "text.secondary",
                    sx: {
                        minWidth: 80
                    },
                    children: displayLabel
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Box, {
                    sx: {
                        flex: 1
                    },
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.LinearProgress, {
                        variant: "determinate",
                        value: percentage,
                        color: color,
                        sx: {
                            height: 6,
                            borderRadius: 3
                        }
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Typography, {
                    variant: "body2",
                    color: isError ? 'error.main' : 'text.primary',
                    sx: {
                        minWidth: 50
                    },
                    children: [
                        currentUsage,
                        "/",
                        limit === 10000 ? '∞' : limit
                    ]
                }),
                isError && showUpgradePrompt && usageResult.upgradeRequired && /*#__PURE__*/ (0, _jsxruntime.jsx)(_TierTransitionButton.default, {
                    targetTier: usageResult.upgradeRequired,
                    size: "small",
                    variant: "outlined"
                })
            ]
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
        sx: {
            mb: 2
        },
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
                sx: {
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center',
                    mb: 1
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
                        sx: {
                            display: 'flex',
                            alignItems: 'center',
                            gap: 1
                        },
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                                variant: "body2",
                                color: "text.secondary",
                                children: displayLabel
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Chip, {
                                icon: icon,
                                label: statusText,
                                size: "small",
                                variant: "outlined",
                                color: color
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Typography, {
                        variant: "body2",
                        color: isError ? 'error.main' : 'text.primary',
                        sx: {
                            fontWeight: isError ? 'bold' : 'normal'
                        },
                        children: [
                            currentUsage,
                            " / ",
                            limit === 10000 ? '∞' : limit
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.LinearProgress, {
                variant: "determinate",
                value: percentage,
                color: color,
                sx: {
                    height: 8,
                    borderRadius: 4,
                    mb: isError ? 1 : 0
                }
            }),
            isError && /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Alert, {
                severity: "error",
                sx: {
                    mt: 2
                },
                action: showUpgradePrompt && usageResult.upgradeRequired ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_TierTransitionButton.default, {
                    targetTier: usageResult.upgradeRequired,
                    size: "small",
                    variant: "contained"
                }) : undefined,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                    variant: "body2",
                    children: formatFeatureMessage(usageResult)
                })
            }),
            isWarning && !isError && showUpgradePrompt && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
                sx: {
                    mt: 1,
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center'
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Typography, {
                        variant: "caption",
                        color: "warning.main",
                        children: [
                            "Approaching your ",
                            tier,
                            " plan limit"
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Button, {
                        size: "small",
                        startIcon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Upgrade.default, {}),
                        onClick: ()=>{
                            // This would open upgrade flow
                            console.log('Open upgrade flow for', limitType);
                        },
                        children: "Upgrade"
                    })
                ]
            })
        ]
    });
}
function UsageOverview({ compact = false, showUpgradePrompts = true }) {
    const { currentUsage } = (0, _useSubscription.useSubscription)();
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Stack, {
        spacing: compact ? 1 : 2,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(UsageMeter, {
                limitType: "avatars",
                currentUsage: currentUsage.avatarsCount,
                label: "Children (Avatars)",
                compact: compact,
                showUpgradePrompt: showUpgradePrompts
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(UsageMeter, {
                limitType: "collections_per_avatar",
                currentUsage: 5,
                label: "Collections per Child",
                compact: compact,
                showUpgradePrompt: showUpgradePrompts
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(UsageMeter, {
                limitType: "sessions_per_month",
                currentUsage: 150,
                label: "Sessions This Month",
                compact: compact,
                showUpgradePrompt: showUpgradePrompts
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,