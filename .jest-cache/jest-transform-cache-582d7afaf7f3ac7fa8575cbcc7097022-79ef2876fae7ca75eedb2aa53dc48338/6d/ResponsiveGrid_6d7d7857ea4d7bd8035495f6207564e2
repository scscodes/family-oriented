f39b6cfd22b265fa5138f4a891a02728
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    FeatureGrid: function() {
        return FeatureGrid;
    },
    OptionGrid: function() {
        return OptionGrid;
    },
    ResponsiveGrid: function() {
        return ResponsiveGrid;
    },
    SubjectGrid: function() {
        return SubjectGrid;
    }
});
const _material = require("@mui/material");
const _tokens = require("../../theme/tokens");
const ResponsiveGrid = (0, _material.styled)(_material.Box)(({ theme, columns = {
    xs: 1,
    sm: 2,
    md: 3,
    lg: 4
}, gap = 2, minItemWidth = '200px' })=>({
        display: 'grid',
        gap: theme.spacing(gap),
        gridTemplateColumns: `repeat(auto-fit, minmax(${minItemWidth}, 1fr))`,
        '& > *': {
            minWidth: 0
        },
        [theme.breakpoints.down('sm')]: {
            gridTemplateColumns: `repeat(${columns.xs || 1}, 1fr)`,
            gap: theme.spacing(gap * 0.75)
        },
        [theme.breakpoints.between('sm', 'md')]: {
            gridTemplateColumns: `repeat(${columns.sm || 2}, 1fr)`
        },
        [theme.breakpoints.between('md', 'lg')]: {
            gridTemplateColumns: `repeat(${columns.md || 3}, 1fr)`
        },
        [theme.breakpoints.up('lg')]: {
            gridTemplateColumns: `repeat(${columns.lg || 4}, 1fr)`
        }
    }));
const OptionGrid = (0, _material.styled)(_material.Box)(({ theme, optionCount = 4 })=>{
    const getOptimalColumns = (count)=>{
        if (count <= 2) return {
            xs: 1,
            sm: 2,
            md: 2,
            lg: 2
        };
        if (count <= 4) return {
            xs: 1,
            sm: 2,
            md: 2,
            lg: 2
        };
        if (count <= 6) return {
            xs: 2,
            sm: 2,
            md: 3,
            lg: 3
        };
        return {
            xs: 2,
            sm: 3,
            md: 4,
            lg: 4
        };
    };
    const columns = getOptimalColumns(optionCount);
    return {
        display: 'grid',
        gap: _tokens.spacing.md,
        maxWidth: '800px',
        margin: '0 auto',
        [theme.breakpoints.down('sm')]: {
            gridTemplateColumns: `repeat(${columns.xs}, 1fr)`,
            gap: _tokens.spacing.sm,
            padding: `0 ${_tokens.spacing.sm}px`
        },
        [theme.breakpoints.between('sm', 'md')]: {
            gridTemplateColumns: `repeat(${columns.sm}, 1fr)`
        },
        [theme.breakpoints.between('md', 'lg')]: {
            gridTemplateColumns: `repeat(${columns.md}, 1fr)`
        },
        [theme.breakpoints.up('lg')]: {
            gridTemplateColumns: `repeat(${columns.lg}, 1fr)`
        },
        '& > *': {
            minHeight: '100px',
            aspectRatio: optionCount <= 4 ? '1' : 'auto'
        }
    };
});
const FeatureGrid = (0, _material.styled)(_material.Box)(({ theme })=>({
        display: 'grid',
        gap: _tokens.spacing.xl,
        gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
        alignItems: 'start',
        [theme.breakpoints.down('md')]: {
            gap: _tokens.spacing.lg,
            gridTemplateColumns: '1fr'
        },
        [theme.breakpoints.up('md')]: {
            gridTemplateColumns: 'repeat(3, 1fr)'
        },
        '& > *': {
            height: '100%'
        }
    }));
const SubjectGrid = (0, _material.styled)(_material.Box)(({ theme })=>({
        display: 'grid',
        gap: _tokens.spacing.md,
        gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',
        marginBottom: _tokens.spacing.xl,
        [theme.breakpoints.down('sm')]: {
            gridTemplateColumns: '1fr'
        },
        [theme.breakpoints.between('sm', 'lg')]: {
            gridTemplateColumns: 'repeat(2, 1fr)'
        },
        [theme.breakpoints.up('lg')]: {
            gridTemplateColumns: 'repeat(4, 1fr)'
        },
        '& > *': {
            minHeight: '120px',
            transition: `all ${_tokens.spacing.md * 4}ms ease-in-out`
        }
    }));

//# sourceMappingURL=data:application/json;base64,