{"version":3,"sources":["C:\\repos\\family-oriented\\src\\utils\\__tests__\\analytics.test.ts"],"sourcesContent":["/**\r\n * Enhanced Analytics Service Tests\r\n * Updated with timeout protection, error boundary testing, and performance validation\r\n */\r\n\r\nimport { analyticsService } from '../analyticsService';\r\n\r\n// Test timeout constants\r\nconst TEST_TIMEOUTS = {\r\n  FAST: 2000,\r\n  MEDIUM: 5000,\r\n  SLOW: 8000\r\n} as const;\r\n\r\n// Mock data constants\r\nconst MOCK_DATA = {\r\n  sessionId: 'mock-session-id',\r\n  metrics: {\r\n    totalGamesPlayed: 1,\r\n    averageSessionDuration: 60,\r\n    overallCompletionRate: 1,\r\n    skillLevelDistribution: { beginner: 1 },\r\n    subjectPreferences: { Mathematics: 1 },\r\n    learningVelocity: 1,\r\n    engagementScore: 80\r\n  },\r\n  recommendations: [\r\n    { gameId: 'letters', reason: 'Try letters next!', priority: 8, estimatedDifficulty: 'beginner', learningObjectives: [], prerequisitesMet: true }\r\n  ],\r\n  analytics: {\r\n    totalSessions: 1,\r\n    uniquePlayers: 1,\r\n    averageDuration: 60,\r\n    completionRate: 1,\r\n    popularGames: [],\r\n    learningEffectiveness: {}\r\n  }\r\n} as const;\r\n\r\ndescribe('Analytics Service - Enhanced Validation', () => {\r\n  const testAvatarId = '00000000-0000-0000-0000-000000000005';\r\n  const testGameId = 'numbers' as const;\r\n  const testSettings = { difficulty: 'easy', questionsPerSession: 5 };\r\n\r\n  // Setup fresh mocks before each test\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // Setup mocks with consistent return values\r\n    jest.spyOn(analyticsService, 'startGameSession').mockResolvedValue(MOCK_DATA.sessionId);\r\n    jest.spyOn(analyticsService, 'trackEvent').mockResolvedValue(undefined);\r\n    jest.spyOn(analyticsService, 'completeGameSession').mockResolvedValue(undefined);\r\n    jest.spyOn(analyticsService, 'getPerformanceMetrics').mockResolvedValue(MOCK_DATA.metrics);\r\n    jest.spyOn(analyticsService, 'getLearningPathRecommendations').mockResolvedValue(MOCK_DATA.recommendations);\r\n    jest.spyOn(analyticsService, 'getAggregateAnalytics').mockResolvedValue(MOCK_DATA.analytics);\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.restoreAllMocks();\r\n  });\r\n\r\n  describe('Session Management', () => {\r\n    test('should start a game session with timeout protection', async () => {\r\n      const startTime = performance.now();\r\n      \r\n      const sessionPromise = analyticsService.startGameSession(\r\n        testAvatarId, \r\n        testGameId, \r\n        testSettings\r\n      );\r\n      \r\n      // Add timeout protection using Promise.race\r\n      const sessionId = await Promise.race([\r\n        sessionPromise,\r\n        new Promise<never>((_, reject) => \r\n          setTimeout(() => reject(new Error('Session start timeout')), TEST_TIMEOUTS.FAST)\r\n        )\r\n      ]);\r\n      \r\n      const executionTime = performance.now() - startTime;\r\n      \r\n      expect(sessionId).toBeDefined();\r\n      expect(typeof sessionId).toBe('string');\r\n      expect(sessionId.length).toBeGreaterThan(0);\r\n      expect(executionTime).toBeLessThan(1000); // Performance check\r\n    }, TEST_TIMEOUTS.MEDIUM);\r\n\r\n    test('should track events without errors', async () => {\r\n      const sessionId = await analyticsService.startGameSession(\r\n        testAvatarId, \r\n        testGameId, \r\n        testSettings\r\n      );\r\n      \r\n      // Test each call individually without using .resolves\r\n      const result1 = await analyticsService.trackEvent(sessionId, testAvatarId, 'question_start', {});\r\n      expect(result1).toBeUndefined();\r\n      \r\n      const result2 = await analyticsService.trackEvent(sessionId, testAvatarId, 'question_answer', { correct: true });\r\n      expect(result2).toBeUndefined();\r\n      \r\n      const result3 = await analyticsService.trackEvent(sessionId, testAvatarId, 'game_pause', {});\r\n      expect(result3).toBeUndefined();\r\n    });\r\n\r\n    test('should complete session and generate metrics', async () => {\r\n      const sessionId = await analyticsService.startGameSession(\r\n        testAvatarId, \r\n        testGameId, \r\n        testSettings\r\n      );\r\n      await analyticsService.trackEvent(sessionId, testAvatarId, 'question_answer', { correct: true });\r\n      await analyticsService.trackEvent(sessionId, testAvatarId, 'question_answer', { correct: false });\r\n      \r\n      const result = await analyticsService.completeGameSession(sessionId, 75, 2, 1);\r\n      expect(result).toBeUndefined();\r\n    });\r\n\r\n    test('should generate performance metrics', async () => {\r\n      const metrics = await analyticsService.getPerformanceMetrics(testAvatarId);\r\n      expect(metrics).toBeDefined();\r\n      expect(typeof metrics.totalGamesPlayed).toBe('number');\r\n      expect(typeof metrics.averageSessionDuration).toBe('number');\r\n      expect(typeof metrics.overallCompletionRate).toBe('number');\r\n      expect(typeof metrics.engagementScore).toBe('number');\r\n    });\r\n\r\n    test('should generate learning path recommendations', async () => {\r\n      const recommendations = await analyticsService.getLearningPathRecommendations(testAvatarId, 3);\r\n      expect(Array.isArray(recommendations)).toBe(true);\r\n      expect(recommendations.length).toBeLessThanOrEqual(3);\r\n      recommendations.forEach(rec => {\r\n        expect(rec).toHaveProperty('gameId');\r\n        expect(rec).toHaveProperty('reason');\r\n        expect(rec).toHaveProperty('priority');\r\n        expect(typeof rec.priority).toBe('number');\r\n        expect(rec.priority).toBeGreaterThanOrEqual(1);\r\n        expect(rec.priority).toBeLessThanOrEqual(10);\r\n      });\r\n    });\r\n\r\n    test('should generate aggregate analytics', async () => {\r\n      const analytics = await analyticsService.getAggregateAnalytics();\r\n      expect(analytics).toBeDefined();\r\n      expect(typeof analytics.totalSessions).toBe('number');\r\n      expect(typeof analytics.uniquePlayers).toBe('number');\r\n      expect(typeof analytics.averageDuration).toBe('number');\r\n      expect(typeof analytics.completionRate).toBe('number');\r\n      expect(Array.isArray(analytics.popularGames)).toBe(true);\r\n    });\r\n  });\r\n});"],"names":["TEST_TIMEOUTS","FAST","MEDIUM","SLOW","MOCK_DATA","sessionId","metrics","totalGamesPlayed","averageSessionDuration","overallCompletionRate","skillLevelDistribution","beginner","subjectPreferences","Mathematics","learningVelocity","engagementScore","recommendations","gameId","reason","priority","estimatedDifficulty","learningObjectives","prerequisitesMet","analytics","totalSessions","uniquePlayers","averageDuration","completionRate","popularGames","learningEffectiveness","describe","testAvatarId","testGameId","testSettings","difficulty","questionsPerSession","beforeEach","jest","clearAllMocks","spyOn","analyticsService","mockResolvedValue","undefined","afterEach","restoreAllMocks","test","startTime","performance","now","sessionPromise","startGameSession","Promise","race","_","reject","setTimeout","Error","executionTime","expect","toBeDefined","toBe","length","toBeGreaterThan","toBeLessThan","result1","trackEvent","toBeUndefined","result2","correct","result3","result","completeGameSession","getPerformanceMetrics","getLearningPathRecommendations","Array","isArray","toBeLessThanOrEqual","forEach","rec","toHaveProperty","toBeGreaterThanOrEqual","getAggregateAnalytics"],"mappings":"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"}