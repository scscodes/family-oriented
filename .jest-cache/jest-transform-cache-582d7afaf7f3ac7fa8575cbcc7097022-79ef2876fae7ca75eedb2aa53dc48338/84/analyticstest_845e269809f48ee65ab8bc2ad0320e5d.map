{"version":3,"sources":["C:\\repos\\family-oriented\\src\\utils\\__tests__\\analytics.test.ts"],"sourcesContent":["/**\r\n * Enhanced Analytics Service Tests\r\n * Updated with timeout protection, error boundary testing, and performance validation\r\n */\r\n\r\nimport { analyticsService } from '../analyticsService';\r\n\r\n// Test timeout constants\r\nconst TEST_TIMEOUTS = {\r\n  FAST: 2000,\r\n  MEDIUM: 5000,\r\n  SLOW: 8000\r\n} as const;\r\n\r\n// Mock all async Supabase calls\r\nbeforeAll(() => {\r\n  jest.spyOn(analyticsService, 'startGameSession').mockImplementation(async () => 'mock-session-id');\r\n  jest.spyOn(analyticsService, 'trackEvent').mockImplementation(async () => undefined);\r\n  jest.spyOn(analyticsService, 'completeGameSession').mockImplementation(async () => undefined);\r\n  jest.spyOn(analyticsService, 'getPerformanceMetrics').mockImplementation(async () => ({\r\n    totalGamesPlayed: 1,\r\n    averageSessionDuration: 60,\r\n    overallCompletionRate: 1,\r\n    skillLevelDistribution: { beginner: 1 },\r\n    subjectPreferences: { Mathematics: 1 },\r\n    learningVelocity: 1,\r\n    engagementScore: 80\r\n  }));\r\n  jest.spyOn(analyticsService, 'getLearningPathRecommendations').mockImplementation(async () => ([\r\n    { gameId: 'letters', reason: 'Try letters next!', priority: 8, estimatedDifficulty: 'beginner', learningObjectives: [], prerequisitesMet: true }\r\n  ]));\r\n  jest.spyOn(analyticsService, 'getAggregateAnalytics').mockImplementation(async () => ({\r\n    totalSessions: 1,\r\n    uniquePlayers: 1,\r\n    averageDuration: 60,\r\n    completionRate: 1,\r\n    popularGames: [],\r\n    learningEffectiveness: {}\r\n  }));\r\n});\r\n\r\ndescribe('Analytics Service - Enhanced Validation', () => {\r\n  const testAvatarId = '00000000-0000-0000-0000-000000000005';\r\n  const testGameId = 'numbers' as const;\r\n  const testSettings = { difficulty: 'easy', questionsPerSession: 5 };\r\n\r\n  // Enhanced setup and cleanup\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.resetAllMocks();\r\n  });\r\n\r\n  describe('Session Management', () => {\r\n    test('should start a game session with timeout protection', async () => {\r\n      const startTime = performance.now();\r\n      \r\n      const sessionPromise = analyticsService.startGameSession(\r\n        testAvatarId, \r\n        testGameId, \r\n        testSettings\r\n      );\r\n      \r\n      // Add timeout protection\r\n      const sessionId = await Promise.race([\r\n        sessionPromise,\r\n        new Promise<never>((_, reject) => \r\n          setTimeout(() => reject(new Error('Session start timeout')), TEST_TIMEOUTS.FAST)\r\n        )\r\n      ]);\r\n      \r\n      const executionTime = performance.now() - startTime;\r\n      \r\n      expect(sessionId).toBeDefined();\r\n      expect(typeof sessionId).toBe('string');\r\n      expect(sessionId.length).toBeGreaterThan(0);\r\n      expect(executionTime).toBeLessThan(1000); // Performance check\r\n    }, TEST_TIMEOUTS.MEDIUM);\r\n\r\n  test('should track events without errors', async () => {\r\n    const sessionId = await analyticsService.startGameSession(\r\n      testAvatarId, \r\n      testGameId, \r\n      testSettings\r\n    );\r\n    await expect(analyticsService.trackEvent(sessionId, testAvatarId, 'question_start', {})).resolves.toBeUndefined();\r\n    await expect(analyticsService.trackEvent(sessionId, testAvatarId, 'question_answer', { correct: true })).resolves.toBeUndefined();\r\n    await expect(analyticsService.trackEvent(sessionId, testAvatarId, 'game_pause', {})).resolves.toBeUndefined();\r\n  });\r\n\r\n  test('should complete session and generate metrics', async () => {\r\n    const sessionId = await analyticsService.startGameSession(\r\n      testAvatarId, \r\n      testGameId, \r\n      testSettings\r\n    );\r\n    await analyticsService.trackEvent(sessionId, testAvatarId, 'question_answer', { correct: true });\r\n    await analyticsService.trackEvent(sessionId, testAvatarId, 'question_answer', { correct: false });\r\n    await expect(analyticsService.completeGameSession(sessionId, 75, 2, 1)).resolves.toBeUndefined();\r\n  });\r\n\r\n  test('should generate performance metrics', async () => {\r\n    const metrics = await analyticsService.getPerformanceMetrics(testAvatarId);\r\n    expect(metrics).toBeDefined();\r\n    expect(typeof metrics.totalGamesPlayed).toBe('number');\r\n    expect(typeof metrics.averageSessionDuration).toBe('number');\r\n    expect(typeof metrics.overallCompletionRate).toBe('number');\r\n    expect(typeof metrics.engagementScore).toBe('number');\r\n  });\r\n\r\n  test('should generate learning path recommendations', async () => {\r\n    const recommendations = await analyticsService.getLearningPathRecommendations(testAvatarId, 3);\r\n    expect(Array.isArray(recommendations)).toBe(true);\r\n    expect(recommendations.length).toBeLessThanOrEqual(3);\r\n    recommendations.forEach(rec => {\r\n      expect(rec).toHaveProperty('gameId');\r\n      expect(rec).toHaveProperty('reason');\r\n      expect(rec).toHaveProperty('priority');\r\n      expect(typeof rec.priority).toBe('number');\r\n      expect(rec.priority).toBeGreaterThanOrEqual(1);\r\n      expect(rec.priority).toBeLessThanOrEqual(10);\r\n    });\r\n  });\r\n\r\n  test('should generate aggregate analytics', async () => {\r\n    const analytics = await analyticsService.getAggregateAnalytics();\r\n    expect(analytics).toBeDefined();\r\n    expect(typeof analytics.totalSessions).toBe('number');\r\n    expect(typeof analytics.uniquePlayers).toBe('number');\r\n    expect(typeof analytics.averageDuration).toBe('number');\r\n    expect(typeof analytics.completionRate).toBe('number');\r\n    expect(Array.isArray(analytics.popularGames)).toBe(true);\r\n  });\r\n  });\r\n});"],"names":["TEST_TIMEOUTS","FAST","MEDIUM","SLOW","beforeAll","jest","spyOn","analyticsService","mockImplementation","undefined","totalGamesPlayed","averageSessionDuration","overallCompletionRate","skillLevelDistribution","beginner","subjectPreferences","Mathematics","learningVelocity","engagementScore","gameId","reason","priority","estimatedDifficulty","learningObjectives","prerequisitesMet","totalSessions","uniquePlayers","averageDuration","completionRate","popularGames","learningEffectiveness","describe","testAvatarId","testGameId","testSettings","difficulty","questionsPerSession","beforeEach","clearAllMocks","afterEach","resetAllMocks","test","startTime","performance","now","sessionPromise","startGameSession","sessionId","Promise","race","_","reject","setTimeout","Error","executionTime","expect","toBeDefined","toBe","length","toBeGreaterThan","toBeLessThan","trackEvent","resolves","toBeUndefined","correct","completeGameSession","metrics","getPerformanceMetrics","recommendations","getLearningPathRecommendations","Array","isArray","toBeLessThanOrEqual","forEach","rec","toHaveProperty","toBeGreaterThanOrEqual","analytics","getAggregateAnalytics"],"mappings":"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"}