d3bba5245fc850ac8780870ce06ca12a
/**
 * Enhanced Analytics Service Tests
 * Updated with timeout protection, error boundary testing, and performance validation
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _analyticsService = require("../analyticsService");
// Test timeout constants
const TEST_TIMEOUTS = {
    FAST: 2000,
    MEDIUM: 5000,
    SLOW: 8000
};
// Mock all async Supabase calls
beforeAll(()=>{
    jest.spyOn(_analyticsService.analyticsService, 'startGameSession').mockImplementation(async ()=>'mock-session-id');
    jest.spyOn(_analyticsService.analyticsService, 'trackEvent').mockImplementation(async ()=>undefined);
    jest.spyOn(_analyticsService.analyticsService, 'completeGameSession').mockImplementation(async ()=>undefined);
    jest.spyOn(_analyticsService.analyticsService, 'getPerformanceMetrics').mockImplementation(async ()=>({
            totalGamesPlayed: 1,
            averageSessionDuration: 60,
            overallCompletionRate: 1,
            skillLevelDistribution: {
                beginner: 1
            },
            subjectPreferences: {
                Mathematics: 1
            },
            learningVelocity: 1,
            engagementScore: 80
        }));
    jest.spyOn(_analyticsService.analyticsService, 'getLearningPathRecommendations').mockImplementation(async ()=>[
            {
                gameId: 'letters',
                reason: 'Try letters next!',
                priority: 8,
                estimatedDifficulty: 'beginner',
                learningObjectives: [],
                prerequisitesMet: true
            }
        ]);
    jest.spyOn(_analyticsService.analyticsService, 'getAggregateAnalytics').mockImplementation(async ()=>({
            totalSessions: 1,
            uniquePlayers: 1,
            averageDuration: 60,
            completionRate: 1,
            popularGames: [],
            learningEffectiveness: {}
        }));
});
describe('Analytics Service - Enhanced Validation', ()=>{
    const testAvatarId = '00000000-0000-0000-0000-000000000005';
    const testGameId = 'numbers';
    const testSettings = {
        difficulty: 'easy',
        questionsPerSession: 5
    };
    // Enhanced setup and cleanup
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    afterEach(()=>{
        jest.resetAllMocks();
    });
    describe('Session Management', ()=>{
        test('should start a game session with timeout protection', async ()=>{
            const startTime = performance.now();
            const sessionPromise = _analyticsService.analyticsService.startGameSession(testAvatarId, testGameId, testSettings);
            // Add timeout protection
            const sessionId = await Promise.race([
                sessionPromise,
                new Promise((_, reject)=>setTimeout(()=>reject(new Error('Session start timeout')), TEST_TIMEOUTS.FAST))
            ]);
            const executionTime = performance.now() - startTime;
            expect(sessionId).toBeDefined();
            expect(typeof sessionId).toBe('string');
            expect(sessionId.length).toBeGreaterThan(0);
            expect(executionTime).toBeLessThan(1000); // Performance check
        }, TEST_TIMEOUTS.MEDIUM);
        test('should track events without errors', async ()=>{
            const sessionId = await _analyticsService.analyticsService.startGameSession(testAvatarId, testGameId, testSettings);
            await expect(_analyticsService.analyticsService.trackEvent(sessionId, testAvatarId, 'question_start', {})).resolves.toBeUndefined();
            await expect(_analyticsService.analyticsService.trackEvent(sessionId, testAvatarId, 'question_answer', {
                correct: true
            })).resolves.toBeUndefined();
            await expect(_analyticsService.analyticsService.trackEvent(sessionId, testAvatarId, 'game_pause', {})).resolves.toBeUndefined();
        });
        test('should complete session and generate metrics', async ()=>{
            const sessionId = await _analyticsService.analyticsService.startGameSession(testAvatarId, testGameId, testSettings);
            await _analyticsService.analyticsService.trackEvent(sessionId, testAvatarId, 'question_answer', {
                correct: true
            });
            await _analyticsService.analyticsService.trackEvent(sessionId, testAvatarId, 'question_answer', {
                correct: false
            });
            await expect(_analyticsService.analyticsService.completeGameSession(sessionId, 75, 2, 1)).resolves.toBeUndefined();
        });
        test('should generate performance metrics', async ()=>{
            const metrics = await _analyticsService.analyticsService.getPerformanceMetrics(testAvatarId);
            expect(metrics).toBeDefined();
            expect(typeof metrics.totalGamesPlayed).toBe('number');
            expect(typeof metrics.averageSessionDuration).toBe('number');
            expect(typeof metrics.overallCompletionRate).toBe('number');
            expect(typeof metrics.engagementScore).toBe('number');
        });
        test('should generate learning path recommendations', async ()=>{
            const recommendations = await _analyticsService.analyticsService.getLearningPathRecommendations(testAvatarId, 3);
            expect(Array.isArray(recommendations)).toBe(true);
            expect(recommendations.length).toBeLessThanOrEqual(3);
            recommendations.forEach((rec)=>{
                expect(rec).toHaveProperty('gameId');
                expect(rec).toHaveProperty('reason');
                expect(rec).toHaveProperty('priority');
                expect(typeof rec.priority).toBe('number');
                expect(rec.priority).toBeGreaterThanOrEqual(1);
                expect(rec.priority).toBeLessThanOrEqual(10);
            });
        });
        test('should generate aggregate analytics', async ()=>{
            const analytics = await _analyticsService.analyticsService.getAggregateAnalytics();
            expect(analytics).toBeDefined();
            expect(typeof analytics.totalSessions).toBe('number');
            expect(typeof analytics.uniquePlayers).toBe('number');
            expect(typeof analytics.averageDuration).toBe('number');
            expect(typeof analytics.completionRate).toBe('number');
            expect(Array.isArray(analytics.popularGames)).toBe(true);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,