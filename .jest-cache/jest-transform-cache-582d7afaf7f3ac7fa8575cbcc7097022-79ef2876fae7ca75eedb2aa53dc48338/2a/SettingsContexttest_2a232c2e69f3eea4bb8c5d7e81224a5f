5e3db0b3799daa41cb65bb2b6f21c1ff
/**
 * Enhanced SettingsContext Tests
 * Updated to use new testing standards with improved safety measures
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _SettingsContext = require("../SettingsContext");
const wrapper = ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_SettingsContext.SettingsProvider, {
        children: children
    });
describe('SettingsContext - Enhanced Tests', ()=>{
    beforeEach(()=>{
        // Clear all localStorage mock calls
        localStorage.clear.mockClear();
        localStorage.getItem.mockClear();
        localStorage.setItem.mockClear();
        // Reset to default behavior
        localStorage.getItem.mockReturnValue(null);
    });
    afterEach(()=>{
        jest.resetAllMocks();
    });
    it('provides default settings when none saved', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _SettingsContext.useSettings)(), {
            wrapper
        });
        expect(result.current.settings.questionsPerSession).toBe(10);
        expect(result.current.settings.numberRange.min).toBe(1);
    });
    it('loads settings from localStorage', ()=>{
        localStorage.getItem.mockReturnValue(JSON.stringify({
            questionsPerSession: 5
        }));
        const { result } = (0, _react.renderHook)(()=>(0, _SettingsContext.useSettings)(), {
            wrapper
        });
        expect(result.current.settings.questionsPerSession).toBe(5);
    });
    it('updates and resets settings properly', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _SettingsContext.useSettings)(), {
            wrapper
        });
        (0, _react.act)(()=>{
            result.current.updateSettings({
                questionsPerSession: 8,
                mathOperations: {
                    addition: false,
                    subtraction: true
                }
            });
        });
        expect(result.current.settings.questionsPerSession).toBe(8);
        expect(result.current.settings.mathOperations.addition).toBe(false);
        // unchanged property
        expect(result.current.settings.mathOperations.subtraction).toBe(true);
        (0, _react.act)(()=>{
            result.current.updateNumberRange(2, 5);
        });
        expect(result.current.settings.numberRange).toEqual({
            min: 2,
            max: 5
        });
        (0, _react.act)(()=>{
            result.current.resetSettings();
        });
        expect(result.current.settings.questionsPerSession).toBe(10);
        expect(result.current.settings.numberRange.min).toBe(1);
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxyZXBvc1xcZmFtaWx5LW9yaWVudGVkXFxzcmNcXGNvbnRleHRcXF9fdGVzdHNfX1xcU2V0dGluZ3NDb250ZXh0LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBFbmhhbmNlZCBTZXR0aW5nc0NvbnRleHQgVGVzdHNcclxuICogVXBkYXRlZCB0byB1c2UgbmV3IHRlc3Rpbmcgc3RhbmRhcmRzIHdpdGggaW1wcm92ZWQgc2FmZXR5IG1lYXN1cmVzXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgcmVuZGVySG9vaywgYWN0IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XHJcbmltcG9ydCB7IFNldHRpbmdzUHJvdmlkZXIsIHVzZVNldHRpbmdzIH0gZnJvbSAnLi4vU2V0dGluZ3NDb250ZXh0JztcclxuXHJcbmNvbnN0IHdyYXBwZXIgPSAoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkgPT4gKFxyXG4gIDxTZXR0aW5nc1Byb3ZpZGVyPntjaGlsZHJlbn08L1NldHRpbmdzUHJvdmlkZXI+XHJcbik7XHJcblxyXG5kZXNjcmliZSgnU2V0dGluZ3NDb250ZXh0IC0gRW5oYW5jZWQgVGVzdHMnLCAoKSA9PiB7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICAvLyBDbGVhciBhbGwgbG9jYWxTdG9yYWdlIG1vY2sgY2FsbHNcclxuICAgIChsb2NhbFN0b3JhZ2UuY2xlYXIgYXMgamVzdC5Nb2NrKS5tb2NrQ2xlYXIoKTtcclxuICAgIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSBhcyBqZXN0Lk1vY2spLm1vY2tDbGVhcigpO1xyXG4gICAgKGxvY2FsU3RvcmFnZS5zZXRJdGVtIGFzIGplc3QuTW9jaykubW9ja0NsZWFyKCk7XHJcbiAgICBcclxuICAgIC8vIFJlc2V0IHRvIGRlZmF1bHQgYmVoYXZpb3JcclxuICAgIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSBhcyBqZXN0Lk1vY2spLm1vY2tSZXR1cm5WYWx1ZShudWxsKTtcclxuICB9KTtcclxuXHJcbiAgYWZ0ZXJFYWNoKCgpID0+IHtcclxuICAgIGplc3QucmVzZXRBbGxNb2NrcygpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgncHJvdmlkZXMgZGVmYXVsdCBzZXR0aW5ncyB3aGVuIG5vbmUgc2F2ZWQnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTZXR0aW5ncygpLCB7IHdyYXBwZXIgfSk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc2V0dGluZ3MucXVlc3Rpb25zUGVyU2Vzc2lvbikudG9CZSgxMCk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc2V0dGluZ3MubnVtYmVyUmFuZ2UubWluKS50b0JlKDEpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnbG9hZHMgc2V0dGluZ3MgZnJvbSBsb2NhbFN0b3JhZ2UnLCAoKSA9PiB7XHJcbiAgICAobG9jYWxTdG9yYWdlLmdldEl0ZW0gYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUoXHJcbiAgICAgIEpTT04uc3RyaW5naWZ5KHsgcXVlc3Rpb25zUGVyU2Vzc2lvbjogNSB9KVxyXG4gICAgKTtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNldHRpbmdzKCksIHsgd3JhcHBlciB9KTtcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5zZXR0aW5ncy5xdWVzdGlvbnNQZXJTZXNzaW9uKS50b0JlKDUpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgndXBkYXRlcyBhbmQgcmVzZXRzIHNldHRpbmdzIHByb3Blcmx5JywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2V0dGluZ3MoKSwgeyB3cmFwcGVyIH0pO1xyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQudXBkYXRlU2V0dGluZ3Moe1xyXG4gICAgICAgIHF1ZXN0aW9uc1BlclNlc3Npb246IDgsXHJcbiAgICAgICAgbWF0aE9wZXJhdGlvbnM6IHsgYWRkaXRpb246IGZhbHNlLCBzdWJ0cmFjdGlvbjogdHJ1ZSB9LFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnNldHRpbmdzLnF1ZXN0aW9uc1BlclNlc3Npb24pLnRvQmUoOCk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc2V0dGluZ3MubWF0aE9wZXJhdGlvbnMuYWRkaXRpb24pLnRvQmUoZmFsc2UpO1xyXG4gICAgLy8gdW5jaGFuZ2VkIHByb3BlcnR5XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc2V0dGluZ3MubWF0aE9wZXJhdGlvbnMuc3VidHJhY3Rpb24pLnRvQmUodHJ1ZSk7XHJcblxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQudXBkYXRlTnVtYmVyUmFuZ2UoMiwgNSk7XHJcbiAgICB9KTtcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5zZXR0aW5ncy5udW1iZXJSYW5nZSkudG9FcXVhbCh7IG1pbjogMiwgbWF4OiA1IH0pO1xyXG5cclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgIHJlc3VsdC5jdXJyZW50LnJlc2V0U2V0dGluZ3MoKTtcclxuICAgIH0pO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnNldHRpbmdzLnF1ZXN0aW9uc1BlclNlc3Npb24pLnRvQmUoMTApO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnNldHRpbmdzLm51bWJlclJhbmdlLm1pbikudG9CZSgxKTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJuYW1lcyI6WyJ3cmFwcGVyIiwiY2hpbGRyZW4iLCJTZXR0aW5nc1Byb3ZpZGVyIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwibG9jYWxTdG9yYWdlIiwiY2xlYXIiLCJtb2NrQ2xlYXIiLCJnZXRJdGVtIiwic2V0SXRlbSIsIm1vY2tSZXR1cm5WYWx1ZSIsImFmdGVyRWFjaCIsImplc3QiLCJyZXNldEFsbE1vY2tzIiwiaXQiLCJyZXN1bHQiLCJyZW5kZXJIb29rIiwidXNlU2V0dGluZ3MiLCJleHBlY3QiLCJjdXJyZW50Iiwic2V0dGluZ3MiLCJxdWVzdGlvbnNQZXJTZXNzaW9uIiwidG9CZSIsIm51bWJlclJhbmdlIiwibWluIiwiSlNPTiIsInN0cmluZ2lmeSIsImFjdCIsInVwZGF0ZVNldHRpbmdzIiwibWF0aE9wZXJhdGlvbnMiLCJhZGRpdGlvbiIsInN1YnRyYWN0aW9uIiwidXBkYXRlTnVtYmVyUmFuZ2UiLCJ0b0VxdWFsIiwibWF4IiwicmVzZXRTZXR0aW5ncyJdLCJtYXBwaW5ncyI6IkFBQUE7OztDQUdDOzs7Ozt1QkFFK0I7aUNBQ2M7QUFFOUMsTUFBTUEsVUFBVSxDQUFDLEVBQUVDLFFBQVEsRUFBaUMsaUJBQzFELHFCQUFDQyxpQ0FBZ0I7a0JBQUVEOztBQUdyQkUsU0FBUyxvQ0FBb0M7SUFDM0NDLFdBQVc7UUFDVCxvQ0FBb0M7UUFDbkNDLGFBQWFDLEtBQUssQ0FBZUMsU0FBUztRQUMxQ0YsYUFBYUcsT0FBTyxDQUFlRCxTQUFTO1FBQzVDRixhQUFhSSxPQUFPLENBQWVGLFNBQVM7UUFFN0MsNEJBQTRCO1FBQzNCRixhQUFhRyxPQUFPLENBQWVFLGVBQWUsQ0FBQztJQUN0RDtJQUVBQyxVQUFVO1FBQ1JDLEtBQUtDLGFBQWE7SUFDcEI7SUFFQUMsR0FBRyw2Q0FBNkM7UUFDOUMsTUFBTSxFQUFFQyxNQUFNLEVBQUUsR0FBR0MsSUFBQUEsaUJBQVUsRUFBQyxJQUFNQyxJQUFBQSw0QkFBVyxLQUFJO1lBQUVqQjtRQUFRO1FBQzdEa0IsT0FBT0gsT0FBT0ksT0FBTyxDQUFDQyxRQUFRLENBQUNDLG1CQUFtQixFQUFFQyxJQUFJLENBQUM7UUFDekRKLE9BQU9ILE9BQU9JLE9BQU8sQ0FBQ0MsUUFBUSxDQUFDRyxXQUFXLENBQUNDLEdBQUcsRUFBRUYsSUFBSSxDQUFDO0lBQ3ZEO0lBRUFSLEdBQUcsb0NBQW9DO1FBQ3BDVCxhQUFhRyxPQUFPLENBQWVFLGVBQWUsQ0FDakRlLEtBQUtDLFNBQVMsQ0FBQztZQUFFTCxxQkFBcUI7UUFBRTtRQUUxQyxNQUFNLEVBQUVOLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSxpQkFBVSxFQUFDLElBQU1DLElBQUFBLDRCQUFXLEtBQUk7WUFBRWpCO1FBQVE7UUFDN0RrQixPQUFPSCxPQUFPSSxPQUFPLENBQUNDLFFBQVEsQ0FBQ0MsbUJBQW1CLEVBQUVDLElBQUksQ0FBQztJQUMzRDtJQUVBUixHQUFHLHdDQUF3QztRQUN6QyxNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSxpQkFBVSxFQUFDLElBQU1DLElBQUFBLDRCQUFXLEtBQUk7WUFBRWpCO1FBQVE7UUFDN0QyQixJQUFBQSxVQUFHLEVBQUM7WUFDRlosT0FBT0ksT0FBTyxDQUFDUyxjQUFjLENBQUM7Z0JBQzVCUCxxQkFBcUI7Z0JBQ3JCUSxnQkFBZ0I7b0JBQUVDLFVBQVU7b0JBQU9DLGFBQWE7Z0JBQUs7WUFDdkQ7UUFDRjtRQUNBYixPQUFPSCxPQUFPSSxPQUFPLENBQUNDLFFBQVEsQ0FBQ0MsbUJBQW1CLEVBQUVDLElBQUksQ0FBQztRQUN6REosT0FBT0gsT0FBT0ksT0FBTyxDQUFDQyxRQUFRLENBQUNTLGNBQWMsQ0FBQ0MsUUFBUSxFQUFFUixJQUFJLENBQUM7UUFDN0QscUJBQXFCO1FBQ3JCSixPQUFPSCxPQUFPSSxPQUFPLENBQUNDLFFBQVEsQ0FBQ1MsY0FBYyxDQUFDRSxXQUFXLEVBQUVULElBQUksQ0FBQztRQUVoRUssSUFBQUEsVUFBRyxFQUFDO1lBQ0ZaLE9BQU9JLE9BQU8sQ0FBQ2EsaUJBQWlCLENBQUMsR0FBRztRQUN0QztRQUNBZCxPQUFPSCxPQUFPSSxPQUFPLENBQUNDLFFBQVEsQ0FBQ0csV0FBVyxFQUFFVSxPQUFPLENBQUM7WUFBRVQsS0FBSztZQUFHVSxLQUFLO1FBQUU7UUFFckVQLElBQUFBLFVBQUcsRUFBQztZQUNGWixPQUFPSSxPQUFPLENBQUNnQixhQUFhO1FBQzlCO1FBQ0FqQixPQUFPSCxPQUFPSSxPQUFPLENBQUNDLFFBQVEsQ0FBQ0MsbUJBQW1CLEVBQUVDLElBQUksQ0FBQztRQUN6REosT0FBT0gsT0FBT0ksT0FBTyxDQUFDQyxRQUFRLENBQUNHLFdBQVcsQ0FBQ0MsR0FBRyxFQUFFRixJQUFJLENBQUM7SUFDdkQ7QUFDRiJ9