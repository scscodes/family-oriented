e1caa00fc9cd4472e04e40f9d4fbbc52
/**
 * Demo Context - Smooth Demo Scenario Management
 * Manages demo scenario transitions without page reloads
 * Provides validation, loading states, and error handling
 */ 'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DemoProvider: function() {
        return DemoProvider;
    },
    useDemo: function() {
        return useDemo;
    },
    useDemoConfig: function() {
        return useDemoConfig;
    },
    useDemoMode: function() {
        return useDemoMode;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _logger = require("../utils/logger");
const _demoConfig = require("../utils/demoConfig");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const DemoContext = /*#__PURE__*/ (0, _react.createContext)(undefined);
function DemoProvider({ children }) {
    const [currentScenario, setCurrentScenario] = (0, _react.useState)('professional_educator');
    const [currentConfig, setCurrentConfig] = (0, _react.useState)(()=>(0, _demoConfig.getDemoConfig)());
    const [isTransitioning, setIsTransitioning] = (0, _react.useState)(false);
    const [error, setError] = (0, _react.useState)(null);
    const availableScenarios = (0, _demoConfig.getAvailableScenarios)();
    // Initialize current scenario from localStorage/environment
    (0, _react.useEffect)(()=>{
        const initializeScenario = ()=>{
            try {
                let scenarioKey = 'professional_educator';
                // Check localStorage first (browser only)
                if (typeof window !== 'undefined') {
                    const stored = localStorage.getItem('demo_scenario');
                    if (stored && _demoConfig.DEMO_SCENARIOS[stored]) {
                        scenarioKey = stored;
                    }
                }
                // Check environment variable
                const envScenario = process.env.NEXT_PUBLIC_DEMO_SCENARIO;
                if (envScenario && _demoConfig.DEMO_SCENARIOS[envScenario]) {
                    scenarioKey = envScenario;
                }
                const config = _demoConfig.DEMO_SCENARIOS[scenarioKey];
                if (config) {
                    setCurrentScenario(scenarioKey);
                    setCurrentConfig(config);
                    _logger.logger.info('Demo scenario initialized:', {
                        scenarioKey,
                        config
                    });
                }
            } catch (err) {
                _logger.logger.error('Failed to initialize demo scenario:', err);
                setError('Failed to initialize demo mode');
            }
        };
        initializeScenario();
    }, []);
    // Validate scenario switch before applying
    const validateScenarioSwitch = (0, _react.useCallback)((scenarioKey)=>{
        const reasons = [];
        // Check if scenario exists
        if (!_demoConfig.DEMO_SCENARIOS[scenarioKey]) {
            reasons.push(`Unknown scenario: ${scenarioKey}`);
        }
        // Check if already current scenario
        if (scenarioKey === currentScenario) {
            reasons.push('Already using this scenario');
        }
        // Add any business logic validation here
        // For example, check if user has unsaved changes, etc.
        return {
            valid: reasons.length === 0,
            reasons
        };
    }, [
        currentScenario
    ]);
    // Smooth scenario switching without page reload
    const switchScenario = (0, _react.useCallback)(async (scenarioKey)=>{
        // Validate the switch first
        const validation = validateScenarioSwitch(scenarioKey);
        if (!validation.valid) {
            const errorMessage = `Cannot switch scenario: ${validation.reasons.join(', ')}`;
            setError(errorMessage);
            throw new Error(errorMessage);
        }
        setIsTransitioning(true);
        setError(null);
        try {
            const newConfig = _demoConfig.DEMO_SCENARIOS[scenarioKey];
            if (!newConfig) {
                throw new Error(`Scenario ${scenarioKey} not found`);
            }
            // Store in localStorage for persistence
            if (typeof window !== 'undefined') {
                localStorage.setItem('demo_scenario', scenarioKey);
            }
            // Update state smoothly
            setCurrentScenario(scenarioKey);
            setCurrentConfig(newConfig);
            _logger.logger.info('Demo scenario switched successfully:', {
                from: currentScenario,
                to: scenarioKey,
                newConfig
            });
            // Dispatch custom event for other components to react
            if (typeof window !== 'undefined') {
                window.dispatchEvent(new CustomEvent('demoScenarioChanged', {
                    detail: {
                        scenarioKey,
                        config: newConfig
                    }
                }));
            }
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : 'Failed to switch scenario';
            setError(errorMessage);
            _logger.logger.error('Demo scenario switch failed:', err);
            throw err;
        } finally{
            setIsTransitioning(false);
        }
    }, [
        currentScenario,
        validateScenarioSwitch
    ]);
    // Utility functions
    const getCurrentTier = (0, _react.useCallback)(()=>{
        return currentConfig.tier;
    }, [
        currentConfig.tier
    ]);
    const getScenarioByTier = (0, _react.useCallback)((tier)=>{
        // Find first scenario with matching tier
        const entry = Object.entries(_demoConfig.DEMO_SCENARIOS).find(([, config])=>config.tier === tier);
        return entry ? entry[0] : null;
    }, []);
    const clearError = (0, _react.useCallback)(()=>{
        setError(null);
    }, []);
    const contextValue = {
        // Current state
        currentScenario,
        currentConfig,
        isTransitioning,
        error,
        // Available scenarios
        availableScenarios,
        // Actions
        switchScenario,
        validateScenarioSwitch,
        clearError,
        // Utilities
        getCurrentTier,
        getScenarioByTier
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(DemoContext.Provider, {
        value: contextValue,
        children: children
    });
}
function useDemo() {
    const context = (0, _react.useContext)(DemoContext);
    if (context === undefined) {
        throw new Error('useDemo must be used within a DemoProvider');
    }
    return context;
}
function useDemoConfig() {
    const { currentConfig } = useDemo();
    return currentConfig;
}
function useDemoMode() {
    try {
        useDemo();
        return true;
    } catch  {
        return false;
    }
}

//# sourceMappingURL=data:application/json;base64,