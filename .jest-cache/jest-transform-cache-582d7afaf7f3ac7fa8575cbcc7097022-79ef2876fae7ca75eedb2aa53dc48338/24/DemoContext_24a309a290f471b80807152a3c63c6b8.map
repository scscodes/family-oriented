{"version":3,"sources":["C:\\repos\\family-oriented\\src\\context\\DemoContext.tsx"],"sourcesContent":["/**\r\n * Demo Context - Smooth Demo Scenario Management\r\n * Manages demo scenario transitions without page reloads\r\n * Provides validation, loading states, and error handling\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { createContext, useContext, useState, useCallback, ReactNode, useEffect } from 'react';\r\nimport { logger } from '@/utils/logger';\r\nimport { \r\n  getDemoConfig, \r\n  getAvailableScenarios, \r\n  DEMO_SCENARIOS,\r\n  type DemoUserConfig \r\n} from '@/utils/demoConfig';\r\nimport type { SubscriptionTier } from '@/utils/subscriptionService';\r\n\r\ninterface DemoContextType {\r\n  // Current state\r\n  currentScenario: string;\r\n  currentConfig: DemoUserConfig;\r\n  isTransitioning: boolean;\r\n  error: string | null;\r\n  \r\n  // Available scenarios\r\n  availableScenarios: Array<{\r\n    key: string;\r\n    label: string;\r\n    description: string;\r\n    config: DemoUserConfig;\r\n  }>;\r\n  \r\n  // Actions\r\n  switchScenario: (scenarioKey: string) => Promise<void>;\r\n  validateScenarioSwitch: (scenarioKey: string) => { valid: boolean; reasons: string[] };\r\n  clearError: () => void;\r\n  \r\n  // Utilities\r\n  getCurrentTier: () => SubscriptionTier;\r\n  getScenarioByTier: (tier: SubscriptionTier) => string | null;\r\n}\r\n\r\nconst DemoContext = createContext<DemoContextType | undefined>(undefined);\r\n\r\nexport function DemoProvider({ children }: { children: ReactNode }) {\r\n  const [currentScenario, setCurrentScenario] = useState<string>('professional_educator');\r\n  const [currentConfig, setCurrentConfig] = useState<DemoUserConfig>(() => getDemoConfig());\r\n  const [isTransitioning, setIsTransitioning] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  const availableScenarios = getAvailableScenarios();\r\n\r\n  // Initialize current scenario from localStorage/environment\r\n  useEffect(() => {\r\n    const initializeScenario = () => {\r\n      try {\r\n        let scenarioKey = 'professional_educator';\r\n        \r\n        // Check localStorage first (browser only)\r\n        if (typeof window !== 'undefined') {\r\n          const stored = localStorage.getItem('demo_scenario');\r\n          if (stored && DEMO_SCENARIOS[stored]) {\r\n            scenarioKey = stored;\r\n          }\r\n        }\r\n        \r\n        // Check environment variable\r\n        const envScenario = process.env.NEXT_PUBLIC_DEMO_SCENARIO;\r\n        if (envScenario && DEMO_SCENARIOS[envScenario]) {\r\n          scenarioKey = envScenario;\r\n        }\r\n        \r\n        const config = DEMO_SCENARIOS[scenarioKey];\r\n        if (config) {\r\n          setCurrentScenario(scenarioKey);\r\n          setCurrentConfig(config);\r\n          logger.info('Demo scenario initialized:', { scenarioKey, config });\r\n        }\r\n      } catch (err) {\r\n        logger.error('Failed to initialize demo scenario:', err);\r\n        setError('Failed to initialize demo mode');\r\n      }\r\n    };\r\n\r\n    initializeScenario();\r\n  }, []);\r\n\r\n  // Validate scenario switch before applying\r\n  const validateScenarioSwitch = useCallback((scenarioKey: string): { valid: boolean; reasons: string[] } => {\r\n    const reasons: string[] = [];\r\n    \r\n    // Check if scenario exists\r\n    if (!DEMO_SCENARIOS[scenarioKey]) {\r\n      reasons.push(`Unknown scenario: ${scenarioKey}`);\r\n    }\r\n    \r\n    // Check if already current scenario\r\n    if (scenarioKey === currentScenario) {\r\n      reasons.push('Already using this scenario');\r\n    }\r\n    \r\n    // Add any business logic validation here\r\n    // For example, check if user has unsaved changes, etc.\r\n    \r\n    return {\r\n      valid: reasons.length === 0,\r\n      reasons\r\n    };\r\n  }, [currentScenario]);\r\n\r\n  // Smooth scenario switching without page reload\r\n  const switchScenario = useCallback(async (scenarioKey: string): Promise<void> => {\r\n    // Validate the switch first\r\n    const validation = validateScenarioSwitch(scenarioKey);\r\n    if (!validation.valid) {\r\n      const errorMessage = `Cannot switch scenario: ${validation.reasons.join(', ')}`;\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    setIsTransitioning(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const newConfig = DEMO_SCENARIOS[scenarioKey];\r\n      if (!newConfig) {\r\n        throw new Error(`Scenario ${scenarioKey} not found`);\r\n      }\r\n\r\n      // Store in localStorage for persistence\r\n      if (typeof window !== 'undefined') {\r\n        localStorage.setItem('demo_scenario', scenarioKey);\r\n      }\r\n\r\n      // Update state smoothly\r\n      setCurrentScenario(scenarioKey);\r\n      setCurrentConfig(newConfig);\r\n\r\n      logger.info('Demo scenario switched successfully:', {\r\n        from: currentScenario,\r\n        to: scenarioKey,\r\n        newConfig\r\n      });\r\n\r\n      // Dispatch custom event for other components to react\r\n      if (typeof window !== 'undefined') {\r\n        window.dispatchEvent(new CustomEvent('demoScenarioChanged', {\r\n          detail: { scenarioKey, config: newConfig }\r\n        }));\r\n      }\r\n\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to switch scenario';\r\n      setError(errorMessage);\r\n      logger.error('Demo scenario switch failed:', err);\r\n      throw err;\r\n    } finally {\r\n      setIsTransitioning(false);\r\n    }\r\n  }, [currentScenario, validateScenarioSwitch]);\r\n\r\n  // Utility functions\r\n  const getCurrentTier = useCallback((): SubscriptionTier => {\r\n    return currentConfig.tier;\r\n  }, [currentConfig.tier]);\r\n\r\n  const getScenarioByTier = useCallback((tier: SubscriptionTier): string | null => {\r\n    // Find first scenario with matching tier\r\n    const entry = Object.entries(DEMO_SCENARIOS).find(([, config]) => config.tier === tier);\r\n    return entry ? entry[0] : null;\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n\r\n  const contextValue: DemoContextType = {\r\n    // Current state\r\n    currentScenario,\r\n    currentConfig,\r\n    isTransitioning,\r\n    error,\r\n    \r\n    // Available scenarios\r\n    availableScenarios,\r\n    \r\n    // Actions\r\n    switchScenario,\r\n    validateScenarioSwitch,\r\n    clearError,\r\n    \r\n    // Utilities\r\n    getCurrentTier,\r\n    getScenarioByTier\r\n  };\r\n\r\n  return (\r\n    <DemoContext.Provider value={contextValue}>\r\n      {children}\r\n    </DemoContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useDemo(): DemoContextType {\r\n  const context = useContext(DemoContext);\r\n  if (context === undefined) {\r\n    throw new Error('useDemo must be used within a DemoProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\n// Hook for components that only need demo config without full context\r\nexport function useDemoConfig(): DemoUserConfig {\r\n  const { currentConfig } = useDemo();\r\n  return currentConfig;\r\n}\r\n\r\n// Hook for checking if we're in demo mode\r\nexport function useDemoMode(): boolean {\r\n  try {\r\n    useDemo();\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n} "],"names":["DemoProvider","useDemo","useDemoConfig","useDemoMode","DemoContext","createContext","undefined","children","currentScenario","setCurrentScenario","useState","currentConfig","setCurrentConfig","getDemoConfig","isTransitioning","setIsTransitioning","error","setError","availableScenarios","getAvailableScenarios","useEffect","initializeScenario","scenarioKey","window","stored","localStorage","getItem","DEMO_SCENARIOS","envScenario","process","env","NEXT_PUBLIC_DEMO_SCENARIO","config","logger","info","err","validateScenarioSwitch","useCallback","reasons","push","valid","length","switchScenario","validation","errorMessage","join","Error","newConfig","setItem","from","to","dispatchEvent","CustomEvent","detail","message","getCurrentTier","tier","getScenarioByTier","entry","Object","entries","find","clearError","contextValue","Provider","value","context","useContext"],"mappings":"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"}