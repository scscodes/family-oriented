{"version":3,"sources":["C:\\repos\\family-oriented\\src\\utils\\gameWizardService.ts"],"sourcesContent":["import { gameDiscovery, Game, EnhancedGameFilter } from './gameData';\r\nimport { createClient } from '@/lib/supabase/client';\r\nimport { analyticsService } from './analyticsService';\r\nimport { logger } from './logger';\r\n\r\ninterface WizardStep {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  type: 'age' | 'interests' | 'time' | 'goals';\r\n  options: WizardOption[];\r\n}\r\n\r\ninterface WizardOption {\r\n  id: string;\r\n  label: string;\r\n  value: string | number | boolean | number[];\r\n  icon?: string;\r\n  description?: string;\r\n}\r\n\r\ninterface WizardSession {\r\n  id: string;\r\n  avatarId: string;\r\n  query?: string;\r\n  parsedFilters?: Record<string, unknown>;\r\n  selectedGames?: string[];\r\n  completionRate?: number;\r\n  createdAt: Date;\r\n  completedAt?: Date;\r\n}\r\n\r\nexport class GameWizardService {\r\n  private supabase = createClient();\r\n  private readonly steps: WizardStep[] = [\r\n    {\r\n      id: 'age',\r\n      title: 'Age Range',\r\n      description: 'Select the age range for the games',\r\n      type: 'age',\r\n      options: [\r\n        { id: '2-3', label: '2-3 years', value: [2, 3], icon: 'üë∂' },\r\n        { id: '3-4', label: '3-4 years', value: [3, 4], icon: 'üßí' },\r\n        { id: '4-5', label: '4-5 years', value: [4, 5], icon: 'üë¶' },\r\n        { id: '5-6', label: '5-6 years', value: [5, 6], icon: 'üëß' },\r\n        { id: '6+', label: '6+ years', value: [6, 10], icon: 'üßë' }\r\n      ]\r\n    },\r\n    {\r\n      id: 'interests',\r\n      title: 'Learning Interests',\r\n      description: 'What subjects are you interested in?',\r\n      type: 'interests',\r\n      options: [\r\n        { id: 'math', label: 'Mathematics', value: 'Mathematics', icon: 'üî¢' },\r\n        { id: 'reading', label: 'Reading & Writing', value: 'Language Arts', icon: 'üìö' },\r\n        { id: 'science', label: 'Science', value: 'Science', icon: 'üî¨' },\r\n        { id: 'social', label: 'Social Studies', value: 'Social Studies', icon: 'üåç' },\r\n        { id: 'art', label: 'Art & Music', value: 'Arts', icon: 'üé®' }\r\n      ]\r\n    },\r\n    {\r\n      id: 'time',\r\n      title: 'Available Time',\r\n      description: 'How much time do you have?',\r\n      type: 'time',\r\n      options: [\r\n        { id: 'quick', label: 'Quick (‚â§5 min)', value: 'quick', icon: '‚ö°' },\r\n        { id: 'short', label: 'Short (5-10 min)', value: 'short', icon: '‚è±Ô∏è' },\r\n        { id: 'medium', label: 'Medium (10-15 min)', value: 'medium', icon: '‚åõ' },\r\n        { id: 'long', label: 'Long (15+ min)', value: 'long', icon: '‚è≥' }\r\n      ]\r\n    },\r\n    {\r\n      id: 'goals',\r\n      title: 'Learning Goals',\r\n      description: 'What would you like to focus on?',\r\n      type: 'goals',\r\n      options: [\r\n        { id: 'beginner', label: 'Beginner Skills', value: 'beginner', icon: 'üå±' },\r\n        { id: 'intermediate', label: 'Intermediate Skills', value: 'intermediate', icon: 'üåø' },\r\n        { id: 'advanced', label: 'Advanced Skills', value: 'advanced', icon: 'üå≥' }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  /**\r\n   * Start a new wizard session\r\n   */\r\n  async startSession(avatarId: string, selections?: Record<string, unknown>): Promise<WizardSession> {\r\n    try {\r\n      // Create a session ID for now\r\n      const sessionId = `wizard_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n      // Validate and clean avatar ID\r\n      const cleanAvatarId = avatarId || `temp_${Date.now()}`;\r\n      \r\n      logger.info('Starting wizard session:', { sessionId, avatarId: cleanAvatarId, selections });\r\n\r\n      // Track wizard start with error handling\r\n      try {\r\n        await analyticsService.trackEvent(sessionId, cleanAvatarId, 'wizard_start', {\r\n          timestamp: new Date().toISOString(),\r\n          selections: selections || {},\r\n          isTemporaryAvatar: cleanAvatarId.startsWith('temp_')\r\n        });\r\n      } catch (analyticsError) {\r\n        logger.warn('Failed to track wizard start (continuing anyway):', analyticsError);\r\n        // Continue without failing the session creation\r\n      }\r\n\r\n      const session: WizardSession = {\r\n        id: sessionId,\r\n        avatarId: cleanAvatarId,\r\n        createdAt: new Date()\r\n      };\r\n\r\n      // Store selections in sessionStorage if available and valid\r\n      if (selections && typeof window !== 'undefined') {\r\n        try {\r\n          const serializedSelections = JSON.stringify(selections);\r\n          sessionStorage.setItem(`wizard_${sessionId}`, serializedSelections);\r\n          logger.info('Stored wizard selections in sessionStorage');\r\n        } catch (storageError) {\r\n          logger.warn('Failed to store wizard selections (continuing anyway):', storageError);\r\n          // Continue without failing - the selections are still passed to getRecommendations\r\n        }\r\n      }\r\n\r\n      return session;\r\n    } catch (error) {\r\n      logger.error('Failed to start wizard session:', error);\r\n      throw new Error('Unable to start game finder session. Please try again.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get wizard steps\r\n   */\r\n  getSteps(): WizardStep[] {\r\n    return this.steps;\r\n  }\r\n\r\n  /**\r\n   * Get recommended games based on wizard selections with progressive fallback\r\n   */\r\n  async getRecommendations(\r\n    sessionId: string,\r\n    selections: Record<string, unknown>\r\n  ): Promise<WizardSession> {\r\n    try {\r\n      const filters = this.parseSelections(selections);\r\n      \r\n      // Try exact match first\r\n      let recommendations = gameDiscovery.getRecommendedGames('', filters) || [];\r\n      \r\n      // If no exact matches, use progressive fallback strategy\r\n      if (recommendations.length === 0) {\r\n        recommendations = await this.findSimilarGames(filters, selections);\r\n      }\r\n\r\n      // TODO: Store in database when game_wizard_sessions table is created\r\n      const session: WizardSession = {\r\n        id: sessionId,\r\n        avatarId: sessionId.includes('_') ? sessionId.split('_')[1] : 'temp',\r\n        parsedFilters: filters,\r\n        selectedGames: recommendations.map(r => r.game?.id).filter(Boolean),\r\n        createdAt: new Date(),\r\n        completedAt: new Date()\r\n      };\r\n\r\n      // Track wizard completion with error handling\r\n      try {\r\n        await analyticsService.trackEvent(sessionId, session.avatarId, 'wizard_complete', {\r\n          timestamp: new Date().toISOString(),\r\n          filters,\r\n          originalSelections: selections,\r\n          recommendations: recommendations.map(r => ({\r\n            gameId: r.game?.id || 'unknown',\r\n            score: r.score || 0,\r\n            reason: r.reason || 'No reason provided'\r\n          })),\r\n          fallbackUsed: recommendations.some(r => r.reason.includes('Similar') || r.reason.includes('Popular'))\r\n        });\r\n      } catch (analyticsError) {\r\n        logger.warn('Failed to track wizard completion:', analyticsError);\r\n        // Continue without failing the entire operation\r\n      }\r\n\r\n      return session;\r\n    } catch (error) {\r\n      logger.error('Failed to get wizard recommendations:', error);\r\n      \r\n      // Even on error, try to provide some recommendations\r\n      try {\r\n        const fallbackRecommendations = await this.getFallbackRecommendations();\r\n        return {\r\n          id: sessionId,\r\n          avatarId: sessionId.includes('_') ? sessionId.split('_')[1] : 'temp',\r\n          parsedFilters: {},\r\n          selectedGames: fallbackRecommendations.map(r => r.game.id),\r\n          createdAt: new Date(),\r\n          completedAt: new Date()\r\n        };\r\n      } catch {\r\n        // Absolute fallback - return empty but valid session\r\n        return {\r\n          id: sessionId,\r\n          avatarId: sessionId.includes('_') ? sessionId.split('_')[1] : 'temp',\r\n          parsedFilters: {},\r\n          selectedGames: [],\r\n          createdAt: new Date(),\r\n          completedAt: new Date()\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Progressive fallback strategy to find similar games when exact matches fail\r\n   */\r\n  private async findSimilarGames(\r\n    originalFilters: Record<string, unknown>,\r\n    originalSelections: Record<string, unknown>\r\n  ): Promise<Array<{ game: Game; score: number; reason: string }>> {\r\n    const fallbackStrategies = [\r\n      // Strategy 1: Relax skill level requirement\r\n      {\r\n        name: 'Similar difficulty',\r\n        modifyFilters: (filters: Record<string, unknown>): Partial<EnhancedGameFilter> => ({\r\n          subjects: Array.isArray(filters.subjects) ? filters.subjects as string[] : undefined,\r\n          tags: Array.isArray(filters.tags) ? filters.tags as string[] : undefined,\r\n          ageRange: Array.isArray(filters.ageRange) && filters.ageRange.length >= 2 ? \r\n            filters.ageRange as [number, number] : undefined,\r\n          status: Array.isArray(filters.status) ? filters.status as string[] : ['active'],\r\n          skillLevels: undefined\r\n        })\r\n      },\r\n      \r\n      // Strategy 2: Expand age range by 1 year on each side\r\n      {\r\n        name: 'Similar age range',\r\n        modifyFilters: (filters: Record<string, unknown>): Partial<EnhancedGameFilter> => ({\r\n          subjects: Array.isArray(filters.subjects) ? filters.subjects as string[] : undefined,\r\n          tags: Array.isArray(filters.tags) ? filters.tags as string[] : undefined,\r\n          status: Array.isArray(filters.status) ? filters.status as string[] : ['active'],\r\n          skillLevels: undefined,\r\n          ageRange: filters.ageRange && Array.isArray(filters.ageRange) && filters.ageRange.length >= 2 ? \r\n            [Math.max(2, filters.ageRange[0] - 1), Math.min(8, filters.ageRange[1] + 1)] as [number, number] : \r\n            undefined\r\n        })\r\n      },\r\n      \r\n      // Strategy 3: Keep subject but remove other constraints\r\n      {\r\n        name: 'Same subject',\r\n        modifyFilters: (filters: Record<string, unknown>): Partial<EnhancedGameFilter> => ({\r\n          subjects: Array.isArray(filters.subjects) ? filters.subjects as string[] : undefined,\r\n          status: ['active']\r\n        })\r\n      },\r\n      \r\n      // Strategy 4: Popular games with relaxed age constraints\r\n      {\r\n        name: 'Popular games',\r\n        modifyFilters: (filters: Record<string, unknown>): Partial<EnhancedGameFilter> => ({\r\n          status: ['active'],\r\n          ageRange: filters.ageRange && Array.isArray(filters.ageRange) && filters.ageRange.length >= 2 ? \r\n            [Math.max(2, filters.ageRange[0] - 1), Math.min(8, filters.ageRange[1] + 1)] as [number, number] : \r\n            undefined\r\n        })\r\n      }\r\n    ];\r\n\r\n    // Try each fallback strategy\r\n    for (const strategy of fallbackStrategies) {\r\n      try {\r\n        const modifiedFilters = strategy.modifyFilters(originalFilters);\r\n        const results = gameDiscovery.searchWithFacets('', modifiedFilters);\r\n        \r\n        if (results && results.length > 0) {\r\n          // Score games based on similarity to original preferences\r\n          const scoredResults = results.map(game => ({\r\n            game,\r\n            score: this.calculateSimilarityScore(game, originalSelections, originalFilters),\r\n            reason: `Similar game (${strategy.name})`\r\n          }));\r\n          \r\n          // Sort by similarity score and return top matches\r\n          return scoredResults\r\n            .sort((a, b) => b.score - a.score)\r\n            .slice(0, 6); // Limit to 6 recommendations\r\n        }\r\n      } catch (strategyError) {\r\n        logger.warn(`Fallback strategy \"${strategy.name}\" failed:`, strategyError);\r\n        continue;\r\n      }\r\n    }\r\n\r\n    // Ultimate fallback: return featured games\r\n    return this.getFallbackRecommendations();\r\n  }\r\n\r\n  /**\r\n   * Calculate similarity score between a game and original user preferences\r\n   */\r\n  private calculateSimilarityScore(\r\n    game: Game,\r\n    originalSelections: Record<string, unknown>,\r\n    originalFilters: Record<string, unknown>\r\n  ): number {\r\n    let score = 0;\r\n    \r\n    // Subject match (highest weight)\r\n    if (originalFilters.subjects && Array.isArray(originalFilters.subjects)) {\r\n      if (originalFilters.subjects.includes(game.subject)) {\r\n        score += 40;\r\n      }\r\n    }\r\n    \r\n    // Age range overlap\r\n    if (originalFilters.ageRange && Array.isArray(originalFilters.ageRange)) {\r\n      const [userMinAge, userMaxAge] = originalFilters.ageRange;\r\n      const [gameMinAge, gameMaxAge] = game.ageRange || [0, 10];\r\n      \r\n      // Calculate overlap\r\n      const overlapMin = Math.max(userMinAge, gameMinAge);\r\n      const overlapMax = Math.min(userMaxAge, gameMaxAge);\r\n      \r\n      if (overlapMax >= overlapMin) {\r\n        const overlapSize = overlapMax - overlapMin + 1;\r\n        const userRangeSize = userMaxAge - userMinAge + 1;\r\n        const overlapRatio = overlapSize / userRangeSize;\r\n        score += Math.round(overlapRatio * 25); // Up to 25 points for perfect age overlap\r\n      }\r\n    }\r\n    \r\n    // Skill level match\r\n    if (originalFilters.skillLevels && Array.isArray(originalFilters.skillLevels)) {\r\n      if (originalFilters.skillLevels.includes(game.skillLevel)) {\r\n        score += 20;\r\n      }\r\n    }\r\n    \r\n    // Game features and tags (bonus points)\r\n    if (game.tags && Array.isArray(game.tags)) {\r\n      // Bonus for interactive games if they selected goals/interests\r\n      if (originalSelections.goals && game.isInteractive) {\r\n        score += 5;\r\n      }\r\n      \r\n      // Bonus for games with audio if they're younger\r\n      if (originalSelections.age && Array.isArray(originalSelections.age) && \r\n          originalSelections.age[0] <= 4 && game.hasAudio) {\r\n        score += 5;\r\n      }\r\n    }\r\n    \r\n    // Duration preference match\r\n    if (originalSelections.time && game.estimatedDuration) {\r\n      const timePreference = originalSelections.time as string;\r\n      const duration = game.estimatedDuration;\r\n      \r\n      let timeMatch = false;\r\n      switch (timePreference) {\r\n        case 'quick':\r\n          timeMatch = duration <= 5;\r\n          break;\r\n        case 'short':\r\n          timeMatch = duration > 5 && duration <= 10;\r\n          break;\r\n        case 'medium':\r\n          timeMatch = duration > 10 && duration <= 15;\r\n          break;\r\n        case 'long':\r\n          timeMatch = duration > 15;\r\n          break;\r\n      }\r\n      \r\n      if (timeMatch) {\r\n        score += 10;\r\n      }\r\n    }\r\n    \r\n    return score;\r\n  }\r\n\r\n  /**\r\n   * Get fallback recommendations when all other strategies fail\r\n   */\r\n  private async getFallbackRecommendations(): Promise<Array<{ game: Game; score: number; reason: string }>> {\r\n    try {\r\n      const featuredGames = gameDiscovery.getFeaturedGames();\r\n      \r\n      if (featuredGames && featuredGames.length > 0) {\r\n        return featuredGames.slice(0, 4).map(game => ({\r\n          game,\r\n          score: 0.3,\r\n          reason: 'Popular featured game'\r\n        }));\r\n      }\r\n      \r\n      // If no featured games, get first few active games\r\n      const allGames = gameDiscovery.searchWithFacets('', { status: ['active'] });\r\n      return allGames.slice(0, 4).map(game => ({\r\n        game,\r\n        score: 0.2,\r\n        reason: 'Available game'\r\n      }));\r\n      \r\n    } catch (error) {\r\n      logger.error('Failed to get fallback recommendations:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get wizard session by ID (for displaying results)\r\n   */\r\n  async getSession(sessionId: string): Promise<WizardSession | null> {\r\n    // TODO: Implement proper database retrieval when game_wizard_sessions table is created\r\n    // For now, we'll recreate the session from the sessionId\r\n    try {\r\n      // Parse sessionId to extract avatarId and timestamp\r\n      const parts = sessionId.split('_');\r\n      if (parts.length < 2) {\r\n        return null;\r\n      }\r\n\r\n      // Return a minimal session that can be used to reconstruct filters\r\n      return {\r\n        id: sessionId,\r\n        avatarId: parts[1] || 'temp',\r\n        createdAt: new Date(parseInt(parts[1]) || Date.now()),\r\n        // Note: parsedFilters and selectedGames will need to be reconstructed\r\n        // by calling getRecommendations with the original selections\r\n      };\r\n    } catch (error) {\r\n      logger.error('Failed to get wizard session:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Track game completion from wizard recommendations\r\n   */\r\n  async trackCompletion(\r\n    sessionId: string,\r\n    gameId: string,\r\n    score: number,\r\n    timeSpent: number\r\n  ): Promise<void> {\r\n    // TODO: Store in database when game_wizard_completions table is created\r\n    \r\n    // Track game completion\r\n    await analyticsService.trackEvent(sessionId, 'temp', 'wizard_game_complete', {\r\n      gameId,\r\n      score,\r\n      timeSpent,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update session completion rate\r\n   */\r\n  private async updateCompletionRate(): Promise<void> {\r\n    // TODO: Implement when database tables are available\r\n    // For now, this is a no-op\r\n  }\r\n\r\n  /**\r\n   * Parse wizard selections into game filters\r\n   */\r\n  private parseSelections(selections: Record<string, unknown>): Record<string, unknown> {\r\n    const filters: Record<string, unknown> = {};\r\n\r\n    try {\r\n      // Parse age range\r\n      if (selections.age && Array.isArray(selections.age)) {\r\n        filters.ageRange = selections.age;\r\n      }\r\n\r\n      // Parse subject\r\n      if (selections.interests && typeof selections.interests === 'string') {\r\n        filters.subjects = [selections.interests];\r\n      }\r\n\r\n      // Parse duration\r\n      if (selections.time && typeof selections.time === 'string') {\r\n        filters.duration = selections.time;\r\n      }\r\n\r\n      // Parse skill level\r\n      if (selections.goals && typeof selections.goals === 'string') {\r\n        filters.skillLevels = [selections.goals];\r\n      }\r\n    } catch (error) {\r\n      logger.warn('Failed to parse wizard selections:', error);\r\n      // Return empty filters if parsing fails\r\n    }\r\n\r\n    return filters;\r\n  }\r\n}\r\n\r\nexport const gameWizard = new GameWizardService(); "],"names":["GameWizardService","gameWizard","startSession","avatarId","selections","sessionId","Date","now","Math","random","toString","substr","cleanAvatarId","logger","info","analyticsService","trackEvent","timestamp","toISOString","isTemporaryAvatar","startsWith","analyticsError","warn","session","id","createdAt","window","serializedSelections","JSON","stringify","sessionStorage","setItem","storageError","error","Error","getSteps","steps","getRecommendations","filters","parseSelections","recommendations","gameDiscovery","getRecommendedGames","length","findSimilarGames","includes","split","parsedFilters","selectedGames","map","r","game","filter","Boolean","completedAt","originalSelections","gameId","score","reason","fallbackUsed","some","fallbackRecommendations","getFallbackRecommendations","originalFilters","fallbackStrategies","name","modifyFilters","subjects","Array","isArray","undefined","tags","ageRange","status","skillLevels","max","min","strategy","modifiedFilters","results","searchWithFacets","scoredResults","calculateSimilarityScore","sort","a","b","slice","strategyError","subject","userMinAge","userMaxAge","gameMinAge","gameMaxAge","overlapMin","overlapMax","overlapSize","userRangeSize","overlapRatio","round","skillLevel","goals","isInteractive","age","hasAudio","time","estimatedDuration","timePreference","duration","timeMatch","featuredGames","getFeaturedGames","allGames","getSession","parts","parseInt","trackCompletion","timeSpent","updateCompletionRate","interests","supabase","createClient","title","description","type","options","label","value","icon"],"mappings":"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"}