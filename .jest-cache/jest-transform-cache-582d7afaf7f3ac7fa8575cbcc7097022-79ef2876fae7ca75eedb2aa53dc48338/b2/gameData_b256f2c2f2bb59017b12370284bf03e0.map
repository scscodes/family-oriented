{"version":3,"sources":["C:\\repos\\family-oriented\\src\\utils\\gameData.ts"],"sourcesContent":["// Academic subject definitions with colors\r\nexport const SUBJECTS = {\r\n  'Language Arts': { color: '#ff6d00', icon: 'üìö' },\r\n  'Mathematics': { color: '#4361ee', icon: 'üî¢' },\r\n  'Social Studies': { color: '#64f7e7', icon: 'üåç' },\r\n  'Visual Arts': { color: '#ff5a5f', icon: 'üé®' }\r\n} as const;\r\n\r\n// Tag categories for organized filtering\r\nexport const TAG_CATEGORIES = {\r\n  'skill-type': ['counting', 'recognition', 'memory', 'logic', 'creativity', 'phonics', 'vocabulary', 'spatial-awareness'],\r\n  'interaction': ['drag-drop', 'click', 'keyboard', 'voice', 'touch', 'gesture'],\r\n  'difficulty': ['starter', 'easy', 'medium', 'challenging'],\r\n  'duration': ['quick', 'short', 'medium', 'long'],\r\n  'feature': ['audio', 'animation', 'multiplayer', 'adaptive', 'progressive'],\r\n  'curriculum': ['common-core', 'early-learning', 'pre-k', 'kindergarten']\r\n} as const;\r\n\r\n// Core game interface with rich metadata\r\nexport interface Game {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  href: string;\r\n  emoji: string;\r\n  color: string;\r\n  subject: keyof typeof SUBJECTS;\r\n  \r\n  // Rich metadata for filtering and discovery\r\n  tags: string[];\r\n  ageRange: [number, number];\r\n  skillLevel: 'beginner' | 'intermediate' | 'advanced';\r\n  estimatedDuration: number; // minutes\r\n  learningObjectives: string[];\r\n  prerequisites?: string[]; // IDs of prerequisite games\r\n  \r\n  // Content and feature flags\r\n  hasAudio: boolean;\r\n  hasVisuals: boolean;\r\n  isInteractive: boolean;\r\n  supportsMultiplayer: boolean;\r\n  \r\n  // Administrative metadata\r\n  status: 'active' | 'beta' | 'coming-soon' | 'deprecated';\r\n  lastUpdated: string;\r\n  version: string;\r\n}\r\n\r\n// Filtering interface\r\nexport interface GameFilter {\r\n  subjects?: string[];\r\n  tags?: string[];\r\n  ageRange?: [number, number];\r\n  skillLevels?: string[];\r\n  features?: string[];\r\n  status?: string[];\r\n}\r\n\r\n// Dynamic grouping interface\r\nexport interface GameGroup {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  emoji: string;\r\n  color: string;\r\n  criteria: GameFilter;\r\n  featured?: boolean;\r\n}\r\n\r\n// Autocomplete suggestion interface\r\nexport interface AutocompleteSuggestion {\r\n  type: 'game' | 'tag' | 'objective';\r\n  value: string;\r\n  label: string;\r\n  emoji?: string;\r\n  subject?: keyof typeof SUBJECTS;\r\n  count?: number;\r\n  gameTitle?: string;\r\n}\r\n\r\n// Tag category data interface\r\nexport interface TagCategoryData {\r\n  id: string;\r\n  name: string;\r\n  tags: TagData[];\r\n}\r\n\r\n// Individual tag data interface\r\nexport interface TagData {\r\n  name: string;\r\n  count: number;\r\n  label: string;\r\n}\r\n\r\n// Facet filter interface for sidebar\r\nexport interface FacetFilter {\r\n  ageRanges: string[];\r\n  durations: string[];\r\n  skillLevels: string[];\r\n  features: string[];\r\n}\r\n\r\n// Sort options interface\r\nexport interface SortOptions {\r\n  field: 'relevance' | 'skillLevel' | 'duration' | 'lastUpdated' | 'title';\r\n  direction: 'asc' | 'desc';\r\n}\r\n\r\n// View preferences interface\r\nexport interface ViewPreferences {\r\n  sortBy: SortOptions;\r\n  viewType: 'grid' | 'list';\r\n  resultsPerPage: number;\r\n}\r\n\r\n// Enhanced game filter including facets\r\nexport interface EnhancedGameFilter extends GameFilter {\r\n  facets?: FacetFilter;\r\n  sort?: SortOptions;\r\n  query?: string;\r\n}\r\n\r\n// Flat game registry - all games in one array\r\nexport const GAMES: Game[] = [\r\n  {\r\n    id: 'numbers',\r\n    title: 'Numbers',\r\n    description: 'Learn to recognize numbers and count objects',\r\n    href: '/games/numbers',\r\n    emoji: 'üî¢',\r\n    color: '#4361ee',\r\n    subject: 'Mathematics',\r\n    tags: ['counting', 'recognition', 'numbers', 'beginner'],\r\n    ageRange: [3, 6],\r\n    skillLevel: 'beginner',\r\n    estimatedDuration: 10,\r\n    learningObjectives: ['Number recognition', 'Counting skills', 'One-to-one correspondence'],\r\n    hasAudio: true,\r\n    hasVisuals: true,\r\n    isInteractive: true,\r\n    supportsMultiplayer: false,\r\n    status: 'active',\r\n    lastUpdated: '2024-01-15',\r\n    version: '1.0.0'\r\n  },\r\n  {\r\n    id: 'letters',\r\n    title: 'Letters',\r\n    description: 'Learn the alphabet and letter sounds',\r\n    href: '/games/letters',\r\n    emoji: 'üî§',\r\n    color: '#ff6d00',\r\n    subject: 'Language Arts',\r\n    tags: ['alphabet', 'phonics', 'recognition', 'beginner'],\r\n    ageRange: [3, 7],\r\n    skillLevel: 'beginner',\r\n    estimatedDuration: 12,\r\n    learningObjectives: ['Letter recognition', 'Phonetic awareness', 'Alphabet sequence'],\r\n    hasAudio: true,\r\n    hasVisuals: true,\r\n    isInteractive: true,\r\n    supportsMultiplayer: false,\r\n    status: 'active',\r\n    lastUpdated: '2024-01-15',\r\n    version: '1.0.0'\r\n  },\r\n  {\r\n    id: 'shapes',\r\n    title: 'Shapes',\r\n    description: 'Identify different shapes',\r\n    href: '/games/shapes',\r\n    emoji: '‚≠ê',\r\n    color: '#2ec4b6',\r\n    subject: 'Visual Arts',\r\n    tags: ['shapes', 'geometry', 'recognition', 'spatial-awareness'],\r\n    ageRange: [3, 6],\r\n    skillLevel: 'beginner',\r\n    estimatedDuration: 8,\r\n    learningObjectives: ['Shape recognition', 'Geometric understanding', 'Visual discrimination'],\r\n    hasAudio: true,\r\n    hasVisuals: true,\r\n    isInteractive: true,\r\n    supportsMultiplayer: false,\r\n    status: 'active',\r\n    lastUpdated: '2024-01-15',\r\n    version: '1.0.0'\r\n  },\r\n  {\r\n    id: 'shape-sorter',\r\n    title: 'Shape Sorter',\r\n    description: 'Drag shapes into the correct holes',\r\n    href: '/games/shapes/sorter',\r\n    emoji: 'üî∑',\r\n    color: '#2ec4b6',\r\n    subject: 'Visual Arts',\r\n    tags: ['shapes', 'drag-drop', 'sorting', 'spatial-awareness', 'motor-skills'],\r\n    ageRange: [3, 5],\r\n    skillLevel: 'beginner',\r\n    estimatedDuration: 6,\r\n    learningObjectives: ['Fine motor skills', 'Shape matching', 'Problem solving'],\r\n    prerequisites: ['shapes'],\r\n    hasAudio: true,\r\n    hasVisuals: true,\r\n    isInteractive: true,\r\n    supportsMultiplayer: false,\r\n    status: 'active',\r\n    lastUpdated: '2024-01-15',\r\n    version: '1.0.0'\r\n  },\r\n  {\r\n    id: 'colors',\r\n    title: 'Colors',\r\n    description: 'Recognize and match colors',\r\n    href: '/games/colors',\r\n    emoji: 'üåà',\r\n    color: '#ff5a5f',\r\n    subject: 'Visual Arts',\r\n    tags: ['colors', 'recognition', 'matching', 'visual-perception'],\r\n    ageRange: [2, 5],\r\n    skillLevel: 'beginner',\r\n    estimatedDuration: 7,\r\n    learningObjectives: ['Color recognition', 'Color naming', 'Visual discrimination'],\r\n    hasAudio: true,\r\n    hasVisuals: true,\r\n    isInteractive: true,\r\n    supportsMultiplayer: false,\r\n    status: 'active',\r\n    lastUpdated: '2024-01-15',\r\n    version: '1.0.0'\r\n  },\r\n  {\r\n    id: 'patterns',\r\n    title: 'Patterns',\r\n    description: 'Find the patterns and sequences',\r\n    href: '/games/patterns',\r\n    emoji: 'üìä',\r\n    color: '#ffbe0b',\r\n    subject: 'Visual Arts',\r\n    tags: ['patterns', 'sequences', 'logic', 'prediction'],\r\n    ageRange: [4, 7],\r\n    skillLevel: 'intermediate',\r\n    estimatedDuration: 12,\r\n    learningObjectives: ['Pattern recognition', 'Logical thinking', 'Prediction skills'],\r\n    hasAudio: true,\r\n    hasVisuals: true,\r\n    isInteractive: true,\r\n    supportsMultiplayer: false,\r\n    status: 'active',\r\n    lastUpdated: '2024-01-15',\r\n    version: '1.0.0'\r\n  },\r\n  {\r\n    id: 'addition',\r\n    title: 'Addition',\r\n    description: 'Practice simple addition problems',\r\n    href: '/games/math/addition',\r\n    emoji: '‚ûï',\r\n    color: '#2ec4b6',\r\n    subject: 'Mathematics',\r\n    tags: ['addition', 'arithmetic', 'calculation', 'numbers'],\r\n    ageRange: [5, 8],\r\n    skillLevel: 'intermediate',\r\n    estimatedDuration: 15,\r\n    learningObjectives: ['Addition facts', 'Mathematical reasoning', 'Problem solving'],\r\n    prerequisites: ['numbers'],\r\n    hasAudio: true,\r\n    hasVisuals: true,\r\n    isInteractive: true,\r\n    supportsMultiplayer: false,\r\n    status: 'active',\r\n    lastUpdated: '2024-01-15',\r\n    version: '1.0.0'\r\n  },\r\n  {\r\n    id: 'subtraction',\r\n    title: 'Subtraction',\r\n    description: 'Practice simple subtraction problems',\r\n    href: '/games/math/subtraction',\r\n    emoji: '‚ûñ',\r\n    color: '#ffbe0b',\r\n    subject: 'Mathematics',\r\n    tags: ['subtraction', 'arithmetic', 'calculation', 'numbers'],\r\n    ageRange: [5, 8],\r\n    skillLevel: 'intermediate',\r\n    estimatedDuration: 15,\r\n    learningObjectives: ['Subtraction facts', 'Mathematical reasoning', 'Problem solving'],\r\n    prerequisites: ['numbers', 'addition'],\r\n    hasAudio: true,\r\n    hasVisuals: true,\r\n    isInteractive: true,\r\n    supportsMultiplayer: false,\r\n    status: 'active',\r\n    lastUpdated: '2024-01-15',\r\n    version: '1.0.0'\r\n  },\r\n  {\r\n    id: 'fill-in-the-blank',\r\n    title: 'Fill in the Blank',\r\n    description: 'Complete the missing letters in words',\r\n    href: '/games/fill-in-the-blank',\r\n    emoji: '‚úèÔ∏è',\r\n    color: '#ff9e40',\r\n    subject: 'Language Arts',\r\n    tags: ['spelling', 'vocabulary', 'letters', 'word-completion'],\r\n    ageRange: [5, 8],\r\n    skillLevel: 'intermediate',\r\n    estimatedDuration: 10,\r\n    learningObjectives: ['Spelling skills', 'Word recognition', 'Letter-sound relationships'],\r\n    prerequisites: ['letters'],\r\n    hasAudio: true,\r\n    hasVisuals: true,\r\n    isInteractive: true,\r\n    supportsMultiplayer: false,\r\n    status: 'active',\r\n    lastUpdated: '2024-01-15',\r\n    version: '1.0.0'\r\n  },\r\n  {\r\n    id: 'geography',\r\n    title: 'Geography',\r\n    description: 'Learn about continents and US states',\r\n    href: '/games/geography',\r\n    emoji: 'üåç',\r\n    color: '#64f7e7',\r\n    subject: 'Social Studies',\r\n    tags: ['geography', 'continents', 'states', 'world-knowledge'],\r\n    ageRange: [6, 10],\r\n    skillLevel: 'intermediate',\r\n    estimatedDuration: 20,\r\n    learningObjectives: ['Geographic knowledge', 'Spatial relationships', 'Cultural awareness'],\r\n    hasAudio: true,\r\n    hasVisuals: true,\r\n    isInteractive: true,\r\n    supportsMultiplayer: false,\r\n    status: 'active',\r\n    lastUpdated: '2024-01-15',\r\n    version: '1.0.0'\r\n  },\r\n  {\r\n    id: 'rhyming',\r\n    title: 'Rhyming Words',\r\n    description: 'Pick the word that rhymes!',\r\n    href: '/games/rhyming',\r\n    emoji: 'üß©',\r\n    color: '#64f7e7',\r\n    subject: 'Language Arts',\r\n    tags: ['rhyming', 'phonics', 'word-play', 'sound-patterns'],\r\n    ageRange: [4, 7],\r\n    skillLevel: 'intermediate',\r\n    estimatedDuration: 8,\r\n    learningObjectives: ['Phonological awareness', 'Sound patterns', 'Vocabulary expansion'],\r\n    prerequisites: ['letters'],\r\n    hasAudio: true,\r\n    hasVisuals: true,\r\n    isInteractive: true,\r\n    supportsMultiplayer: false,\r\n    status: 'active',\r\n    lastUpdated: '2024-01-15',\r\n    version: '1.0.0'\r\n  },\r\n  {\r\n    id: 'alphabet-sequence',\r\n    title: 'Alphabet Sequence',\r\n    description: 'Memorize the alphabet order by finding missing letters',\r\n    href: '/games/alphabet-sequence',\r\n    emoji: 'üî§',\r\n    color: '#9381ff',\r\n    subject: 'Language Arts',\r\n    tags: ['alphabet', 'memory', 'sequence', 'order', 'beginner'],\r\n    ageRange: [4, 7],\r\n    skillLevel: 'beginner',\r\n    estimatedDuration: 10,\r\n    learningObjectives: ['Alphabet memorization', 'Sequential thinking', 'Letter recognition'],\r\n    prerequisites: ['letters'],\r\n    hasAudio: true,\r\n    hasVisuals: true,\r\n    isInteractive: true,\r\n    supportsMultiplayer: false,\r\n    status: 'active',\r\n    lastUpdated: '2024-01-15',\r\n    version: '1.0.0'\r\n  },\r\n  {\r\n    id: 'number-sequence',\r\n    title: 'Number Sequence',\r\n    description: 'Memorize number order by finding missing numbers',\r\n    href: '/games/number-sequence',\r\n    emoji: '1Ô∏è‚É£',\r\n    color: '#4361ee',\r\n    subject: 'Mathematics',\r\n    tags: ['numbers', 'memory', 'sequence', 'order', 'counting'],\r\n    ageRange: [4, 7],\r\n    skillLevel: 'beginner',\r\n    estimatedDuration: 10,\r\n    learningObjectives: ['Number sequence memorization', 'Sequential counting', 'Number recognition'],\r\n    prerequisites: ['numbers'],\r\n    hasAudio: true,\r\n    hasVisuals: true,\r\n    isInteractive: true,\r\n    supportsMultiplayer: false,\r\n    status: 'active',\r\n    lastUpdated: '2024-01-15',\r\n    version: '1.0.0'\r\n  }\r\n];\r\n\r\n// Predefined dynamic groupings\r\nexport const GAME_GROUPINGS: GameGroup[] = [\r\n  {\r\n    id: 'math-basics',\r\n    title: 'Math Fundamentals',\r\n    description: 'Essential math skills for early learners',\r\n    emoji: 'üî¢',\r\n    color: '#4361ee',\r\n    criteria: { \r\n      subjects: ['Mathematics'], \r\n      skillLevels: ['beginner'] \r\n    },\r\n    featured: true\r\n  },\r\n  {\r\n    id: 'language-foundation',\r\n    title: 'Language Building Blocks',\r\n    description: 'Core language and literacy skills',\r\n    emoji: 'üìö',\r\n    color: '#ff6d00',\r\n    criteria: { \r\n      subjects: ['Language Arts'], \r\n      skillLevels: ['beginner'] \r\n    },\r\n    featured: true\r\n  },\r\n  {\r\n    id: 'quick-games',\r\n    title: 'Quick Play',\r\n    description: 'Games that can be completed in under 10 minutes',\r\n    emoji: '‚ö°',\r\n    color: '#2ec4b6',\r\n    criteria: { \r\n      tags: ['quick'] \r\n    }\r\n  },\r\n  {\r\n    id: 'interactive-play',\r\n    title: 'Interactive Adventures',\r\n    description: 'Hands-on games with rich interactions',\r\n    emoji: 'üéÆ',\r\n    color: '#ff5a5f',\r\n    criteria: { \r\n      tags: ['drag-drop', 'interactive'] \r\n    }\r\n  },\r\n  {\r\n    id: 'visual-arts',\r\n    title: 'Creative & Visual',\r\n    description: 'Games focusing on visual skills and creativity',\r\n    emoji: 'üé®',\r\n    color: '#ff5a5f',\r\n    criteria: { \r\n      subjects: ['Visual Arts'] \r\n    },\r\n    featured: true\r\n  },\r\n  {\r\n    id: 'advanced-learners',\r\n    title: 'Challenge Mode',\r\n    description: 'Advanced games for confident learners',\r\n    emoji: 'üèÜ',\r\n    color: '#9381ff',\r\n    criteria: { \r\n      skillLevels: ['intermediate', 'advanced'] \r\n    }\r\n  }\r\n];\r\n\r\ninterface ParsedQuery {\r\n  skillLevel?: string;\r\n  duration?: string;\r\n  features?: string[];\r\n  subject?: string;\r\n  ageRange?: [number, number];\r\n}\r\n\r\ninterface GameRecommendation {\r\n  game: Game;\r\n  score: number;\r\n  reason: string;\r\n}\r\n\r\n// Game discovery and filtering engine\r\nexport class GameDiscoveryEngine {\r\n  private games: Game[];\r\n  \r\n  constructor(games: Game[] = GAMES) {\r\n    this.games = games;\r\n  }\r\n  \r\n  /**\r\n   * Search games with text query and filters\r\n   */\r\n  search(query: string = '', filters: GameFilter = {}): Game[] {\r\n    let results = [...this.games];\r\n    \r\n    // Filter by status (default to active only)\r\n    if (!filters.status) {\r\n      results = results.filter(game => game.status === 'active');\r\n    } else {\r\n      results = results.filter(game => filters.status!.includes(game.status));\r\n    }\r\n    \r\n    // Text search\r\n    if (query.trim()) {\r\n      const searchTerm = query.toLowerCase();\r\n      results = results.filter(game => \r\n        game.title.toLowerCase().includes(searchTerm) ||\r\n        game.description.toLowerCase().includes(searchTerm) ||\r\n        game.tags.some(tag => tag.toLowerCase().includes(searchTerm)) ||\r\n        game.learningObjectives.some(obj => obj.toLowerCase().includes(searchTerm))\r\n      );\r\n    }\r\n    \r\n    // Apply filters\r\n    if (filters.subjects?.length) {\r\n      results = results.filter(g => filters.subjects!.includes(g.subject));\r\n    }\r\n    \r\n    if (filters.tags?.length) {\r\n      results = results.filter(g => \r\n        filters.tags!.some(tag => g.tags.includes(tag))\r\n      );\r\n    }\r\n    \r\n    if (filters.ageRange) {\r\n      const [minAge, maxAge] = filters.ageRange;\r\n      results = results.filter(g => \r\n        g.ageRange[0] <= maxAge && g.ageRange[1] >= minAge\r\n      );\r\n    }\r\n    \r\n    if (filters.skillLevels?.length) {\r\n      results = results.filter(g => filters.skillLevels!.includes(g.skillLevel));\r\n    }\r\n    \r\n    if (filters.features?.length) {\r\n      results = results.filter(g => filters.features!.every(feature => \r\n        (feature === 'audio' && g.hasAudio) ||\r\n        (feature === 'multiplayer' && g.supportsMultiplayer) ||\r\n        (feature === 'interactive' && g.isInteractive) ||\r\n        g.tags.includes(feature)\r\n      ));\r\n    }\r\n    \r\n    return results;\r\n  }\r\n  \r\n  /**\r\n   * Get games for a specific grouping\r\n   */\r\n  getGamesForGroup(groupId: string): Game[] {\r\n    const group = GAME_GROUPINGS.find(g => g.id === groupId);\r\n    if (!group) return [];\r\n    \r\n    return this.search('', group.criteria);\r\n  }\r\n  \r\n  /**\r\n   * Get games by subject\r\n   */\r\n  getGamesBySubject(subject: keyof typeof SUBJECTS): Game[] {\r\n    return this.search('', { subjects: [subject] });\r\n  }\r\n  \r\n  /**\r\n   * Get featured games\r\n   */\r\n  getFeaturedGames(): Game[] {\r\n    const featuredGroups = GAME_GROUPINGS.filter(g => g.featured);\r\n    const featuredGameIds = new Set<string>();\r\n    \r\n    featuredGroups.forEach(group => {\r\n      const games = this.getGamesForGroup(group.id);\r\n      games.slice(0, 2).forEach(game => featuredGameIds.add(game.id)); // Max 2 per group\r\n    });\r\n    \r\n    return Array.from(featuredGameIds).map(id => this.games.find(g => g.id === id)!);\r\n  }\r\n  \r\n  /**\r\n   * Get available filter facets based on current results\r\n   */\r\n  getFacets(currentFilters: GameFilter = {}): Record<string, unknown> {\r\n    const filteredGames = this.search('', currentFilters);\r\n    \r\n    return {\r\n      subjects: this.buildFacet(filteredGames, 'subject'),\r\n      skillLevels: this.buildFacet(filteredGames, 'skillLevel'),\r\n      tags: this.buildTagFacets(filteredGames),\r\n      ageRanges: this.buildAgeRangeFacets(filteredGames)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get autocomplete suggestions based on search query\r\n   * Returns suggestions from game titles, tags, and learning objectives\r\n   */\r\n  getAutocompleteSuggestions(query: string, limit: number = 8): AutocompleteSuggestion[] {\r\n    if (!query.trim()) return [];\r\n    \r\n    const suggestions: AutocompleteSuggestion[] = [];\r\n    const queryLower = query.toLowerCase();\r\n    const seen = new Set<string>();\r\n\r\n    // Game titles\r\n    this.games.forEach(game => {\r\n      if (game.title.toLowerCase().includes(queryLower) && !seen.has(game.title)) {\r\n        suggestions.push({\r\n          type: 'game',\r\n          value: game.title,\r\n          label: game.title,\r\n          emoji: game.emoji,\r\n          subject: game.subject\r\n        });\r\n        seen.add(game.title);\r\n      }\r\n    });\r\n\r\n    // Popular tags\r\n    const allTags = this.games.flatMap(game => game.tags);\r\n    const tagCounts = allTags.reduce((acc, tag) => {\r\n      acc[tag] = (acc[tag] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<string, number>);\r\n\r\n    Object.entries(tagCounts)\r\n      .filter(([tag]) => tag.toLowerCase().includes(queryLower) && !seen.has(tag))\r\n      .sort(([, a], [, b]) => b - a) // Sort by popularity\r\n      .forEach(([tag]) => {\r\n        suggestions.push({\r\n          type: 'tag',\r\n          value: tag,\r\n          label: `#${tag}`,\r\n          count: tagCounts[tag]\r\n        });\r\n        seen.add(tag);\r\n      });\r\n\r\n    // Learning objectives\r\n    this.games.forEach(game => {\r\n      game.learningObjectives.forEach(objective => {\r\n        if (objective.toLowerCase().includes(queryLower) && !seen.has(objective)) {\r\n          suggestions.push({\r\n            type: 'objective',\r\n            value: objective,\r\n            label: objective,\r\n            gameTitle: game.title\r\n          });\r\n          seen.add(objective);\r\n        }\r\n      });\r\n    });\r\n\r\n    return suggestions.slice(0, limit);\r\n  }\r\n\r\n  /**\r\n   * Get all available tags grouped by category with counts\r\n   */\r\n  getTagsByCategory(currentFilters: GameFilter = {}): TagCategoryData[] {\r\n    const filteredGames = this.search('', currentFilters);\r\n    const allTags = filteredGames.flatMap(game => game.tags);\r\n    const tagCounts = allTags.reduce((acc, tag) => {\r\n      acc[tag] = (acc[tag] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<string, number>);\r\n\r\n    return Object.entries(TAG_CATEGORIES).map(([categoryKey, categoryTags]) => ({\r\n      id: categoryKey,\r\n      name: this.formatCategoryName(categoryKey),\r\n      tags: categoryTags\r\n        .filter(tag => tagCounts[tag] > 0)\r\n        .map(tag => ({\r\n          name: tag,\r\n          count: tagCounts[tag],\r\n          label: this.formatTagLabel(tag)\r\n        }))\r\n        .sort((a, b) => b.count - a.count)\r\n    })).filter(category => category.tags.length > 0);\r\n  }\r\n\r\n  /**\r\n   * Format category name for display\r\n   */\r\n  private formatCategoryName(categoryKey: string): string {\r\n    const nameMap: Record<string, string> = {\r\n      'skill-type': 'Skills',\r\n      'interaction': 'Interaction',\r\n      'difficulty': 'Difficulty',\r\n      'duration': 'Duration',\r\n      'feature': 'Features',\r\n      'curriculum': 'Curriculum'\r\n    };\r\n    return nameMap[categoryKey] || categoryKey;\r\n  }\r\n\r\n  /**\r\n   * Format tag label for display\r\n   */\r\n  private formatTagLabel(tag: string): string {\r\n    return tag.split('-').map(word => \r\n      word.charAt(0).toUpperCase() + word.slice(1)\r\n    ).join(' ');\r\n  }\r\n\r\n  /**\r\n   * Enhanced search with facet filtering and sorting\r\n   */\r\n  searchWithFacets(query: string = '', filters: EnhancedGameFilter = {}): Game[] {\r\n    let results = this.search(query, filters);\r\n\r\n    // Apply facet filters\r\n    if (filters.facets) {\r\n      results = this.applyFacetFilters(results, filters.facets);\r\n    }\r\n\r\n    // Apply sorting\r\n    if (filters.sort) {\r\n      results = this.sortGames(results, filters.sort, query);\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Apply facet filters to game results\r\n   */\r\n  private applyFacetFilters(games: Game[], facets: FacetFilter): Game[] {\r\n    let filtered = games;\r\n\r\n    // Age range filtering\r\n    if (facets.ageRanges.length > 0) {\r\n      filtered = filtered.filter(game => {\r\n        return facets.ageRanges.some(range => {\r\n          const [minAge, maxAge] = this.parseAgeRange(range);\r\n          return game.ageRange[0] <= maxAge && game.ageRange[1] >= minAge;\r\n        });\r\n      });\r\n    }\r\n\r\n    // Duration filtering\r\n    if (facets.durations.length > 0) {\r\n      filtered = filtered.filter(game => {\r\n        return facets.durations.some(duration => {\r\n          const [minDuration, maxDuration] = this.parseDurationRange(duration);\r\n          return game.estimatedDuration >= minDuration && game.estimatedDuration <= maxDuration;\r\n        });\r\n      });\r\n    }\r\n\r\n    // Skill level filtering\r\n    if (facets.skillLevels.length > 0) {\r\n      filtered = filtered.filter(game => \r\n        facets.skillLevels.includes(game.skillLevel)\r\n      );\r\n    }\r\n\r\n    // Features filtering\r\n    if (facets.features.length > 0) {\r\n      filtered = filtered.filter(game => {\r\n        return facets.features.every(feature => {\r\n          switch (feature) {\r\n            case 'audio':\r\n              return game.hasAudio;\r\n            case 'multiplayer':\r\n              return game.supportsMultiplayer;\r\n            case 'interactive':\r\n              return game.isInteractive;\r\n            case 'visuals':\r\n              return game.hasVisuals;\r\n            default:\r\n              return game.tags.includes(feature);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    return filtered;\r\n  }\r\n\r\n  /**\r\n   * Sort games based on criteria\r\n   */\r\n  private sortGames(games: Game[], sort: SortOptions, query: string = ''): Game[] {\r\n    const sorted = [...games];\r\n\r\n    switch (sort.field) {\r\n      case 'relevance':\r\n        return this.sortByRelevance(sorted, query);\r\n      \r\n      case 'skillLevel':\r\n        return sorted.sort((a, b) => {\r\n          const skillOrder = { 'beginner': 1, 'intermediate': 2, 'advanced': 3 };\r\n          const comparison = skillOrder[a.skillLevel] - skillOrder[b.skillLevel];\r\n          return sort.direction === 'desc' ? -comparison : comparison;\r\n        });\r\n      \r\n      case 'duration':\r\n        return sorted.sort((a, b) => {\r\n          const comparison = a.estimatedDuration - b.estimatedDuration;\r\n          return sort.direction === 'desc' ? -comparison : comparison;\r\n        });\r\n      \r\n      case 'lastUpdated':\r\n        return sorted.sort((a, b) => {\r\n          const comparison = new Date(a.lastUpdated).getTime() - new Date(b.lastUpdated).getTime();\r\n          return sort.direction === 'desc' ? -comparison : comparison;\r\n        });\r\n      \r\n      case 'title':\r\n        return sorted.sort((a, b) => {\r\n          const comparison = a.title.localeCompare(b.title);\r\n          return sort.direction === 'desc' ? -comparison : comparison;\r\n        });\r\n      \r\n      default:\r\n        return sorted;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sort by relevance based on search query\r\n   */\r\n  private sortByRelevance(games: Game[], query: string): Game[] {\r\n    if (!query.trim()) {\r\n      // If no query, sort by popularity (tag count) and then alphabetically\r\n      return games.sort((a, b) => {\r\n        const aPopularity = a.tags.length;\r\n        const bPopularity = b.tags.length;\r\n        if (aPopularity !== bPopularity) {\r\n          return bPopularity - aPopularity;\r\n        }\r\n        return a.title.localeCompare(b.title);\r\n      });\r\n    }\r\n\r\n    const queryLower = query.toLowerCase();\r\n    \r\n    return games.sort((a, b) => {\r\n      let scoreA = 0;\r\n      let scoreB = 0;\r\n\r\n      // Title exact match (highest priority)\r\n      if (a.title.toLowerCase() === queryLower) scoreA += 100;\r\n      if (b.title.toLowerCase() === queryLower) scoreB += 100;\r\n\r\n      // Title starts with query\r\n      if (a.title.toLowerCase().startsWith(queryLower)) scoreA += 50;\r\n      if (b.title.toLowerCase().startsWith(queryLower)) scoreB += 50;\r\n\r\n      // Title contains query\r\n      if (a.title.toLowerCase().includes(queryLower)) scoreA += 25;\r\n      if (b.title.toLowerCase().includes(queryLower)) scoreB += 25;\r\n\r\n      // Tag exact match\r\n      if (a.tags.some(tag => tag.toLowerCase() === queryLower)) scoreA += 20;\r\n      if (b.tags.some(tag => tag.toLowerCase() === queryLower)) scoreB += 20;\r\n\r\n      // Tag contains query\r\n      if (a.tags.some(tag => tag.toLowerCase().includes(queryLower))) scoreA += 10;\r\n      if (b.tags.some(tag => tag.toLowerCase().includes(queryLower))) scoreB += 10;\r\n\r\n      // Learning objectives contain query\r\n      if (a.learningObjectives.some(obj => obj.toLowerCase().includes(queryLower))) scoreA += 5;\r\n      if (b.learningObjectives.some(obj => obj.toLowerCase().includes(queryLower))) scoreB += 5;\r\n\r\n      // Description contains query\r\n      if (a.description.toLowerCase().includes(queryLower)) scoreA += 2;\r\n      if (b.description.toLowerCase().includes(queryLower)) scoreB += 2;\r\n\r\n      return scoreB - scoreA;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Parse age range string to min/max values\r\n   */\r\n  private parseAgeRange(range: string): [number, number] {\r\n    const rangeMap: Record<string, [number, number]> = {\r\n      '2-3': [2, 3],\r\n      '3-4': [3, 4],\r\n      '4-5': [4, 5],\r\n      '5-6': [5, 6],\r\n      '6+': [6, 10]\r\n    };\r\n    return rangeMap[range] || [0, 10];\r\n  }\r\n\r\n  /**\r\n   * Parse duration range string to min/max values (in minutes)\r\n   */\r\n  private parseDurationRange(range: string): [number, number] {\r\n    const rangeMap: Record<string, [number, number]> = {\r\n      'quick': [0, 5],\r\n      'short': [5, 10],\r\n      'medium': [10, 15],\r\n      'long': [15, 60]\r\n    };\r\n    return rangeMap[range] || [0, 60];\r\n  }\r\n\r\n  /**\r\n   * Get facet options with counts for sidebar\r\n   */\r\n  getFacetOptions(currentFilters: EnhancedGameFilter = {}): {\r\n    ageRanges: Array<{range: string, label: string, count: number}>;\r\n    durations: Array<{range: string, label: string, count: number}>;\r\n    skillLevels: Array<{level: string, label: string, count: number}>;\r\n    features: Array<{feature: string, label: string, count: number}>;\r\n  } {\r\n    const baseGames = this.search(currentFilters.query || '', currentFilters);\r\n\r\n    return {\r\n      ageRanges: [\r\n        { range: '2-3', label: '2-3 years', count: this.countGamesInAgeRange(baseGames, '2-3') },\r\n        { range: '3-4', label: '3-4 years', count: this.countGamesInAgeRange(baseGames, '3-4') },\r\n        { range: '4-5', label: '4-5 years', count: this.countGamesInAgeRange(baseGames, '4-5') },\r\n        { range: '5-6', label: '5-6 years', count: this.countGamesInAgeRange(baseGames, '5-6') },\r\n        { range: '6+', label: '6+ years', count: this.countGamesInAgeRange(baseGames, '6+') }\r\n      ].filter(item => item.count > 0),\r\n\r\n      durations: [\r\n        { range: 'quick', label: 'Quick (‚â§5 min)', count: this.countGamesInDurationRange(baseGames, 'quick') },\r\n        { range: 'short', label: 'Short (5-10 min)', count: this.countGamesInDurationRange(baseGames, 'short') },\r\n        { range: 'medium', label: 'Medium (10-15 min)', count: this.countGamesInDurationRange(baseGames, 'medium') },\r\n        { range: 'long', label: 'Long (15+ min)', count: this.countGamesInDurationRange(baseGames, 'long') }\r\n      ].filter(item => item.count > 0),\r\n\r\n      skillLevels: [\r\n        { level: 'beginner', label: 'Beginner', count: this.countGamesBySkillLevel(baseGames, 'beginner') },\r\n        { level: 'intermediate', label: 'Intermediate', count: this.countGamesBySkillLevel(baseGames, 'intermediate') },\r\n        { level: 'advanced', label: 'Advanced', count: this.countGamesBySkillLevel(baseGames, 'advanced') }\r\n      ].filter(item => item.count > 0),\r\n\r\n      features: [\r\n        { feature: 'audio', label: 'Audio Support', count: this.countGamesByFeature(baseGames, 'audio') },\r\n        { feature: 'interactive', label: 'Interactive', count: this.countGamesByFeature(baseGames, 'interactive') },\r\n        { feature: 'visuals', label: 'Rich Visuals', count: this.countGamesByFeature(baseGames, 'visuals') },\r\n        { feature: 'multiplayer', label: 'Multiplayer', count: this.countGamesByFeature(baseGames, 'multiplayer') }\r\n      ].filter(item => item.count > 0)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Helper methods for counting games by facet criteria\r\n   */\r\n  private countGamesInAgeRange(games: Game[], range: string): number {\r\n    const [minAge, maxAge] = this.parseAgeRange(range);\r\n    return games.filter(game => \r\n      game.ageRange[0] <= maxAge && game.ageRange[1] >= minAge\r\n    ).length;\r\n  }\r\n\r\n  private countGamesInDurationRange(games: Game[], range: string): number {\r\n    const [minDuration, maxDuration] = this.parseDurationRange(range);\r\n    return games.filter(game => \r\n      game.estimatedDuration >= minDuration && game.estimatedDuration <= maxDuration\r\n    ).length;\r\n  }\r\n\r\n  private countGamesBySkillLevel(games: Game[], level: string): number {\r\n    return games.filter(game => game.skillLevel === level).length;\r\n  }\r\n\r\n  private countGamesByFeature(games: Game[], feature: string): number {\r\n    return games.filter(game => {\r\n      switch (feature) {\r\n        case 'audio': return game.hasAudio;\r\n        case 'interactive': return game.isInteractive;\r\n        case 'visuals': return game.hasVisuals;\r\n        case 'multiplayer': return game.supportsMultiplayer;\r\n        default: return false;\r\n      }\r\n    }).length;\r\n  }\r\n  \r\n  private buildFacet(games: Game[], field: keyof Game) {\r\n    const counts = games.reduce((acc, game) => {\r\n      const value = game[field] as string;\r\n      acc[value] = (acc[value] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<string, number>);\r\n    \r\n    return Object.entries(counts)\r\n      .map(([value, count]) => ({ value, count }))\r\n      .sort((a, b) => b.count - a.count);\r\n  }\r\n  \r\n  private buildTagFacets(games: Game[]) {\r\n    const tagCounts = games.reduce((acc, game) => {\r\n      game.tags.forEach(tag => {\r\n        acc[tag] = (acc[tag] || 0) + 1;\r\n      });\r\n      return acc;\r\n    }, {} as Record<string, number>);\r\n    \r\n    return Object.entries(tagCounts)\r\n      .map(([tag, count]) => ({ tag, count }))\r\n      .sort((a, b) => b.count - a.count);\r\n  }\r\n  \r\n  private buildAgeRangeFacets(games: Game[]) {\r\n    const ranges = [\r\n      { label: '2-3 years', min: 2, max: 3 },\r\n      { label: '3-4 years', min: 3, max: 4 },\r\n      { label: '4-5 years', min: 4, max: 5 },\r\n      { label: '5-6 years', min: 5, max: 6 },\r\n      { label: '6+ years', min: 6, max: 10 }\r\n    ];\r\n    \r\n    return ranges.map(range => ({\r\n      ...range,\r\n      count: games.filter(g => \r\n        g.ageRange[0] <= range.max && g.ageRange[1] >= range.min\r\n      ).length\r\n    })).filter(range => range.count > 0);\r\n  }\r\n\r\n  /**\r\n   * Parse natural language query into structured filters\r\n   */\r\n  parseNaturalLanguageQuery(query: string): ParsedQuery {\r\n    const queryLower = query.toLowerCase();\r\n    const result: ParsedQuery = {};\r\n\r\n    // Extract skill level\r\n    if (queryLower.includes('beginner')) result.skillLevel = 'beginner';\r\n    else if (queryLower.includes('intermediate')) result.skillLevel = 'intermediate';\r\n    else if (queryLower.includes('advanced')) result.skillLevel = 'advanced';\r\n\r\n    // Extract duration\r\n    if (queryLower.includes('quick') || queryLower.includes('under 5')) result.duration = 'quick';\r\n    else if (queryLower.includes('short') || queryLower.includes('5-10')) result.duration = 'short';\r\n    else if (queryLower.includes('medium') || queryLower.includes('10-15')) result.duration = 'medium';\r\n    else if (queryLower.includes('long') || queryLower.includes('15+')) result.duration = 'long';\r\n\r\n    // Extract features\r\n    const features: string[] = [];\r\n    if (queryLower.includes('audio')) features.push('audio');\r\n    if (queryLower.includes('multiplayer')) features.push('multiplayer');\r\n    if (queryLower.includes('interactive')) features.push('interactive');\r\n    if (queryLower.includes('visual')) features.push('visuals');\r\n    if (features.length > 0) result.features = features;\r\n\r\n    // Extract subject\r\n    Object.keys(SUBJECTS).forEach((key) => {\r\n      if (queryLower.includes(key.toLowerCase())) {\r\n        result.subject = key;\r\n      }\r\n    });\r\n\r\n    // Extract age range\r\n    const ageMatch = queryLower.match(/(\\d+)[-+]?\\s*(?:years?|yrs?)?/);\r\n    if (ageMatch) {\r\n      const age = parseInt(ageMatch[1]);\r\n      if (age >= 2 && age <= 6) {\r\n        result.ageRange = [age, age + 1];\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get recommended games based on query and filters\r\n   * Falls back to popular games if no matches found\r\n   */\r\n  getRecommendedGames(query: string = '', filters: GameFilter = {}): GameRecommendation[] {\r\n    // First try exact matches\r\n    const exactMatches = this.searchWithFacets(query, filters);\r\n    if (exactMatches.length > 0) {\r\n      return exactMatches.map(game => ({\r\n        game,\r\n        score: 1,\r\n        reason: 'Exact match'\r\n      }));\r\n    }\r\n\r\n    // Try natural language parsing\r\n    const parsedQuery = this.parseNaturalLanguageQuery(query);\r\n    const naturalMatches = this.searchWithFacets('', {\r\n      ...filters,\r\n      skillLevels: parsedQuery.skillLevel ? [parsedQuery.skillLevel] : undefined,\r\n      subjects: parsedQuery.subject ? [parsedQuery.subject] : undefined,\r\n      features: parsedQuery.features,\r\n      ageRange: parsedQuery.ageRange\r\n    });\r\n\r\n    if (naturalMatches.length > 0) {\r\n      return naturalMatches.map(game => ({\r\n        game,\r\n        score: 0.8,\r\n        reason: 'Natural language match'\r\n      }));\r\n    }\r\n\r\n    // Fallback to popular games\r\n    const popularGames = this.getPopularGames();\r\n    return popularGames.map(game => ({\r\n      game,\r\n      score: 0.6,\r\n      reason: 'Popular game'\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Get popular games based on completion rate and engagement\r\n   */\r\n  private getPopularGames(): Game[] {\r\n    // Sort games by tag count (proxy for popularity) and completion rate\r\n    return [...this.games]\r\n      .sort((a, b) => {\r\n        const aScore = a.tags.length;\r\n        const bScore = b.tags.length;\r\n        return bScore - aScore;\r\n      })\r\n      .slice(0, 5); // Return top 5 games\r\n  }\r\n}\r\n\r\n// Create global instance\r\nexport const gameDiscovery = new GameDiscoveryEngine();\r\n\r\n// Utility functions for backward compatibility and convenience\r\nexport const GameUtils = {\r\n  /**\r\n   * Get all games grouped by subject (for compatibility)\r\n   */\r\n  getGamesBySubjects(): Record<string, Game[]> {\r\n    return Object.keys(SUBJECTS).reduce((acc, subject) => {\r\n      acc[subject] = gameDiscovery.getGamesBySubject(subject as keyof typeof SUBJECTS);\r\n      return acc;\r\n    }, {} as Record<string, Game[]>);\r\n  },\r\n  \r\n  /**\r\n   * Get game count by subject\r\n   */\r\n  getGameCountBySubject(subject: keyof typeof SUBJECTS): number {\r\n    return gameDiscovery.getGamesBySubject(subject).length;\r\n  },\r\n  \r\n  /**\r\n   * Find game by ID\r\n   */\r\n  getGameById(id: string): Game | undefined {\r\n    return GAMES.find(game => game.id === id);\r\n  },\r\n  \r\n  /**\r\n   * Get prerequisites for a game\r\n   */\r\n  getGamePrerequisites(gameId: string): Game[] {\r\n    const game = this.getGameById(gameId);\r\n    if (!game?.prerequisites) return [];\r\n    \r\n    return game.prerequisites\r\n      .map(id => this.getGameById(id))\r\n      .filter(Boolean) as Game[];\r\n  }\r\n};\r\n\r\n// Legacy compatibility exports (will be deprecated)\r\nexport interface GameData {\r\n  title: string;\r\n  description: string;\r\n  href: string;\r\n  emoji: string;\r\n  color: string;\r\n}\r\n\r\nexport interface CategoryData {\r\n  key: string;\r\n  title: string;\r\n  description: string;\r\n  emoji: string;\r\n  color: string;\r\n  subject: string;\r\n  subgames: GameData[];\r\n}\r\n\r\n/**\r\n * @deprecated Use GAMES and gameDiscovery instead\r\n * Legacy compatibility - converts flat games back to old nested structure\r\n */\r\nexport const GAME_CATEGORIES: CategoryData[] = Object.keys(SUBJECTS).map(subject => {\r\n  const subjectGames = gameDiscovery.getGamesBySubject(subject as keyof typeof SUBJECTS);\r\n  \r\n  return {\r\n    key: subject.toLowerCase().replace(/\\s+/g, '-'),\r\n    title: subject,\r\n    description: `${subject} games and activities`,\r\n    emoji: SUBJECTS[subject as keyof typeof SUBJECTS].icon,\r\n    color: SUBJECTS[subject as keyof typeof SUBJECTS].color,\r\n    subject: subject,\r\n    subgames: subjectGames.map(game => ({\r\n      title: game.title,\r\n      description: game.description,\r\n      href: game.href,\r\n      emoji: game.emoji,\r\n      color: game.color\r\n    }))\r\n  };\r\n});"],"names":["GAMES","GAME_CATEGORIES","GAME_GROUPINGS","GameDiscoveryEngine","GameUtils","SUBJECTS","TAG_CATEGORIES","gameDiscovery","color","icon","id","title","description","href","emoji","subject","tags","ageRange","skillLevel","estimatedDuration","learningObjectives","hasAudio","hasVisuals","isInteractive","supportsMultiplayer","status","lastUpdated","version","prerequisites","criteria","subjects","skillLevels","featured","constructor","games","search","query","filters","results","filter","game","includes","trim","searchTerm","toLowerCase","some","tag","obj","length","g","minAge","maxAge","features","every","feature","getGamesForGroup","groupId","group","find","getGamesBySubject","getFeaturedGames","featuredGroups","featuredGameIds","Set","forEach","slice","add","Array","from","map","getFacets","currentFilters","filteredGames","buildFacet","buildTagFacets","ageRanges","buildAgeRangeFacets","getAutocompleteSuggestions","limit","suggestions","queryLower","seen","has","push","type","value","label","allTags","flatMap","tagCounts","reduce","acc","Object","entries","sort","a","b","count","objective","gameTitle","getTagsByCategory","categoryKey","categoryTags","name","formatCategoryName","formatTagLabel","category","nameMap","split","word","charAt","toUpperCase","join","searchWithFacets","facets","applyFacetFilters","sortGames","filtered","range","parseAgeRange","durations","duration","minDuration","maxDuration","parseDurationRange","sorted","field","sortByRelevance","skillOrder","comparison","direction","Date","getTime","localeCompare","aPopularity","bPopularity","scoreA","scoreB","startsWith","rangeMap","getFacetOptions","baseGames","countGamesInAgeRange","item","countGamesInDurationRange","level","countGamesBySkillLevel","countGamesByFeature","counts","ranges","min","max","parseNaturalLanguageQuery","result","keys","key","ageMatch","match","age","parseInt","getRecommendedGames","exactMatches","score","reason","parsedQuery","naturalMatches","undefined","popularGames","getPopularGames","aScore","bScore","getGamesBySubjects","getGameCountBySubject","getGameById","getGamePrerequisites","gameId","Boolean","subjectGames","replace","subgames"],"mappings":"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"}