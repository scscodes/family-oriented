9e8eca4a6fbb4c309d8a96546950e18e
/**
 * useSubscription Hook - React hook for subscription tier management
 * Provides subscription feature gating and usage limit checking
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useSubscription: function() {
        return useSubscription;
    },
    useUsageTracking: function() {
        return useUsageTracking;
    }
});
const _react = require("react");
const _UserContext = require("../context/UserContext");
const _subscriptionService = require("../utils/subscriptionService");
const _logger = require("../utils/logger");
function useSubscription() {
    const { org, avatars, loadingState } = (0, _UserContext.useUser)();
    // Memoize basic values to prevent unnecessary re-renders
    const subscriptionPlan = (0, _react.useMemo)(()=>org?.subscriptionPlan || null, [
        org?.subscriptionPlan
    ]);
    const tier = (0, _react.useMemo)(()=>subscriptionPlan?.tier || null, [
        subscriptionPlan?.tier
    ]);
    const isLoaded = (0, _react.useMemo)(()=>loadingState.isReady, [
        loadingState.isReady
    ]);
    // Removed debug logging to prevent excessive console output
    // Current usage calculations - memoized to prevent re-renders
    const currentUsage = (0, _react.useMemo)(()=>({
            avatarsCount: avatars?.length || 0,
            isLoadingUsage: loadingState.avatars
        }), [
        avatars?.length,
        loadingState.avatars
    ]);
    // Enhanced feature checking functions - memoized with stable dependencies
    const canAccessFeature = (0, _react.useCallback)((feature)=>{
        if (!isLoaded) {
            return {
                allowed: false,
                reason: 'Loading subscription information...'
            };
        }
        return _subscriptionService.SubscriptionService.canAccessFeature(subscriptionPlan, feature);
    }, [
        subscriptionPlan,
        isLoaded
    ]);
    const hasFeature = (0, _react.useCallback)((feature)=>{
        const result = canAccessFeature(feature);
        return result.allowed;
    }, [
        canAccessFeature
    ]);
    // Bulk feature checking for UI optimization
    const checkMultipleFeatures = (0, _react.useCallback)((features)=>{
        if (!isLoaded) {
            return features.reduce((acc, feature)=>{
                acc[feature] = {
                    allowed: false,
                    reason: 'Loading...'
                };
                return acc;
            }, {});
        }
        return _subscriptionService.SubscriptionService.checkMultipleFeatures(subscriptionPlan, features);
    }, [
        subscriptionPlan,
        isLoaded
    ]);
    // Enhanced usage checking with better error handling
    const canCreateAvatar = (0, _react.useCallback)(()=>{
        if (!isLoaded || currentUsage.isLoadingUsage) {
            return {
                allowed: false,
                reason: 'Loading avatar information...'
            };
        }
        const result = _subscriptionService.SubscriptionService.canCreateAvatar(subscriptionPlan, currentUsage.avatarsCount);
        // Only log when actually blocked to reduce spam
        if (!result.allowed) {
            _logger.logger.info('Avatar creation blocked by subscription limit:', {
                tier,
                currentCount: currentUsage.avatarsCount,
                limit: result.limit
            });
        }
        return result;
    }, [
        subscriptionPlan,
        currentUsage,
        isLoaded,
        tier
    ]);
    const canCreateCollection = (0, _react.useCallback)(()=>{
        if (!isLoaded) {
            return {
                allowed: false,
                reason: 'Loading subscription information...'
            };
        }
        // For now, we'll use a simplified check
        // In the future, we could fetch per-avatar collection counts
        const estimatedCollectionsCount = 5; // This would be fetched from database
        return _subscriptionService.SubscriptionService.canCreateCollection(subscriptionPlan, estimatedCollectionsCount);
    }, [
        subscriptionPlan,
        isLoaded
    ]);
    const checkUsageLimit = (0, _react.useCallback)((limitType, currentUsage)=>{
        if (!isLoaded) {
            return {
                allowed: false,
                reason: 'Loading subscription information...'
            };
        }
        return _subscriptionService.SubscriptionService.checkUsageLimit(subscriptionPlan, limitType, currentUsage);
    }, [
        subscriptionPlan,
        isLoaded
    ]);
    // Smart upgrade recommendations
    const getUpgradeRecommendation = (0, _react.useCallback)((lockedFeaturesAccessed = [])=>{
        if (!isLoaded) {
            return {
                recommended: false,
                targetTier: 'personal',
                reasons: [
                    'Loading...'
                ],
                benefits: [],
                urgency: 'low'
            };
        }
        const usageData = {
            avatarsCount: currentUsage.avatarsCount,
            collectionsCount: 5,
            sessionsThisMonth: 150,
            dataRetentionMonths: 12
        };
        return _subscriptionService.SubscriptionService.getSmartUpgradeRecommendation(subscriptionPlan, usageData, lockedFeaturesAccessed);
    }, [
        subscriptionPlan,
        isLoaded,
        currentUsage
    ]);
    // Get locked features for upgrade prompts
    const getLockedFeatures = (0, _react.useCallback)(()=>{
        if (!isLoaded) return [];
        return _subscriptionService.SubscriptionService.getLockedFeatures(subscriptionPlan);
    }, [
        subscriptionPlan,
        isLoaded
    ]);
    // Utility functions
    const getAvailableFeatures = (0, _react.useCallback)(()=>{
        if (!isLoaded) return [];
        return _subscriptionService.SubscriptionService.getAvailableFeatures(subscriptionPlan);
    }, [
        subscriptionPlan,
        isLoaded
    ]);
    const getUsageSummary = (0, _react.useCallback)((usageData)=>{
        if (!isLoaded) {
            return {};
        }
        return _subscriptionService.SubscriptionService.getUsageSummary(subscriptionPlan, usageData);
    }, [
        subscriptionPlan,
        isLoaded
    ]);
    const formatFeatureMessage = (0, _react.useCallback)((result)=>{
        return _subscriptionService.SubscriptionService.formatFeatureGateMessage(result);
    }, []);
    // Specific feature access shortcuts for common UI patterns - memoized to prevent re-renders
    const featureAccess = (0, _react.useMemo)(()=>({
            dashboard: canAccessFeature('analytics'),
            userManagement: canAccessFeature('user_management'),
            premiumThemes: canAccessFeature('premium_themes'),
            customBranding: canAccessFeature('custom_branding'),
            collections: canAccessFeature('collections'),
            scheduling: canAccessFeature('scheduling'),
            bulkOperations: canAccessFeature('bulk_operations'),
            apiAccess: canAccessFeature('api_access'),
            exportData: canAccessFeature('export_data'),
            advancedReporting: canAccessFeature('advanced_reporting')
        }), [
        canAccessFeature
    ]);
    // Return memoized hook result to prevent unnecessary re-renders
    return (0, _react.useMemo)(()=>({
            // Subscription plan info
            subscriptionPlan,
            tier,
            isLoaded,
            // Feature checking
            canAccessFeature,
            hasFeature,
            checkMultipleFeatures,
            // Usage checking
            canCreateAvatar,
            canCreateCollection,
            checkUsageLimit,
            // Smart recommendations
            getUpgradeRecommendation,
            getLockedFeatures,
            // Utility methods
            getAvailableFeatures,
            getUsageSummary,
            formatFeatureMessage,
            // Feature access shortcuts
            featureAccess,
            // Current usage
            currentUsage
        }), [
        subscriptionPlan,
        tier,
        isLoaded,
        canAccessFeature,
        hasFeature,
        checkMultipleFeatures,
        canCreateAvatar,
        canCreateCollection,
        checkUsageLimit,
        getUpgradeRecommendation,
        getLockedFeatures,
        getAvailableFeatures,
        getUsageSummary,
        formatFeatureMessage,
        featureAccess,
        currentUsage
    ]);
}
function useUsageTracking() {
    const { subscriptionPlan, currentUsage } = useSubscription();
    const trackUsage = (0, _react.useCallback)(async (action, metadata)=>{
        // Analytics tracking for subscription usage
        _logger.logger.info('Subscription usage tracked:', {
            action,
            tier: subscriptionPlan?.tier,
            currentAvatars: currentUsage.avatarsCount,
            metadata
        });
    // Here we could send to analytics service or external tracking
    }, [
        subscriptionPlan,
        currentUsage
    ]);
    return {
        trackUsage
    };
}

//# sourceMappingURL=data:application/json;base64,