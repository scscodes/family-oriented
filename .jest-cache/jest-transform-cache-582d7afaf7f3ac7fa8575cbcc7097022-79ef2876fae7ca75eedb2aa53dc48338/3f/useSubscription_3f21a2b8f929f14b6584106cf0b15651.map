{"version":3,"sources":["C:\\repos\\family-oriented\\src\\hooks\\useSubscription.tsx"],"sourcesContent":["/**\r\n * useSubscription Hook - React hook for subscription tier management\r\n * Provides subscription feature gating and usage limit checking\r\n */\r\n\r\nimport { useMemo, useCallback } from 'react';\r\nimport { useUser } from '@/context/UserContext';\r\nimport { \r\n  SubscriptionService, \r\n  type SubscriptionFeature, \r\n  type SubscriptionTier,\r\n  type UsageLimit, \r\n  type FeatureGateResult,\r\n  type UsageData\r\n} from '@/utils/subscriptionService';\r\n\r\nimport { logger } from '@/utils/logger';\r\n\r\n/**\r\n * Hook return type - Enhanced with comprehensive subscription management\r\n */\r\ntype UpgradeRecommendation = {\r\n  recommended: boolean;\r\n  targetTier: SubscriptionTier;\r\n  reasons: string[];\r\n  benefits: string[];\r\n  urgency: 'low' | 'medium' | 'high';\r\n};\r\n\r\ninterface UseSubscriptionReturn {\r\n  // Subscription plan info\r\n  subscriptionPlan: {\r\n    id: string;\r\n    tier: string;\r\n    avatar_limit: number;\r\n    features_included: Record<string, boolean>;\r\n  } | null;\r\n  tier: string | null;\r\n  isLoaded: boolean;\r\n  \r\n  // Feature checking\r\n  canAccessFeature: (feature: SubscriptionFeature) => FeatureGateResult;\r\n  hasFeature: (feature: SubscriptionFeature) => boolean;\r\n  checkMultipleFeatures: (features: SubscriptionFeature[]) => Record<SubscriptionFeature, FeatureGateResult>;\r\n  \r\n  // Usage checking\r\n  canCreateAvatar: () => FeatureGateResult;\r\n  canCreateCollection: (avatarId?: string) => FeatureGateResult;\r\n  checkUsageLimit: (limitType: UsageLimit, currentUsage: number) => FeatureGateResult;\r\n  \r\n  // Smart recommendations\r\n  getUpgradeRecommendation: (lockedFeaturesAccessed?: SubscriptionFeature[]) => UpgradeRecommendation;\r\n  getLockedFeatures: () => SubscriptionFeature[];\r\n  \r\n  // Utility methods\r\n  getAvailableFeatures: () => SubscriptionFeature[];\r\n  getUsageSummary: (usageData: UsageData) => Record<UsageLimit, FeatureGateResult>;\r\n  formatFeatureMessage: (result: FeatureGateResult) => string;\r\n  \r\n  // Feature access shortcuts for common UI patterns\r\n  featureAccess: {\r\n    dashboard: FeatureGateResult;\r\n    userManagement: FeatureGateResult;\r\n    premiumThemes: FeatureGateResult;\r\n    customBranding: FeatureGateResult;\r\n    collections: FeatureGateResult;\r\n    scheduling: FeatureGateResult;\r\n    bulkOperations: FeatureGateResult;\r\n    apiAccess: FeatureGateResult;\r\n    exportData: FeatureGateResult;\r\n    advancedReporting: FeatureGateResult;\r\n  };\r\n  \r\n  // Current usage data\r\n  currentUsage: {\r\n    avatarsCount: number;\r\n    isLoadingUsage: boolean;\r\n  };\r\n}\r\n\r\n/**\r\n * Enhanced subscription management hook with comprehensive feature gating\r\n */\r\nexport function useSubscription(): UseSubscriptionReturn {\r\n  const { org, avatars, loadingState } = useUser();\r\n  \r\n  // Memoize basic values to prevent unnecessary re-renders\r\n  const subscriptionPlan = useMemo(() => org?.subscriptionPlan || null, [org?.subscriptionPlan]);\r\n  const tier = useMemo(() => subscriptionPlan?.tier || null, [subscriptionPlan?.tier]);\r\n  const isLoaded = useMemo(() => loadingState.isReady, [loadingState.isReady]);\r\n\r\n  // Removed debug logging to prevent excessive console output\r\n  \r\n  // Current usage calculations - memoized to prevent re-renders\r\n  const currentUsage = useMemo(() => ({\r\n    avatarsCount: avatars?.length || 0,\r\n    isLoadingUsage: loadingState.avatars\r\n  }), [avatars?.length, loadingState.avatars]);\r\n\r\n  // Enhanced feature checking functions - memoized with stable dependencies\r\n  const canAccessFeature = useCallback((feature: SubscriptionFeature): FeatureGateResult => {\r\n    if (!isLoaded) {\r\n      return {\r\n        allowed: false,\r\n        reason: 'Loading subscription information...'\r\n      };\r\n    }\r\n    \r\n    return SubscriptionService.canAccessFeature(subscriptionPlan, feature);\r\n  }, [subscriptionPlan, isLoaded]);\r\n\r\n  const hasFeature = useCallback((feature: SubscriptionFeature): boolean => {\r\n    const result = canAccessFeature(feature);\r\n    return result.allowed;\r\n  }, [canAccessFeature]);\r\n\r\n  // Bulk feature checking for UI optimization\r\n  const checkMultipleFeatures = useCallback((features: SubscriptionFeature[]) => {\r\n    if (!isLoaded) {\r\n      return features.reduce((acc, feature) => {\r\n        acc[feature] = { allowed: false, reason: 'Loading...' };\r\n        return acc;\r\n      }, {} as Record<SubscriptionFeature, FeatureGateResult>);\r\n    }\r\n    \r\n    return SubscriptionService.checkMultipleFeatures(subscriptionPlan, features);\r\n  }, [subscriptionPlan, isLoaded]);\r\n\r\n  // Enhanced usage checking with better error handling\r\n  const canCreateAvatar = useCallback((): FeatureGateResult => {\r\n    if (!isLoaded || currentUsage.isLoadingUsage) {\r\n      return {\r\n        allowed: false,\r\n        reason: 'Loading avatar information...'\r\n      };\r\n    }\r\n    \r\n    const result = SubscriptionService.canCreateAvatar(subscriptionPlan, currentUsage.avatarsCount);\r\n    \r\n    // Only log when actually blocked to reduce spam\r\n    if (!result.allowed) {\r\n      logger.info('Avatar creation blocked by subscription limit:', {\r\n        tier,\r\n        currentCount: currentUsage.avatarsCount,\r\n        limit: result.limit\r\n      });\r\n    }\r\n    \r\n    return result;\r\n  }, [subscriptionPlan, currentUsage, isLoaded, tier]);\r\n\r\n  const canCreateCollection = useCallback((): FeatureGateResult => {\r\n    if (!isLoaded) {\r\n      return {\r\n        allowed: false,\r\n        reason: 'Loading subscription information...'\r\n      };\r\n    }\r\n    \r\n    // For now, we'll use a simplified check\r\n    // In the future, we could fetch per-avatar collection counts\r\n    const estimatedCollectionsCount = 5; // This would be fetched from database\r\n    \r\n    return SubscriptionService.canCreateCollection(subscriptionPlan, estimatedCollectionsCount);\r\n  }, [subscriptionPlan, isLoaded]);\r\n\r\n  const checkUsageLimit = useCallback((\r\n    limitType: UsageLimit, \r\n    currentUsage: number\r\n  ): FeatureGateResult => {\r\n    if (!isLoaded) {\r\n      return {\r\n        allowed: false,\r\n        reason: 'Loading subscription information...'\r\n      };\r\n    }\r\n    \r\n    return SubscriptionService.checkUsageLimit(subscriptionPlan, limitType, currentUsage);\r\n  }, [subscriptionPlan, isLoaded]);\r\n\r\n  // Smart upgrade recommendations\r\n  const getUpgradeRecommendation = useCallback((\r\n    lockedFeaturesAccessed: SubscriptionFeature[] = []\r\n  ) => {\r\n    if (!isLoaded) {\r\n      return {\r\n        recommended: false,\r\n        targetTier: 'personal' as SubscriptionTier,\r\n        reasons: ['Loading...'],\r\n        benefits: [],\r\n        urgency: 'low' as const\r\n      };\r\n    }\r\n    \r\n    const usageData = {\r\n      avatarsCount: currentUsage.avatarsCount,\r\n      collectionsCount: 5, // This would come from actual data\r\n      sessionsThisMonth: 150, // This would come from analytics\r\n      dataRetentionMonths: 12\r\n    };\r\n    \r\n    return SubscriptionService.getSmartUpgradeRecommendation(\r\n      subscriptionPlan,\r\n      usageData,\r\n      lockedFeaturesAccessed\r\n    );\r\n  }, [subscriptionPlan, isLoaded, currentUsage]);\r\n\r\n  // Get locked features for upgrade prompts\r\n  const getLockedFeatures = useCallback((): SubscriptionFeature[] => {\r\n    if (!isLoaded) return [];\r\n    return SubscriptionService.getLockedFeatures(subscriptionPlan);\r\n  }, [subscriptionPlan, isLoaded]);\r\n\r\n  // Utility functions\r\n  const getAvailableFeatures = useCallback((): SubscriptionFeature[] => {\r\n    if (!isLoaded) return [];\r\n    return SubscriptionService.getAvailableFeatures(subscriptionPlan);\r\n  }, [subscriptionPlan, isLoaded]);\r\n\r\n  const getUsageSummary = useCallback((usageData: UsageData) => {\r\n    if (!isLoaded) {\r\n      return {} as Record<UsageLimit, FeatureGateResult>;\r\n    }\r\n    return SubscriptionService.getUsageSummary(subscriptionPlan, usageData);\r\n  }, [subscriptionPlan, isLoaded]);\r\n\r\n  const formatFeatureMessage = useCallback((\r\n    result: FeatureGateResult\r\n  ): string => {\r\n    return SubscriptionService.formatFeatureGateMessage(result);\r\n  }, []);\r\n\r\n  // Specific feature access shortcuts for common UI patterns - memoized to prevent re-renders\r\n  const featureAccess = useMemo(() => ({\r\n    dashboard: canAccessFeature('analytics'),\r\n    userManagement: canAccessFeature('user_management'),\r\n    premiumThemes: canAccessFeature('premium_themes'),\r\n    customBranding: canAccessFeature('custom_branding'),\r\n    collections: canAccessFeature('collections'),\r\n    scheduling: canAccessFeature('scheduling'),\r\n    bulkOperations: canAccessFeature('bulk_operations'),\r\n    apiAccess: canAccessFeature('api_access'),\r\n    exportData: canAccessFeature('export_data'),\r\n    advancedReporting: canAccessFeature('advanced_reporting')\r\n  }), [canAccessFeature]);\r\n\r\n  // Return memoized hook result to prevent unnecessary re-renders\r\n  return useMemo(() => ({\r\n    // Subscription plan info\r\n    subscriptionPlan,\r\n    tier,\r\n    isLoaded,\r\n    \r\n    // Feature checking\r\n    canAccessFeature,\r\n    hasFeature,\r\n    checkMultipleFeatures,\r\n    \r\n    // Usage checking\r\n    canCreateAvatar,\r\n    canCreateCollection,\r\n    checkUsageLimit,\r\n    \r\n    // Smart recommendations\r\n    getUpgradeRecommendation,\r\n    getLockedFeatures,\r\n    \r\n    // Utility methods\r\n    getAvailableFeatures,\r\n    getUsageSummary,\r\n    formatFeatureMessage,\r\n    \r\n    // Feature access shortcuts\r\n    featureAccess,\r\n    \r\n    // Current usage\r\n    currentUsage\r\n  }), [\r\n    subscriptionPlan,\r\n    tier,\r\n    isLoaded,\r\n    canAccessFeature,\r\n    hasFeature,\r\n    checkMultipleFeatures,\r\n    canCreateAvatar,\r\n    canCreateCollection,\r\n    checkUsageLimit,\r\n    getUpgradeRecommendation,\r\n    getLockedFeatures,\r\n    getAvailableFeatures,\r\n    getUsageSummary,\r\n    formatFeatureMessage,\r\n    featureAccess,\r\n    currentUsage\r\n  ]);\r\n}\r\n\r\n/**\r\n * Hook for subscription-specific usage tracking\r\n */\r\nexport function useUsageTracking() {\r\n  const { subscriptionPlan, currentUsage } = useSubscription();\r\n  \r\n  const trackUsage = useCallback(async (\r\n    action: 'avatar_created' | 'collection_created' | 'session_started',\r\n    metadata?: Record<string, unknown>\r\n  ) => {\r\n    // Analytics tracking for subscription usage\r\n    logger.info('Subscription usage tracked:', {\r\n      action,\r\n      tier: subscriptionPlan?.tier,\r\n      currentAvatars: currentUsage.avatarsCount,\r\n      metadata\r\n    });\r\n    \r\n    // Here we could send to analytics service or external tracking\r\n  }, [subscriptionPlan, currentUsage]);\r\n  \r\n  return { trackUsage };\r\n} "],"names":["useSubscription","useUsageTracking","org","avatars","loadingState","useUser","subscriptionPlan","useMemo","tier","isLoaded","isReady","currentUsage","avatarsCount","length","isLoadingUsage","canAccessFeature","useCallback","feature","allowed","reason","SubscriptionService","hasFeature","result","checkMultipleFeatures","features","reduce","acc","canCreateAvatar","logger","info","currentCount","limit","canCreateCollection","estimatedCollectionsCount","checkUsageLimit","limitType","getUpgradeRecommendation","lockedFeaturesAccessed","recommended","targetTier","reasons","benefits","urgency","usageData","collectionsCount","sessionsThisMonth","dataRetentionMonths","getSmartUpgradeRecommendation","getLockedFeatures","getAvailableFeatures","getUsageSummary","formatFeatureMessage","formatFeatureGateMessage","featureAccess","dashboard","userManagement","premiumThemes","customBranding","collections","scheduling","bulkOperations","apiAccess","exportData","advancedReporting","trackUsage","action","metadata","currentAvatars"],"mappings":"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"}