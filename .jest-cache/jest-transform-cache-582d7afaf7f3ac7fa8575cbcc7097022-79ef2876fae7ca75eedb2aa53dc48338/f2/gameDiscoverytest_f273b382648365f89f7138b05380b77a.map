{"version":3,"sources":["C:\\repos\\family-oriented\\src\\utils\\__tests__\\gameDiscovery.test.ts"],"sourcesContent":["/**\r\n * Enhanced Game Discovery Validation Tests\r\n */\r\n\r\nimport { gameDiscovery, TAG_CATEGORIES } from '../gameData';\r\n\r\ndescribe('Enhanced Game Discovery Validation', () => {\r\n  test('should provide autocomplete suggestions for game titles', () => {\r\n    const suggestions = gameDiscovery.getAutocompleteSuggestions('num', 5);\r\n    \r\n    expect(Array.isArray(suggestions)).toBe(true);\r\n    expect(suggestions.length).toBeGreaterThan(0);\r\n    \r\n    // Should find \"Numbers\" game\r\n    const numbersSuggestion = suggestions.find(s => s.type === 'game' && s.value.toLowerCase().includes('num'));\r\n    expect(numbersSuggestion).toBeDefined();\r\n    expect(numbersSuggestion?.type).toBe('game');\r\n  });\r\n\r\n  test('should provide autocomplete suggestions for tags', () => {\r\n    const suggestions = gameDiscovery.getAutocompleteSuggestions('count', 5);\r\n    \r\n    expect(Array.isArray(suggestions)).toBe(true);\r\n    \r\n    // Should find counting-related tags\r\n    const tagSuggestions = suggestions.filter(s => s.type === 'tag');\r\n    expect(tagSuggestions.length).toBeGreaterThan(0);\r\n    \r\n    tagSuggestions.forEach(tag => {\r\n      expect(tag.label).toMatch(/^#/); // Tags should start with #\r\n      expect(typeof tag.count).toBe('number');\r\n    });\r\n  });\r\n\r\n  test('should provide autocomplete suggestions for learning objectives', () => {\r\n    const suggestions = gameDiscovery.getAutocompleteSuggestions('recognition', 8);\r\n    \r\n    expect(Array.isArray(suggestions)).toBe(true);\r\n    \r\n    // Should find learning objectives containing \"recognition\"\r\n    const objectiveSuggestions = suggestions.filter(s => s.type === 'objective');\r\n    expect(objectiveSuggestions.length).toBeGreaterThan(0);\r\n    \r\n    objectiveSuggestions.forEach(obj => {\r\n      expect(obj.gameTitle).toBeDefined();\r\n      expect(typeof obj.gameTitle).toBe('string');\r\n    });\r\n  });\r\n\r\n  test('should return empty suggestions for empty query', () => {\r\n    const suggestions = gameDiscovery.getAutocompleteSuggestions('', 5);\r\n    expect(suggestions).toEqual([]);\r\n  });\r\n\r\n  test('should limit suggestions to specified count', () => {\r\n    const suggestions = gameDiscovery.getAutocompleteSuggestions('a', 3);\r\n    expect(suggestions.length).toBeLessThanOrEqual(3);\r\n  });\r\n\r\n  test('should categorize tags correctly', () => {\r\n    const tagCategories = gameDiscovery.getTagsByCategory();\r\n    \r\n    expect(Array.isArray(tagCategories)).toBe(true);\r\n    expect(tagCategories.length).toBeGreaterThan(0);\r\n    \r\n    tagCategories.forEach(category => {\r\n      expect(category).toHaveProperty('id');\r\n      expect(category).toHaveProperty('name');\r\n      expect(category).toHaveProperty('tags');\r\n      expect(Array.isArray(category.tags)).toBe(true);\r\n      \r\n      category.tags.forEach(tag => {\r\n        expect(tag).toHaveProperty('name');\r\n        expect(tag).toHaveProperty('count');\r\n        expect(tag).toHaveProperty('label');\r\n        expect(typeof tag.count).toBe('number');\r\n        expect(tag.count).toBeGreaterThan(0);\r\n      });\r\n    });\r\n  });\r\n\r\n  test('should filter tags by current filters', () => {\r\n    const allTags = gameDiscovery.getTagsByCategory();\r\n    const filteredTags = gameDiscovery.getTagsByCategory({ \r\n      subjects: ['Mathematics'] \r\n    });\r\n    \r\n    expect(Array.isArray(allTags)).toBe(true);\r\n    expect(Array.isArray(filteredTags)).toBe(true);\r\n    \r\n    // Filtered results should be same or fewer categories\r\n    expect(filteredTags.length).toBeLessThanOrEqual(allTags.length);\r\n  });\r\n\r\n  test('should format category names correctly', () => {\r\n    const tagCategories = gameDiscovery.getTagsByCategory();\r\n    \r\n    const expectedNames = ['Skills', 'Interaction', 'Difficulty', 'Duration', 'Features', 'Curriculum'];\r\n    const actualNames = tagCategories.map(cat => cat.name);\r\n    \r\n    expectedNames.forEach(expectedName => {\r\n      if (actualNames.includes(expectedName)) {\r\n        expect(actualNames).toContain(expectedName);\r\n      }\r\n    });\r\n  });\r\n\r\n  test('should format tag labels correctly', () => {\r\n    const tagCategories = gameDiscovery.getTagsByCategory();\r\n    \r\n    tagCategories.forEach(category => {\r\n      category.tags.forEach(tag => {\r\n        // Tag labels should be properly formatted (e.g., \"drag-drop\" -> \"Drag Drop\")\r\n        expect(tag.label).toMatch(/^[A-Z]/); // Should start with capital letter\r\n        expect(tag.label).not.toMatch(/-/); // Should not contain hyphens\r\n      });\r\n    });\r\n  });\r\n\r\n  test('should have valid tag categories defined', () => {\r\n    expect(TAG_CATEGORIES).toBeDefined();\r\n    expect(typeof TAG_CATEGORIES).toBe('object');\r\n    \r\n    const expectedCategories = ['skill-type', 'interaction', 'difficulty', 'duration', 'feature', 'curriculum'];\r\n    expectedCategories.forEach(category => {\r\n      expect(TAG_CATEGORIES).toHaveProperty(category);\r\n      expect(Array.isArray(TAG_CATEGORIES[category as keyof typeof TAG_CATEGORIES])).toBe(true);\r\n    });\r\n  });\r\n\r\n  test('should perform enhanced search with facets', () => {\r\n    const results = gameDiscovery.searchWithFacets('math', {\r\n      subjects: ['Mathematics'],\r\n      facets: {\r\n        ageRanges: ['4-5'],\r\n        durations: [],\r\n        skillLevels: ['beginner'],\r\n        features: []\r\n      }\r\n    });\r\n    \r\n    expect(Array.isArray(results)).toBe(true);\r\n    \r\n    // All results should be Mathematics games\r\n    results.forEach(game => {\r\n      expect(game.subject).toBe('Mathematics');\r\n      expect(game.skillLevel).toBe('beginner');\r\n      expect(game.ageRange[0]).toBeLessThanOrEqual(5);\r\n      expect(game.ageRange[1]).toBeGreaterThanOrEqual(4);\r\n    });\r\n  });\r\n}); "],"names":["describe","test","suggestions","gameDiscovery","getAutocompleteSuggestions","expect","Array","isArray","toBe","length","toBeGreaterThan","numbersSuggestion","find","s","type","value","toLowerCase","includes","toBeDefined","tagSuggestions","filter","forEach","tag","label","toMatch","count","objectiveSuggestions","obj","gameTitle","toEqual","toBeLessThanOrEqual","tagCategories","getTagsByCategory","category","toHaveProperty","tags","allTags","filteredTags","subjects","expectedNames","actualNames","map","cat","name","expectedName","toContain","not","TAG_CATEGORIES","expectedCategories","results","searchWithFacets","facets","ageRanges","durations","skillLevels","features","game","subject","skillLevel","ageRange","toBeGreaterThanOrEqual"],"mappings":"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"}