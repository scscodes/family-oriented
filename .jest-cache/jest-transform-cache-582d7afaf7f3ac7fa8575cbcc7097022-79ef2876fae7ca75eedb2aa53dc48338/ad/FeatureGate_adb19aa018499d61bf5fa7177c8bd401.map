{"version":3,"sources":["C:\\repos\\family-oriented\\src\\shared\\components\\gates\\FeatureGate.tsx"],"sourcesContent":["/**\r\n * FeatureGate Component\r\n * Conditionally renders content based on subscription tier and feature access\r\n * Provides upgrade prompts for locked features\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { ReactNode, useMemo } from 'react';\r\nimport {\r\n  Box,\r\n  Alert,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Chip,\r\n  Stack\r\n} from '@mui/material';\r\nimport { \r\n  Lock,\r\n  CheckCircle \r\n} from '@mui/icons-material';\r\nimport { useSubscription } from '@/hooks/useSubscription';\r\nimport { type SubscriptionFeature } from '@/utils/subscriptionService';\r\nimport TierTransitionButton from '@/features/subscription/components/TierTransitionButton';\r\n\r\ninterface FeatureGateProps {\r\n  feature: SubscriptionFeature;\r\n  children: ReactNode;\r\n  fallback?: ReactNode;\r\n  showUpgradePrompt?: boolean;\r\n  mode?: 'hide' | 'disable' | 'overlay' | 'alert';\r\n  compact?: boolean;\r\n}\r\n\r\n/**\r\n * Feature gate component with multiple display modes\r\n */\r\nconst FeatureGate = React.memo(({\r\n  feature,\r\n  children,\r\n  fallback,\r\n  showUpgradePrompt = true,\r\n  mode = 'hide',\r\n  compact = false\r\n}: FeatureGateProps) => {\r\n  const { canAccessFeature, formatFeatureMessage, tier } = useSubscription();\r\n  \r\n  // Memoize access result to prevent unnecessary re-computation\r\n  const accessResult = useMemo(() => {\r\n    return canAccessFeature(feature);\r\n  }, [canAccessFeature, feature]);\r\n  \r\n  // Memoize formatted message\r\n  const formattedMessage = useMemo(() => {\r\n    return formatFeatureMessage(accessResult);\r\n  }, [formatFeatureMessage, accessResult]);\r\n  \r\n  // If access is granted, render children normally\r\n  if (accessResult.allowed) {\r\n    return <>{children}</>;\r\n  }\r\n\r\n  // Handle different display modes for denied access\r\n  switch (mode) {\r\n    case 'hide':\r\n      return fallback ? <>{fallback}</> : null;\r\n      \r\n    case 'disable':\r\n      return (\r\n        <Box sx={{ position: 'relative' }}>\r\n          <Box sx={{ \r\n            opacity: 0.5, \r\n            pointerEvents: 'none',\r\n            filter: 'grayscale(100%)'\r\n          }}>\r\n            {children}\r\n          </Box>\r\n          <Box sx={{ \r\n            position: 'absolute', \r\n            top: 0, \r\n            right: 0, \r\n            p: 1 \r\n          }}>\r\n            <Chip \r\n              icon={<Lock />} \r\n              label={`${accessResult.upgradeRequired?.toUpperCase()} Required`}\r\n              size=\"small\"\r\n              color=\"default\"\r\n            />\r\n          </Box>\r\n        </Box>\r\n      );\r\n      \r\n    case 'overlay':\r\n      return (\r\n        <Box sx={{ position: 'relative' }}>\r\n          <Box sx={{ \r\n            opacity: 0.3, \r\n            pointerEvents: 'none',\r\n            filter: 'blur(2px)'\r\n          }}>\r\n            {children}\r\n          </Box>\r\n          <Box sx={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            textAlign: 'center',\r\n            bgcolor: 'background.paper',\r\n            p: 2,\r\n            borderRadius: 2,\r\n            boxShadow: 3,\r\n            border: 1,\r\n            borderColor: 'divider'\r\n          }}>\r\n            <Stack spacing={2} alignItems=\"center\">\r\n              <Lock color=\"action\" fontSize=\"large\" />\r\n              <Typography variant=\"h6\" color=\"text.secondary\">\r\n                {feature.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())} Locked\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                {formattedMessage}\r\n              </Typography>\r\n              {showUpgradePrompt && accessResult.upgradeRequired && (\r\n                <TierTransitionButton \r\n                  targetTier={accessResult.upgradeRequired}\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n                />\r\n              )}\r\n            </Stack>\r\n          </Box>\r\n        </Box>\r\n      );\r\n      \r\n    case 'alert':\r\n    default:\r\n      if (compact) {\r\n        return (\r\n          <Alert \r\n            severity=\"info\" \r\n            icon={<Lock />}\r\n            action={\r\n              showUpgradePrompt && accessResult.upgradeRequired ? (\r\n                <TierTransitionButton \r\n                  targetTier={accessResult.upgradeRequired}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              ) : undefined\r\n            }\r\n          >\r\n            <Typography variant=\"body2\">\r\n              {formattedMessage}\r\n            </Typography>\r\n          </Alert>\r\n        );\r\n      }\r\n\r\n      return (\r\n        <Card sx={{ bgcolor: 'grey.50', border: 1, borderColor: 'grey.200' }}>\r\n          <CardContent>\r\n            <Stack spacing={2}>\r\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                <Lock color=\"action\" />\r\n                <Typography variant=\"h6\" color=\"text.secondary\">\r\n                  {feature.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())} Not Available\r\n                </Typography>\r\n                <Chip \r\n                  label={`Current: ${tier?.toUpperCase() || 'NONE'}`}\r\n                  size=\"small\"\r\n                  variant=\"outlined\"\r\n                />\r\n              </Box>\r\n              \r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                {formattedMessage}\r\n              </Typography>\r\n              \r\n              {showUpgradePrompt && accessResult.upgradeRequired && (\r\n                <Box>\r\n                                    <TierTransitionButton\r\n                    targetTier={accessResult.upgradeRequired}\r\n                    variant=\"contained\"\r\n                  />\r\n                </Box>\r\n              )}\r\n            </Stack>\r\n          </CardContent>\r\n        </Card>\r\n      );\r\n  }\r\n});\r\n\r\nFeatureGate.displayName = 'FeatureGate';\r\n\r\nexport default FeatureGate;\r\n\r\n/**\r\n * Simple feature checker hook for conditional rendering\r\n */\r\nexport function useFeatureGate(feature: SubscriptionFeature) {\r\n  const { canAccessFeature } = useSubscription();\r\n  return canAccessFeature(feature);\r\n}\r\n\r\n/**\r\n * Feature availability indicator component\r\n */\r\nexport function FeatureAvailabilityChip({ \r\n  feature, \r\n  showLabel = true \r\n}: { \r\n  feature: SubscriptionFeature;\r\n  showLabel?: boolean; \r\n}) {\r\n  const { canAccessFeature } = useSubscription();\r\n  const result = canAccessFeature(feature);\r\n  \r\n  const label = showLabel ? feature.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()) : '';\r\n  \r\n  if (result.allowed) {\r\n    return (\r\n      <Chip\r\n        icon={<CheckCircle />}\r\n        label={label || 'Available'}\r\n        color=\"success\"\r\n        size=\"small\"\r\n        variant=\"filled\"\r\n      />\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <Chip\r\n      icon={<Lock />}\r\n      label={label || `${result.upgradeRequired?.toUpperCase()} Required`}\r\n      color=\"default\"\r\n      size=\"small\"\r\n      variant=\"outlined\"\r\n    />\r\n  );\r\n} "],"names":["FeatureAvailabilityChip","useFeatureGate","FeatureGate","React","memo","feature","children","fallback","showUpgradePrompt","mode","compact","canAccessFeature","formatFeatureMessage","tier","useSubscription","accessResult","useMemo","formattedMessage","allowed","Box","sx","position","opacity","pointerEvents","filter","top","right","p","Chip","icon","Lock","label","upgradeRequired","toUpperCase","size","color","left","transform","textAlign","bgcolor","borderRadius","boxShadow","border","borderColor","Stack","spacing","alignItems","fontSize","Typography","variant","replace","l","TierTransitionButton","targetTier","Alert","severity","action","undefined","Card","CardContent","display","gap","displayName","showLabel","result","CheckCircle"],"mappings":"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"}