25e09f9e8a2d709844972661a21142f2
/**
 * FeatureGate Component
 * Conditionally renders content based on subscription tier and feature access
 * Provides upgrade prompts for locked features
 */ 'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    FeatureAvailabilityChip: function() {
        return FeatureAvailabilityChip;
    },
    default: function() {
        return _default;
    },
    useFeatureGate: function() {
        return useFeatureGate;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _material = require("@mui/material");
const _Lock = /*#__PURE__*/ _interop_require_default(require("@mui/icons-material/Lock"));
const _CheckCircle = /*#__PURE__*/ _interop_require_default(require("@mui/icons-material/CheckCircle"));
const _useSubscription = require("../../../hooks/useSubscription");
const _TierTransitionButton = /*#__PURE__*/ _interop_require_default(require("../../../features/subscription/components/TierTransitionButton"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
/**
 * Feature gate component with multiple display modes
 */ const FeatureGate = /*#__PURE__*/ _react.default.memo(({ feature, children, fallback, showUpgradePrompt = true, mode = 'hide', compact = false })=>{
    const { canAccessFeature, formatFeatureMessage, tier } = (0, _useSubscription.useSubscription)();
    // Memoize access result to prevent unnecessary re-computation
    const accessResult = (0, _react.useMemo)(()=>{
        return canAccessFeature(feature);
    }, [
        canAccessFeature,
        feature
    ]);
    // Memoize formatted message
    const formattedMessage = (0, _react.useMemo)(()=>{
        return formatFeatureMessage(accessResult);
    }, [
        formatFeatureMessage,
        accessResult
    ]);
    // If access is granted, render children normally
    if (accessResult.allowed) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
            children: children
        });
    }
    // Handle different display modes for denied access
    switch(mode){
        case 'hide':
            return fallback ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
                children: fallback
            }) : null;
        case 'disable':
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
                sx: {
                    position: 'relative'
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Box, {
                        sx: {
                            opacity: 0.5,
                            pointerEvents: 'none',
                            filter: 'grayscale(100%)'
                        },
                        children: children
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Box, {
                        sx: {
                            position: 'absolute',
                            top: 0,
                            right: 0,
                            p: 1
                        },
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Chip, {
                            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Lock.default, {}),
                            label: `${accessResult.upgradeRequired?.toUpperCase()} Required`,
                            size: "small",
                            color: "default"
                        })
                    })
                ]
            });
        case 'overlay':
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
                sx: {
                    position: 'relative'
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Box, {
                        sx: {
                            opacity: 0.3,
                            pointerEvents: 'none',
                            filter: 'blur(2px)'
                        },
                        children: children
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Box, {
                        sx: {
                            position: 'absolute',
                            top: '50%',
                            left: '50%',
                            transform: 'translate(-50%, -50%)',
                            textAlign: 'center',
                            bgcolor: 'background.paper',
                            p: 2,
                            borderRadius: 2,
                            boxShadow: 3,
                            border: 1,
                            borderColor: 'divider'
                        },
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Stack, {
                            spacing: 2,
                            alignItems: "center",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_Lock.default, {
                                    color: "action",
                                    fontSize: "large"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Typography, {
                                    variant: "h6",
                                    color: "text.secondary",
                                    children: [
                                        feature.replace(/_/g, ' ').replace(/\b\w/g, (l)=>l.toUpperCase()),
                                        " Locked"
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                                    variant: "body2",
                                    color: "text.secondary",
                                    children: formattedMessage
                                }),
                                showUpgradePrompt && accessResult.upgradeRequired && /*#__PURE__*/ (0, _jsxruntime.jsx)(_TierTransitionButton.default, {
                                    targetTier: accessResult.upgradeRequired,
                                    variant: "contained",
                                    size: "small"
                                })
                            ]
                        })
                    })
                ]
            });
        case 'alert':
        default:
            if (compact) {
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Alert, {
                    severity: "info",
                    icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Lock.default, {}),
                    action: showUpgradePrompt && accessResult.upgradeRequired ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_TierTransitionButton.default, {
                        targetTier: accessResult.upgradeRequired,
                        variant: "outlined",
                        size: "small"
                    }) : undefined,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                        variant: "body2",
                        children: formattedMessage
                    })
                });
            }
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Card, {
                sx: {
                    bgcolor: 'grey.50',
                    border: 1,
                    borderColor: 'grey.200'
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.CardContent, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Stack, {
                        spacing: 2,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
                                sx: {
                                    display: 'flex',
                                    alignItems: 'center',
                                    gap: 1
                                },
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_Lock.default, {
                                        color: "action"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Typography, {
                                        variant: "h6",
                                        color: "text.secondary",
                                        children: [
                                            feature.replace(/_/g, ' ').replace(/\b\w/g, (l)=>l.toUpperCase()),
                                            " Not Available"
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Chip, {
                                        label: `Current: ${tier?.toUpperCase() || 'NONE'}`,
                                        size: "small",
                                        variant: "outlined"
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                                variant: "body2",
                                color: "text.secondary",
                                children: formattedMessage
                            }),
                            showUpgradePrompt && accessResult.upgradeRequired && /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Box, {
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_TierTransitionButton.default, {
                                    targetTier: accessResult.upgradeRequired,
                                    variant: "contained"
                                })
                            })
                        ]
                    })
                })
            });
    }
});
FeatureGate.displayName = 'FeatureGate';
const _default = FeatureGate;
function useFeatureGate(feature) {
    const { canAccessFeature } = (0, _useSubscription.useSubscription)();
    return canAccessFeature(feature);
}
function FeatureAvailabilityChip({ feature, showLabel = true }) {
    const { canAccessFeature } = (0, _useSubscription.useSubscription)();
    const result = canAccessFeature(feature);
    const label = showLabel ? feature.replace(/_/g, ' ').replace(/\b\w/g, (l)=>l.toUpperCase()) : '';
    if (result.allowed) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Chip, {
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_CheckCircle.default, {}),
            label: label || 'Available',
            color: "success",
            size: "small",
            variant: "filled"
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Chip, {
        icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Lock.default, {}),
        label: label || `${result.upgradeRequired?.toUpperCase()} Required`,
        color: "default",
        size: "small",
        variant: "outlined"
    });
}

//# sourceMappingURL=data:application/json;base64,