{"version":3,"sources":["C:\\repos\\family-oriented\\src\\hooks\\useTierTransition.tsx"],"sourcesContent":["/**\r\n * useTierTransition Hook\r\n * Provides tier transition functionality for subscription plan changes\r\n * Handles analysis, validation, and execution of tier changes\r\n */\r\n\r\n'use client';\r\n\r\nimport { useState, useCallback, useMemo } from 'react';\r\nimport { useUser } from '@/context/UserContext';\r\nimport { useSubscription } from '@/hooks/useSubscription';\r\nimport { \r\n  SubscriptionService, \r\n  type SubscriptionTier,\r\n  type UsageData \r\n} from '@/utils/subscriptionService';\r\nimport { createClient } from '@/lib/supabase/client';\r\nimport { logger } from '@/utils/logger';\r\n\r\nexport interface TierTransitionAnalysis {\r\n  fromTier: SubscriptionTier;\r\n  toTier: SubscriptionTier;\r\n  isUpgrade: boolean;\r\n  isDowngrade: boolean;\r\n  featureChanges: {\r\n    gained: string[];\r\n    lost: string[];\r\n  };\r\n  usageImpact: {\r\n    overLimitItems: Array<{\r\n      type: string;\r\n      current: number;\r\n      newLimit: number;\r\n      impact: string;\r\n    }>;\r\n  };\r\n  costImpact: {\r\n    currentCost: number;\r\n    newCost: number;\r\n    monthlyDifference: number;\r\n    prorationAmount: number;\r\n    prorationDescription: string;\r\n  };\r\n  warnings: string[];\r\n  canTransition: boolean;\r\n}\r\n\r\nexport interface UseTierTransitionReturn {\r\n  // Current state\r\n  currentTier: SubscriptionTier | null;\r\n  availableUpgrades: SubscriptionTier[];\r\n  availableDowngrades: SubscriptionTier[];\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  \r\n  // Analysis\r\n  analyzeTransition: (targetTier: SubscriptionTier) => Promise<TierTransitionAnalysis>;\r\n  \r\n  // Execution\r\n  executeTransition: (targetTier: SubscriptionTier) => Promise<{\r\n    success: boolean;\r\n    message: string;\r\n  }>;\r\n  \r\n  // Utilities\r\n  getTierDisplayName: (tier: SubscriptionTier) => string;\r\n  getTierPrice: (tier: SubscriptionTier) => number;\r\n  validateTransition: (targetTier: SubscriptionTier) => { valid: boolean; reasons: string[] };\r\n  \r\n  // State management\r\n  clearError: () => void;\r\n}\r\n\r\n/**\r\n * Main tier transition hook\r\n */\r\nexport function useTierTransition(): UseTierTransitionReturn {\r\n  const { org } = useUser();\r\n  const { subscriptionPlan, tier, currentUsage } = useSubscription();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  const supabase = createClient();\r\n\r\n  // Current tier and available transitions\r\n  const currentTier = tier as SubscriptionTier | null;\r\n  const { upgrades: availableUpgrades, downgrades: availableDowngrades } = useMemo(() => {\r\n    if (!currentTier) return { upgrades: [], downgrades: [] };\r\n    return SubscriptionService.getAvailableTransitions(currentTier);\r\n  }, [currentTier]);\r\n\r\n  // Get current usage data\r\n  const getCurrentUsageData = useCallback(async (): Promise<UsageData> => {\r\n    if (!org) {\r\n      return {\r\n        avatarsCount: 0,\r\n        collectionsCount: 0,\r\n        sessionsThisMonth: 0,\r\n        dataRetentionMonths: 12\r\n      };\r\n    }\r\n\r\n    try {\r\n      // Get avatar count\r\n      const { data: avatars } = await supabase\r\n        .from('avatars')\r\n        .select('id')\r\n        .eq('org_id', org.id);\r\n\r\n      // Get collections count (simplified - would normally be per-avatar)\r\n      const { data: collections } = await supabase\r\n        .from('game_collections')\r\n        .select('id')\r\n        .in('avatar_id', (avatars || []).map((a: { id: string }) => a.id));\r\n\r\n      // Get sessions this month\r\n      const startOfMonth = new Date();\r\n      startOfMonth.setDate(1);\r\n      startOfMonth.setHours(0, 0, 0, 0);\r\n\r\n      const { data: sessions } = await supabase\r\n        .from('game_sessions')\r\n        .select('id')\r\n        .eq('org_id', org.id)\r\n        .gte('created_at', startOfMonth.toISOString());\r\n\r\n      return {\r\n        avatarsCount: avatars?.length || 0,\r\n        collectionsCount: collections?.length || 0,\r\n        sessionsThisMonth: sessions?.length || 0,\r\n        dataRetentionMonths: 12 // Default\r\n      };\r\n    } catch (err) {\r\n      logger.error('Failed to get usage data:', err);\r\n      return {\r\n        avatarsCount: currentUsage.avatarsCount,\r\n        collectionsCount: 0,\r\n        sessionsThisMonth: 0,\r\n        dataRetentionMonths: 12\r\n      };\r\n    }\r\n  }, [org, supabase, currentUsage.avatarsCount]);\r\n\r\n  // Utility functions - moved outside useCallback to avoid dependency issues\r\n  const getTierDisplayName = (tier: SubscriptionTier): string => {\r\n    const tierNames = {\r\n      personal: 'Personal Plan',\r\n      professional: 'Professional Plan',\r\n      enterprise: 'Enterprise Plan'\r\n    };\r\n    return tierNames[tier];\r\n  };\r\n\r\n  const getTierPrice = (tier: SubscriptionTier): number => {\r\n    const prices = {\r\n      personal: 9.99,\r\n      professional: 199.99,\r\n      enterprise: 1499.99\r\n    };\r\n    return prices[tier];\r\n  };\r\n\r\n  // Analyze transition impact\r\n  const analyzeTransition = useCallback(async (targetTier: SubscriptionTier): Promise<TierTransitionAnalysis> => {\r\n    if (!currentTier || !subscriptionPlan) {\r\n      throw new Error('No current subscription to analyze');\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const usageData = await getCurrentUsageData();\r\n      \r\n      // Get basic analysis\r\n      const analysis = SubscriptionService.analyzeTierTransition(currentTier, targetTier, usageData);\r\n      \r\n      // Get cost information\r\n      const currentCost = getTierPrice(subscriptionPlan.tier as SubscriptionTier);\r\n      const newCost = getTierPrice(targetTier);\r\n      const monthlyDifference = newCost - currentCost;\r\n      \r\n      const proration = SubscriptionService.calculateProration(currentCost, newCost);\r\n\r\n      return {\r\n        fromTier: currentTier,\r\n        toTier: targetTier,\r\n        isUpgrade: analysis.isUpgrade,\r\n        isDowngrade: analysis.isDowngrade,\r\n        featureChanges: {\r\n          gained: analysis.featureChanges.gained,\r\n          lost: analysis.featureChanges.lost\r\n        },\r\n        usageImpact: {\r\n          overLimitItems: analysis.usageImpact.overLimitItems\r\n        },\r\n        costImpact: {\r\n          currentCost,\r\n          newCost,\r\n          monthlyDifference,\r\n          prorationAmount: proration.prorationAmount,\r\n          prorationDescription: proration.description\r\n        },\r\n        warnings: analysis.warnings,\r\n        canTransition: analysis.canTransition\r\n      };\r\n\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to analyze transition';\r\n      setError(message);\r\n      throw err;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [currentTier, subscriptionPlan, getCurrentUsageData]);\r\n\r\n  // Execute tier transition\r\n  const executeTransition = useCallback(async (targetTier: SubscriptionTier): Promise<{\r\n    success: boolean;\r\n    message: string;\r\n  }> => {\r\n    if (!org || !currentTier) {\r\n      throw new Error('No organization or current tier found');\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Validate transition first\r\n      const usageData = await getCurrentUsageData();\r\n      const validation = SubscriptionService.validateTierTransition(currentTier, targetTier, usageData);\r\n      \r\n      if (!validation.valid) {\r\n        throw new Error(`Transition not allowed: ${validation.reasons.join(', ')}`);\r\n      }\r\n\r\n      // Get new subscription plan\r\n      const { data: newPlan, error: planError } = await supabase\r\n        .from('subscription_plans')\r\n        .select('*')\r\n        .eq('tier', targetTier)\r\n        .eq('active', true)\r\n        .order('base_price', { ascending: true })\r\n        .limit(1)\r\n        .single();\r\n\r\n      if (planError) throw planError;\r\n\r\n      // Update organization subscription\r\n      const { error: updateError } = await supabase\r\n        .from('organizations')\r\n        .update({\r\n          subscription_plan_id: newPlan.id,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', org.id);\r\n\r\n      if (updateError) throw updateError;\r\n\r\n      // Log the transition\r\n      logger.info('Tier transition completed:', {\r\n        orgId: org.id,\r\n        fromTier: currentTier,\r\n        toTier: targetTier,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      const tierDisplayName = getTierDisplayName(targetTier);\r\n      const action = SubscriptionService.analyzeTierTransition(currentTier, targetTier, usageData).isUpgrade \r\n        ? 'upgraded' \r\n        : 'changed';\r\n\r\n      return {\r\n        success: true,\r\n        message: `Successfully ${action} to ${tierDisplayName}!`\r\n      };\r\n\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to execute transition';\r\n      setError(message);\r\n      logger.error('Tier transition failed:', err);\r\n      \r\n      return {\r\n        success: false,\r\n        message\r\n      };\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [org, currentTier, supabase, getCurrentUsageData]);\r\n\r\n  const validateTransition = useCallback((targetTier: SubscriptionTier): { valid: boolean; reasons: string[] } => {\r\n    if (!currentTier) {\r\n      return { valid: false, reasons: ['No current tier found'] };\r\n    }\r\n\r\n    // Use current usage data synchronously (fallback values)\r\n    const usageData: UsageData = {\r\n      avatarsCount: currentUsage.avatarsCount,\r\n      collectionsCount: 0, // Would need to fetch this\r\n      sessionsThisMonth: 0, // Would need to fetch this\r\n      dataRetentionMonths: 12\r\n    };\r\n\r\n    return SubscriptionService.validateTierTransition(currentTier, targetTier, usageData);\r\n  }, [currentTier, currentUsage.avatarsCount]);\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n\r\n  return {\r\n    // Current state\r\n    currentTier,\r\n    availableUpgrades,\r\n    availableDowngrades,\r\n    isLoading,\r\n    error,\r\n    \r\n    // Analysis\r\n    analyzeTransition,\r\n    \r\n    // Execution\r\n    executeTransition,\r\n    \r\n    // Utilities\r\n    getTierDisplayName,\r\n    getTierPrice,\r\n    validateTransition,\r\n    \r\n    // State management\r\n    clearError\r\n  };\r\n} "],"names":["useTierTransition","org","useUser","subscriptionPlan","tier","currentUsage","useSubscription","isLoading","setIsLoading","useState","error","setError","supabase","createClient","currentTier","upgrades","availableUpgrades","downgrades","availableDowngrades","useMemo","SubscriptionService","getAvailableTransitions","getCurrentUsageData","useCallback","avatarsCount","collectionsCount","sessionsThisMonth","dataRetentionMonths","data","avatars","from","select","eq","id","collections","in","map","a","startOfMonth","Date","setDate","setHours","sessions","gte","toISOString","length","err","logger","getTierDisplayName","tierNames","personal","professional","enterprise","getTierPrice","prices","analyzeTransition","targetTier","Error","usageData","analysis","analyzeTierTransition","currentCost","newCost","monthlyDifference","proration","calculateProration","fromTier","toTier","isUpgrade","isDowngrade","featureChanges","gained","lost","usageImpact","overLimitItems","costImpact","prorationAmount","prorationDescription","description","warnings","canTransition","message","executeTransition","validation","validateTierTransition","valid","reasons","join","newPlan","planError","order","ascending","limit","single","updateError","update","subscription_plan_id","updated_at","info","orgId","timestamp","tierDisplayName","action","success","validateTransition","clearError"],"mappings":"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"}