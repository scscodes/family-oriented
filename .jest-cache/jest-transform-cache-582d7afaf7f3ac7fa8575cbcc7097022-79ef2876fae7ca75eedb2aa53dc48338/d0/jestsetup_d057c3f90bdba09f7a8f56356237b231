b9c056a6654bd09ea599190e8802b348
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "TEST_TIMEOUTS", {
    enumerable: true,
    get: function() {
        return TEST_TIMEOUTS;
    }
});
require("@testing-library/jest-dom");
const _util = require("util");
// Polyfill TextEncoder/TextDecoder for jose/Supabase in Jest
if (typeof global.TextEncoder === 'undefined') {
    global.TextEncoder = _util.TextEncoder;
}
if (typeof global.TextDecoder === 'undefined') {
    global.TextDecoder = _util.TextDecoder;
}
// Set dummy Supabase env vars for tests
process.env.NEXT_PUBLIC_SUPABASE_URL = 'http://localhost:54321';
process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'test-key';
const localStorageMock = {
    getItem: jest.fn((key)=>{
        const item = localStorageMock._storage[key];
        return item || null;
    }),
    setItem: jest.fn((key, value)=>{
        localStorageMock._storage[key] = value;
    }),
    removeItem: jest.fn((key)=>{
        delete localStorageMock._storage[key];
    }),
    clear: jest.fn(()=>{
        localStorageMock._storage = {};
    }),
    _storage: {}
};
Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
});
// Enhanced window.matchMedia mock
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: jest.fn().mockImplementation((query)=>({
            matches: false,
            media: query,
            onchange: null,
            addListener: jest.fn(),
            removeListener: jest.fn(),
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            dispatchEvent: jest.fn()
        }))
});
// Mock ResizeObserver (needed for Chart.js)
global.ResizeObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
// Mock IntersectionObserver
global.IntersectionObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
// Mock fetch for API calls
global.fetch = jest.fn(()=>Promise.resolve({
        ok: true,
        status: 200,
        json: ()=>Promise.resolve({}),
        text: ()=>Promise.resolve('')
    }));
// Enhanced console error handling for tests
const originalError = console.error;
beforeAll(()=>{
    console.error = (...args)=>{
        // Suppress known React testing warnings
        if (typeof args[0] === 'string' && (args[0].includes('Warning: ReactDOM.render is deprecated') || args[0].includes('Warning: An invalid form control') || args[0].includes('Warning: Cannot update a component'))) {
            return;
        }
        originalError.apply(console, args);
    };
});
afterAll(()=>{
    console.error = originalError;
});
const TEST_TIMEOUTS = {
    FAST: 2000,
    MEDIUM: 5000,
    SLOW: 10000,
    INTEGRATION: 15000 // For integration tests
};
// Global test utilities
global.testUtils = {
    waitForStableState: async (callback, timeout = TEST_TIMEOUTS.MEDIUM)=>{
        const startTime = Date.now();
        while(!callback() && Date.now() - startTime < timeout){
            await new Promise((resolve)=>setTimeout(resolve, 100));
        }
        if (!callback()) {
            throw new Error(`Condition not met within ${timeout}ms`);
        }
    },
    createMockPromise: (value, delay = 0)=>{
        return new Promise((resolve)=>setTimeout(()=>resolve(value), delay));
    },
    createMockRejection: (error, delay = 0)=>{
        return new Promise((_, reject)=>setTimeout(()=>reject(error), delay));
    }
};
// Enhanced global error handling
process.on('unhandledRejection', (reason, promise)=>{
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});
// Cleanup after each test - simplified to avoid timer conflicts
afterEach(()=>{
    // Clear all mocks
    jest.clearAllMocks();
    // Reset localStorage
    localStorageMock.clear();
// Note: Removed all timer-related cleanup to avoid conflicts with Jest's fake timers
// Individual tests should handle their own timer cleanup if needed
});

//# sourceMappingURL=data:application/json;base64,