7de1444c8cf8f495bf46ecf172ddfa75
/**
 * Tier Transition Button Component
 * Simple button that triggers tier transitions with validation
 */ 'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return TierTransitionButton;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _material = require("@mui/material");
const _Upgrade = /*#__PURE__*/ _interop_require_default(require("@mui/icons-material/Upgrade"));
const _ArrowDownward = /*#__PURE__*/ _interop_require_default(require("@mui/icons-material/ArrowDownward"));
const _useTierTransition = require("../../../hooks/useTierTransition");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function TierTransitionButton({ targetTier, variant = 'contained', size = 'medium' }) {
    const { currentTier, analyzeTransition, executeTransition, getTierDisplayName, isLoading, error, clearError } = (0, _useTierTransition.useTierTransition)();
    const [dialogOpen, setDialogOpen] = (0, _react.useState)(false);
    const [analysis, setAnalysis] = (0, _react.useState)(null);
    // Don't show button if it's the current tier
    if (currentTier === targetTier) {
        return null;
    }
    const handleAnalyze = async ()=>{
        try {
            clearError();
            const result = await analyzeTransition(targetTier);
            setAnalysis(result);
            setDialogOpen(true);
        } catch (err) {
            console.error('Failed to analyze transition:', err);
        }
    };
    const handleConfirm = async ()=>{
        try {
            const result = await executeTransition(targetTier);
            if (result.success) {
                setDialogOpen(false);
                setAnalysis(null);
                alert(result.message); // In real app, use proper notification
            }
        } catch (err) {
            console.error('Failed to execute transition:', err);
        }
    };
    const handleClose = ()=>{
        setDialogOpen(false);
        setAnalysis(null);
        clearError();
    };
    const isUpgrade = analysis?.isUpgrade ?? false;
    const tierName = getTierDisplayName(targetTier);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Button, {
                variant: variant,
                size: size,
                onClick: handleAnalyze,
                disabled: isLoading,
                startIcon: isUpgrade ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_Upgrade.default, {}) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_ArrowDownward.default, {}),
                children: [
                    isUpgrade ? 'Upgrade to' : 'Switch to',
                    " ",
                    tierName
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Dialog, {
                open: dialogOpen,
                onClose: handleClose,
                maxWidth: "sm",
                fullWidth: true,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.DialogTitle, {
                        children: [
                            "Confirm ",
                            isUpgrade ? 'Upgrade' : 'Plan Change'
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.DialogContent, {
                        children: [
                            error && /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Alert, {
                                severity: "error",
                                sx: {
                                    mb: 2
                                },
                                children: error
                            }),
                            analysis && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Typography, {
                                        variant: "body1",
                                        gutterBottom: true,
                                        children: [
                                            isUpgrade ? 'Upgrade' : 'Change',
                                            " from",
                                            ' ',
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Chip, {
                                                label: getTierDisplayName(analysis.fromTier),
                                                size: "small"
                                            }),
                                            ' ',
                                            "to",
                                            ' ',
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Chip, {
                                                label: getTierDisplayName(analysis.toTier),
                                                size: "small",
                                                color: "primary"
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
                                        sx: {
                                            mb: 2
                                        },
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                                                variant: "subtitle2",
                                                gutterBottom: true,
                                                children: "Cost Impact:"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Typography, {
                                                variant: "body2",
                                                children: [
                                                    "Monthly cost: $",
                                                    analysis.costImpact.currentCost,
                                                    " â†’ $",
                                                    analysis.costImpact.newCost
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Typography, {
                                                variant: "body2",
                                                color: analysis.costImpact.monthlyDifference > 0 ? 'error.main' : 'success.main',
                                                children: [
                                                    "Difference: ",
                                                    analysis.costImpact.monthlyDifference > 0 ? '+' : '',
                                                    "$",
                                                    analysis.costImpact.monthlyDifference.toFixed(2),
                                                    "/month"
                                                ]
                                            }),
                                            analysis.costImpact.prorationAmount !== 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                                                variant: "body2",
                                                color: "text.secondary",
                                                children: analysis.costImpact.prorationDescription
                                            })
                                        ]
                                    }),
                                    analysis.featureChanges.gained.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
                                        sx: {
                                            mb: 2
                                        },
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                                                variant: "subtitle2",
                                                color: "success.main",
                                                gutterBottom: true,
                                                children: "Features you'll gain:"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                                                variant: "body2",
                                                children: analysis.featureChanges.gained.join(', ')
                                            })
                                        ]
                                    }),
                                    analysis.featureChanges.lost.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Box, {
                                        sx: {
                                            mb: 2
                                        },
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                                                variant: "subtitle2",
                                                color: "error.main",
                                                gutterBottom: true,
                                                children: "Features you'll lose:"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                                                variant: "body2",
                                                children: analysis.featureChanges.lost.join(', ')
                                            })
                                        ]
                                    }),
                                    analysis.warnings.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Alert, {
                                        severity: analysis.canTransition ? 'warning' : 'error',
                                        sx: {
                                            mb: 2
                                        },
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("ul", {
                                            style: {
                                                margin: 0,
                                                paddingLeft: 16
                                            },
                                            children: analysis.warnings.map((warning, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("li", {
                                                    children: warning
                                                }, index))
                                        })
                                    })
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.DialogActions, {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Button, {
                                onClick: handleClose,
                                disabled: isLoading,
                                children: "Cancel"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Button, {
                                onClick: handleConfirm,
                                variant: "contained",
                                disabled: isLoading || !analysis?.canTransition,
                                startIcon: isLoading ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.CircularProgress, {
                                    size: 16
                                }) : undefined,
                                children: isLoading ? 'Processing...' : `Confirm ${isUpgrade ? 'Upgrade' : 'Change'}`
                            })
                        ]
                    })
                ]
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,