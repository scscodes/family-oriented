{"version":3,"sources":["C:\\repos\\family-oriented\\src\\utils\\__tests__\\settingsUtils.test.ts"],"sourcesContent":["import { getSettings, saveSettings, DEFAULT_SETTINGS } from '../settingsUtils';\r\n\r\ndescribe('settingsUtils', () => {\r\n  beforeEach(() => {\r\n    // Clear the localStorage mock\r\n    (localStorage.clear as jest.Mock).mockClear();\r\n    (localStorage.getItem as jest.Mock).mockClear();\r\n    (localStorage.setItem as jest.Mock).mockClear();\r\n    \r\n    // Reset localStorage mock to default behavior\r\n    (localStorage.getItem as jest.Mock).mockImplementation(() => null);\r\n    (localStorage.setItem as jest.Mock).mockImplementation(() => {});\r\n    (localStorage.clear as jest.Mock).mockImplementation(() => {});\r\n  });\r\n\r\n  it('returns default settings if nothing in localStorage', () => {\r\n    const settings = getSettings('numbers');\r\n    expect(settings).toEqual(DEFAULT_SETTINGS.numbers);\r\n  });\r\n\r\n  it('returns saved settings from localStorage', () => {\r\n    const custom = { ...DEFAULT_SETTINGS.numbers, questionCount: 5 };\r\n    (localStorage.getItem as jest.Mock).mockReturnValue(JSON.stringify(custom));\r\n    const settings = getSettings('numbers');\r\n    expect(settings).toEqual(custom);\r\n  });\r\n\r\n  it('saves settings to localStorage', () => {\r\n    const custom = { ...DEFAULT_SETTINGS.numbers, questionCount: 7 };\r\n    saveSettings('numbers', custom);\r\n    expect(localStorage.setItem).toHaveBeenCalledWith('numbers_settings', JSON.stringify(custom));\r\n  });\r\n\r\n  it('returns default if localStorage is corrupted', () => {\r\n    const spy = jest.spyOn(console, 'error').mockImplementation(() => {});\r\n    (localStorage.getItem as jest.Mock).mockReturnValue('not-json');\r\n    const settings = getSettings('numbers');\r\n    expect(settings).toEqual(DEFAULT_SETTINGS.numbers);\r\n    spy.mockRestore();\r\n  });\r\n}); "],"names":["describe","beforeEach","localStorage","clear","mockClear","getItem","setItem","mockImplementation","it","settings","getSettings","expect","toEqual","DEFAULT_SETTINGS","numbers","custom","questionCount","mockReturnValue","JSON","stringify","saveSettings","toHaveBeenCalledWith","spy","jest","spyOn","console","mockRestore"],"mappings":";;;;+BAA4D;AAE5DA,SAAS,iBAAiB;IACxBC,WAAW;QACT,8BAA8B;QAC7BC,aAAaC,KAAK,CAAeC,SAAS;QAC1CF,aAAaG,OAAO,CAAeD,SAAS;QAC5CF,aAAaI,OAAO,CAAeF,SAAS;QAE7C,8CAA8C;QAC7CF,aAAaG,OAAO,CAAeE,kBAAkB,CAAC,IAAM;QAC5DL,aAAaI,OAAO,CAAeC,kBAAkB,CAAC,KAAO;QAC7DL,aAAaC,KAAK,CAAeI,kBAAkB,CAAC,KAAO;IAC9D;IAEAC,GAAG,uDAAuD;QACxD,MAAMC,WAAWC,IAAAA,0BAAW,EAAC;QAC7BC,OAAOF,UAAUG,OAAO,CAACC,+BAAgB,CAACC,OAAO;IACnD;IAEAN,GAAG,4CAA4C;QAC7C,MAAMO,SAAS;YAAE,GAAGF,+BAAgB,CAACC,OAAO;YAAEE,eAAe;QAAE;QAC9Dd,aAAaG,OAAO,CAAeY,eAAe,CAACC,KAAKC,SAAS,CAACJ;QACnE,MAAMN,WAAWC,IAAAA,0BAAW,EAAC;QAC7BC,OAAOF,UAAUG,OAAO,CAACG;IAC3B;IAEAP,GAAG,kCAAkC;QACnC,MAAMO,SAAS;YAAE,GAAGF,+BAAgB,CAACC,OAAO;YAAEE,eAAe;QAAE;QAC/DI,IAAAA,2BAAY,EAAC,WAAWL;QACxBJ,OAAOT,aAAaI,OAAO,EAAEe,oBAAoB,CAAC,oBAAoBH,KAAKC,SAAS,CAACJ;IACvF;IAEAP,GAAG,gDAAgD;QACjD,MAAMc,MAAMC,KAAKC,KAAK,CAACC,SAAS,SAASlB,kBAAkB,CAAC,KAAO;QAClEL,aAAaG,OAAO,CAAeY,eAAe,CAAC;QACpD,MAAMR,WAAWC,IAAAA,0BAAW,EAAC;QAC7BC,OAAOF,UAAUG,OAAO,CAACC,+BAAgB,CAACC,OAAO;QACjDQ,IAAII,WAAW;IACjB;AACF"}