{"version":3,"sources":["C:\\repos\\family-oriented\\src\\context\\UserContext.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { createContext, useContext, useState, useEffect, ReactNode, useCallback, useMemo, useRef } from 'react';\r\nimport { createClient } from '@/lib/supabase/client';\r\nimport { User } from '@supabase/supabase-js';\r\nimport type { Database } from '@/lib/supabase/database.types';\r\nimport { logger } from '@/utils/logger';\r\n\r\n\r\nimport { \r\n  getDemoConfig, \r\n  createDemoSubscriptionPlan, \r\n  createDemoAvatars, \r\n  createDemoRoles \r\n} from '@/utils/demoConfig';\r\nimport { useDemo } from './DemoContext';\r\n\r\n// Types\r\ntype Avatar = Database['public']['Tables']['avatars']['Row'];\r\ntype UserProfile = Database['public']['Tables']['users']['Row'];\r\n\r\n/**\r\n * Extended user context type for roles and subscription tier\r\n */\r\ninterface Role {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n}\r\n\r\ninterface SubscriptionPlan {\r\n  id: string;\r\n  name: string;\r\n  tier: string;\r\n  avatar_limit: number;\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  features_included: any;\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  [key: string]: any;\r\n}\r\n\r\ninterface OrgInfo {\r\n  id: string;\r\n  name: string;\r\n  subscriptionPlan: SubscriptionPlan | null;\r\n}\r\n\r\n/**\r\n * Consolidated loading state for better UX - using primitives for stability\r\n */\r\ninterface LoadingState {\r\n  user: boolean;\r\n  roles: boolean;\r\n  avatars: boolean;\r\n  // Helper to check if everything is ready for role-based rendering\r\n  isReady: boolean;\r\n}\r\n\r\n/**\r\n * Extended user context type for roles and subscription tier, with View As support\r\n */\r\ninterface ExtendedUserContextType extends UserContextType {\r\n  roles: Role[];\r\n  org: OrgInfo | null;\r\n  hasRole: (roleName: string) => boolean;\r\n  canAccess: (feature: string) => boolean;\r\n  getTierLimit: (feature: string) => number | undefined;\r\n  // View As state and methods\r\n  viewAsRole: string | null;\r\n  viewAsAvatar: Avatar | null;\r\n  isViewAs: boolean;\r\n  setViewAsRole: (role: string | null) => void;\r\n  setViewAsAvatar: (avatar: Avatar | null) => void;\r\n  resetViewAs: () => void;\r\n  // Enhanced loading state\r\n  loadingState: LoadingState;\r\n}\r\n\r\ninterface UserContextType {\r\n  user: User | null;\r\n  userProfile: UserProfile | null;\r\n  avatars: Avatar[];\r\n  currentAvatar: Avatar | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  \r\n  // Actions\r\n  setCurrentAvatar: (avatar: Avatar | null) => void;\r\n  createAvatar: (name: string) => Promise<Avatar | null>;\r\n  refreshAvatars: () => Promise<void>;\r\n  signOut: () => Promise<void>;\r\n}\r\n\r\nconst UserContext = createContext<ExtendedUserContextType | undefined>(undefined);\r\n\r\n/**\r\n * User provider that manages authentication state and avatar context\r\n * Integrates with Supabase for persistent user and avatar management\r\n * \r\n * Enhanced with:\r\n * - Stable loading states to prevent infinite re-renders\r\n * - Proper demo mode support\r\n * - Elimination of circular dependencies\r\n */\r\nexport function UserProvider({ children }: { children: ReactNode }) {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\r\n  const [avatars, setAvatars] = useState<Avatar[]>([]);\r\n  const [currentAvatar, setCurrentAvatar] = useState<Avatar | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [roles, setRoles] = useState<Role[]>([]);\r\n  const [org, setOrg] = useState<OrgInfo | null>(null);\r\n  \r\n  // View As state\r\n  const [viewAsRole, setViewAsRole] = useState<string | null>(null);\r\n  const [viewAsAvatar, setViewAsAvatar] = useState<Avatar | null>(null);\r\n\r\n  // Use individual boolean states instead of object to prevent re-render loops\r\n  const [userLoading, setUserLoading] = useState<boolean>(true);\r\n  const [rolesLoading, setRolesLoading] = useState<boolean>(true);\r\n  const [avatarsLoading, setAvatarsLoading] = useState<boolean>(true);\r\n  const [isInitialized, setIsInitialized] = useState<boolean>(false);\r\n\r\n  // Always call useDemo hook at top level to avoid conditional hook calls\r\n  let demoContext: ReturnType<typeof useDemo> | null = null;\r\n  try {\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    demoContext = useDemo();\r\n  } catch {\r\n    // Not in demo mode or provider not available - this is fine\r\n    demoContext = null;\r\n  }\r\n\r\n  // Create stable loading state object using individual primitives\r\n  const loadingState = useMemo<LoadingState>(() => ({\r\n    user: userLoading,\r\n    roles: rolesLoading,\r\n    avatars: avatarsLoading,\r\n    isReady: isInitialized && !userLoading && !rolesLoading\r\n  }), [userLoading, rolesLoading, avatarsLoading, isInitialized]);\r\n\r\n  const supabase = createClient();\r\n  \r\n  // Use ref to track initialization to prevent multiple calls\r\n  const initializationRef = useRef<boolean>(false);\r\n\r\n  // Load user profile from database\r\n  const loadUserProfile = useCallback(async (userId: string) => {\r\n    try {\r\n      logger.debug('🔍 Loading user profile for ID:', userId);\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .select('*')\r\n        .eq('id', userId)\r\n        .single();\r\n\r\n      logger.debug('📊 User profile query result:', { data, error });\r\n      \r\n      if (error) throw error;\r\n      setUserProfile(data);\r\n      logger.debug('✅ User profile loaded successfully');\r\n    } catch (err) {\r\n      logger.error('❌ Error loading user profile:', err);\r\n      throw err; // Re-throw to trigger fallback in loadDemoUser\r\n    }\r\n  }, [supabase]);\r\n\r\n  // Load avatars for the current user\r\n  const loadAvatars = useCallback(async (userId: string) => {\r\n    try {\r\n      console.log('UserContext: Loading avatars for user:', userId);\r\n      setAvatarsLoading(true);\r\n      const { data, error } = await supabase\r\n        .from('avatars')\r\n        .select('*')\r\n        .eq('user_id', userId)\r\n        .order('created_at', { ascending: true });\r\n\r\n      if (error) throw error;\r\n      \r\n      console.log('UserContext: Avatars loaded successfully:', data?.length || 0);\r\n      setAvatars(data || []);\r\n      \r\n      // Set first avatar as current if none selected and we have avatars\r\n      if (data && data.length > 0) {\r\n        setCurrentAvatar(prev => prev || data[0]);\r\n      }\r\n    } catch (err) {\r\n      logger.error('Error loading avatars:', err);\r\n      console.log('UserContext: Avatar loading failed:', err);\r\n      setError('Failed to load avatars');\r\n      setAvatars([]);\r\n    } finally {\r\n      console.log('UserContext: Avatar loading completed');\r\n      setAvatarsLoading(false);\r\n    }\r\n  }, [supabase]);\r\n\r\n  // Fetch roles and org info\r\n  const fetchRolesAndOrg = useCallback(async (userId: string) => {\r\n    try {\r\n      setRolesLoading(true);\r\n      \r\n      // Fetch user profile from public.users\r\n      const { data: userProfileData, error: userProfileError } = await supabase\r\n        .from('users')\r\n        .select('id, org_id')\r\n        .eq('id', userId)\r\n        .single();\r\n      if (userProfileError) throw userProfileError;\r\n      const orgId = userProfileData?.org_id;\r\n      \r\n      // Fetch org info and subscription plan\r\n      let orgInfo: OrgInfo | null = null;\r\n      if (orgId) {\r\n        const { data: orgData, error: orgError } = await supabase\r\n          .from('organizations')\r\n          .select('id, name, subscription_plan_id')\r\n          .eq('id', orgId)\r\n          .single();\r\n        if (orgError) throw orgError;\r\n        \r\n        let subscriptionPlan: SubscriptionPlan | null = null;\r\n        if (orgData?.subscription_plan_id) {\r\n          const { data: planData, error: planError } = await supabase\r\n            .from('subscription_plans')\r\n            .select('*')\r\n            .eq('id', orgData.subscription_plan_id)\r\n            .single();\r\n          if (planError) throw planError;\r\n          subscriptionPlan = planData;\r\n        }\r\n        \r\n        orgInfo = {\r\n          id: orgData.id,\r\n          name: orgData.name,\r\n          subscriptionPlan,\r\n        };\r\n      }\r\n      setOrg(orgInfo);\r\n      \r\n      // Fetch user roles from user_policies -> permission_policies\r\n      const { data: userPolicies, error: userPoliciesError } = await supabase\r\n        .from('user_policies')\r\n        .select('policy_id, permission_policies(id, policy_name, description)')\r\n        .eq('user_id', userId);\r\n      if (userPoliciesError) throw userPoliciesError;\r\n      \r\n      const userRoles: Role[] = (userPolicies || []).map((up: { permission_policies: { id: string; policy_name: string; description: string | null } }) => ({\r\n        id: up.permission_policies.id,\r\n        name: up.permission_policies.policy_name,\r\n        description: up.permission_policies.description || undefined,\r\n      }));\r\n      setRoles(userRoles);\r\n      \r\n    } catch (err) {\r\n      logger.error('Error fetching roles/org info:', err);\r\n      setOrg(null);\r\n      setRoles([]);\r\n      setError('Failed to load organization or roles.');\r\n    } finally {\r\n      setRolesLoading(false);\r\n    }\r\n  }, [supabase]);\r\n\r\n  // Enhanced demo user/org/roles fallback\r\n  const loadDemoUserContext = useCallback(async () => {\r\n    // Get demo configuration from DemoContext if available, otherwise fallback\r\n    const demoConfig = demoContext?.currentConfig || getDemoConfig();\r\n    console.log('Demo configuration loaded:', demoConfig);\r\n    \r\n    try {\r\n      setUserLoading(true);\r\n      setRolesLoading(true);\r\n      setAvatarsLoading(true);\r\n      \r\n      // Try to load demo user/org/roles from DB, fallback to hardcoded\r\n      try {\r\n        // Try to find a demo user in the users table\r\n        const { data: demoUsers } = await supabase\r\n          .from('users')\r\n          .select('*')\r\n          .ilike('email', '%demo%');\r\n        const demoUser = demoUsers && demoUsers.length > 0 ? demoUsers[0] : null;\r\n        \r\n        // Try to find a demo org\r\n        let demoOrg = null;\r\n        let demoPlan = null;\r\n        if (demoUser && demoUser.org_id) {\r\n          const { data: orgData } = await supabase\r\n            .from('organizations')\r\n            .select('*')\r\n            .eq('id', demoUser.org_id)\r\n            .single();\r\n          demoOrg = orgData;\r\n          if (orgData && orgData.subscription_plan_id) {\r\n            const { data: planData } = await supabase\r\n              .from('subscription_plans')\r\n              .select('*')\r\n              .eq('id', orgData.subscription_plan_id)\r\n              .single();\r\n            demoPlan = planData;\r\n          }\r\n        }\r\n        \r\n        // Try to find demo roles\r\n        let demoRoles: Role[] = [];\r\n        if (demoUser) {\r\n          const { data: userPolicies } = await supabase\r\n            .from('user_policies')\r\n            .select('policy_id, permission_policies(id, policy_name, description)')\r\n            .eq('user_id', demoUser.id);\r\n          demoRoles = (userPolicies || []).map((up: { permission_policies: { id: string; policy_name: string; description: string | null } }) => ({\r\n            id: up.permission_policies.id,\r\n            name: up.permission_policies.policy_name,\r\n            description: up.permission_policies.description || undefined,\r\n          }));\r\n        }\r\n        \r\n        // Set context state from database\r\n        if (demoUser) {\r\n          // Convert database user to Supabase User format\r\n          const supabaseUser = {\r\n            ...demoUser,\r\n            app_metadata: {},\r\n            user_metadata: {},\r\n            aud: 'authenticated'\r\n          } as User;\r\n          setUser(supabaseUser);\r\n          setUserProfile({\r\n            id: demoConfig.id,\r\n            email: demoConfig.email,\r\n            first_name: demoConfig.name?.split(' ')[0] || null,\r\n            last_name: demoConfig.name?.split(' ').slice(1).join(' ') || null,\r\n            org_id: `${demoConfig.id}-org`,\r\n            account_type: 'demo',\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString(),\r\n            last_login: new Date().toISOString(),\r\n            phone: null,\r\n            timezone: null,\r\n            locale: 'en'\r\n          } as UserProfile);\r\n          \r\n          // Always ensure demo org with subscription plan exists\r\n          const ensuredDemoOrg = demoOrg && demoPlan ? \r\n            { id: demoOrg.id, name: demoOrg.name, subscriptionPlan: demoPlan } :\r\n            (() => {\r\n              // Use configurable demo organization for database users too\r\n              const demoConfig = getDemoConfig();\r\n              const subscriptionPlan = createDemoSubscriptionPlan(demoConfig);\r\n              return {\r\n                id: `${demoUser.id}-org`, \r\n                name: demoConfig.orgName, \r\n                subscriptionPlan \r\n              };\r\n            })();\r\n          \r\n          console.log('Demo org being set for database user:', ensuredDemoOrg);\r\n          setOrg(ensuredDemoOrg);\r\n          setRoles(demoRoles.length > 0 ? demoRoles : [\r\n            { id: '1', name: 'account_owner', description: 'Full administrative access' },\r\n            { id: '2', name: 'org_admin', description: 'Organization management' }\r\n          ]);\r\n          // Load demo avatars\r\n          await loadAvatars(demoUser.id);\r\n          return;\r\n        }\r\n      } catch (dbError) {\r\n        logger.warn('Database demo user not found, using hardcoded fallback:', dbError);\r\n        console.log('Demo mode fallback triggered:', dbError);\r\n      }\r\n      \r\n      // Fallback to configurable demo context\r\n      console.log('UserContext: Creating demo user from configuration');\r\n      \r\n      // Create demo user\r\n      const demoUser = { \r\n        id: demoConfig.id, \r\n        email: demoConfig.email, \r\n        name: demoConfig.name,\r\n        app_metadata: {},\r\n        user_metadata: {},\r\n        aud: 'authenticated',\r\n        created_at: new Date().toISOString()\r\n      } as User;\r\n      setUser(demoUser);\r\n      setUserProfile({\r\n        id: demoConfig.id,\r\n        email: demoConfig.email,\r\n        first_name: demoConfig.name?.split(' ')[0] || null,\r\n        last_name: demoConfig.name?.split(' ').slice(1).join(' ') || null,\r\n        org_id: `${demoConfig.id}-org`,\r\n        account_type: 'demo',\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString(),\r\n        last_login: new Date().toISOString(),\r\n        phone: null,\r\n        timezone: null,\r\n        locale: 'en'\r\n      } as UserProfile);\r\n      \r\n      // Create demo organization with appropriate subscription plan\r\n      const subscriptionPlan = createDemoSubscriptionPlan(demoConfig);\r\n      const demoOrg = { \r\n        id: `${demoConfig.id}-org`, \r\n        name: demoConfig.orgName, \r\n        subscriptionPlan \r\n      };\r\n      \r\n      logger.info(`Setting demo org for ${demoConfig.tier} tier:`, demoOrg);\r\n      setOrg(demoOrg);\r\n      console.log('Demo org set:', demoOrg);\r\n      \r\n      // Create demo roles based on configuration\r\n      const demoRoles = createDemoRoles(demoConfig);\r\n      setRoles(demoRoles);\r\n      console.log('Demo roles set:', demoRoles);\r\n      \r\n      // Create demo avatars based on configuration\r\n      const demoAvatars = createDemoAvatars(demoConfig);\r\n      setAvatars(demoAvatars);\r\n      if (demoAvatars.length > 0) {\r\n        setCurrentAvatar(demoAvatars[0]);\r\n      }\r\n      console.log(`Demo avatars created: ${demoAvatars.length}`);\r\n      \r\n    } catch (err) {\r\n      logger.error('Error in demo user context:', err);\r\n      setError('Failed to initialize demo mode');\r\n    } finally {\r\n      // Complete all loading states for demo mode\r\n      console.log('Demo mode initialization complete, updating loading states');\r\n      setUserLoading(false);\r\n      setRolesLoading(false);\r\n      setAvatarsLoading(false);\r\n      setIsInitialized(true);\r\n    }\r\n  }, [supabase, loadAvatars, demoContext]);\r\n\r\n  // Main initialization effect - runs only once\r\n  useEffect(() => {\r\n    if (initializationRef.current) return;\r\n    initializationRef.current = true;\r\n\r\n    const loadUser = async () => {\r\n      try {\r\n        setUserLoading(true);\r\n        setError(null);\r\n        \r\n        const { data: { session } } = await supabase.auth.getSession();\r\n        if (session?.user) {\r\n          // Real user authentication\r\n          setUser(session.user);\r\n          setUserLoading(false);\r\n          await loadUserProfile(session.user.id);\r\n          \r\n          // Load roles and avatars in parallel\r\n          await Promise.all([\r\n            fetchRolesAndOrg(session.user.id),\r\n            loadAvatars(session.user.id)\r\n          ]);\r\n          setIsInitialized(true);\r\n        } else {\r\n          // No session - load demo mode for development\r\n          logger.info('No user session found, loading demo mode');\r\n          console.log('UserContext: Starting demo mode load');\r\n          await loadDemoUserContext();\r\n          console.log('UserContext: Demo mode load completed');\r\n        }\r\n      } catch (err) {\r\n        logger.error('Error loading user:', err);\r\n        setError('Failed to load user context.');\r\n        setUserLoading(false);\r\n        setRolesLoading(false);\r\n        setAvatarsLoading(false);\r\n        setIsInitialized(true);\r\n      }\r\n    };\r\n    \r\n    loadUser();\r\n\r\n    // Listen for auth changes\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {\r\n      if (event === 'SIGNED_IN' && session?.user) {\r\n        setUser(session.user);\r\n        setUserLoading(false);\r\n        await loadUserProfile(session.user.id);\r\n        \r\n        // Load roles and avatars in parallel\r\n        await Promise.all([\r\n          fetchRolesAndOrg(session.user.id),\r\n          loadAvatars(session.user.id)\r\n        ]);\r\n        setIsInitialized(true);\r\n      } else if (event === 'SIGNED_OUT') {\r\n        setUser(null);\r\n        setUserProfile(null);\r\n        setAvatars([]);\r\n        setCurrentAvatar(null);\r\n        setRoles([]);\r\n        setOrg(null);\r\n        // Load demo user for continued development\r\n        await loadDemoUserContext();\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    };\r\n  }, [supabase.auth, loadUserProfile, loadDemoUserContext, fetchRolesAndOrg, loadAvatars]);\r\n\r\n  // Listen for demo scenario changes from DemoContext\r\n  useEffect(() => {\r\n    if (!demoContext) return;\r\n\r\n    const handleDemoScenarioChange = async (event: Event) => {\r\n      const customEvent = event as CustomEvent;\r\n      const { config: newConfig } = customEvent.detail;\r\n      \r\n      try {\r\n        logger.info('Demo scenario changed, updating user context:', newConfig);\r\n        \r\n        // Update demo user context with new configuration\r\n        const demoUser = { \r\n          id: newConfig.id, \r\n          email: newConfig.email, \r\n          name: newConfig.name,\r\n          app_metadata: {},\r\n          user_metadata: {},\r\n          aud: 'authenticated',\r\n          created_at: new Date().toISOString()\r\n        } as User;\r\n        setUser(demoUser);\r\n        \r\n        setUserProfile({\r\n          id: newConfig.id,\r\n          email: newConfig.email,\r\n          first_name: newConfig.name?.split(' ')[0] || null,\r\n          last_name: newConfig.name?.split(' ').slice(1).join(' ') || null,\r\n          org_id: `${newConfig.id}-org`,\r\n          account_type: 'demo',\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString(),\r\n          last_login: new Date().toISOString(),\r\n          phone: null,\r\n          timezone: null,\r\n          locale: 'en'\r\n        } as UserProfile);\r\n        \r\n        // Create demo organization with new subscription plan\r\n        const subscriptionPlan = createDemoSubscriptionPlan(newConfig);\r\n        const demoOrg = { \r\n          id: `${newConfig.id}-org`, \r\n          name: newConfig.orgName, \r\n          subscriptionPlan \r\n        };\r\n        setOrg(demoOrg);\r\n        \r\n        // Create demo roles\r\n        const demoRoles = createDemoRoles(newConfig);\r\n        setRoles(demoRoles);\r\n        \r\n        // Create demo avatars\r\n        const demoAvatars = createDemoAvatars(newConfig);\r\n        setAvatars(demoAvatars);\r\n        if (demoAvatars.length > 0) {\r\n          setCurrentAvatar(demoAvatars[0]);\r\n        }\r\n        \r\n        logger.info('Demo user context updated successfully for new scenario');\r\n        \r\n      } catch (err) {\r\n        logger.error('Failed to update user context for new demo scenario:', err);\r\n        setError('Failed to switch demo scenario');\r\n      }\r\n    };\r\n\r\n    // Add event listener for demo scenario changes\r\n    if (typeof window !== 'undefined') {\r\n      window.addEventListener('demoScenarioChanged', handleDemoScenarioChange);\r\n      \r\n      return () => {\r\n        window.removeEventListener('demoScenarioChanged', handleDemoScenarioChange);\r\n      };\r\n    }\r\n  }, [demoContext]);\r\n\r\n  // Utility functions\r\n  const hasRole = useCallback((roleName: string) => {\r\n    // Only return true if we're ready and actually have the role\r\n    return loadingState.isReady && roles.some(r => r.name === roleName);\r\n  }, [roles, loadingState.isReady]);\r\n  \r\n  const canAccess = useCallback((feature: string) => {\r\n    // Only return true if we're ready and have access\r\n    if (!loadingState.isReady || !org?.subscriptionPlan) return false;\r\n    const features = org.subscriptionPlan.features_included || {};\r\n    return features[feature] === true;\r\n  }, [org, loadingState.isReady]);\r\n  \r\n  const getTierLimit = useCallback((feature: string) => {\r\n    return org?.subscriptionPlan?.[`${feature}_limit`];\r\n  }, [org]);\r\n\r\n  // Create a new avatar with subscription limit checking\r\n  const createAvatar = async (name: string): Promise<Avatar | null> => {\r\n    if (!user) {\r\n      setError('Must be logged in to create avatar');\r\n      return null;\r\n    }\r\n\r\n    // Check subscription limits before creating avatar\r\n    const currentAvatarsCount = avatars.length;\r\n    if (org?.subscriptionPlan) {\r\n      const avatarLimit = org.subscriptionPlan.avatar_limit || 5;\r\n      if (currentAvatarsCount >= avatarLimit) {\r\n        const tierName = org.subscriptionPlan.tier || 'current plan';\r\n        setError(`Avatar limit reached (${currentAvatarsCount}/${avatarLimit}). Upgrade your ${tierName} to create more avatars.`);\r\n        return null;\r\n      }\r\n    }\r\n\r\n    try {\r\n      setError(null);\r\n      const { data, error } = await supabase\r\n        .from('avatars')\r\n        .insert({\r\n          user_id: user.id,\r\n          org_id: org?.id || null,\r\n          name: name.trim(),\r\n          theme_settings: {},\r\n          game_preferences: {}\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      \r\n      // Refresh avatars list\r\n      await loadAvatars(user.id);\r\n      \r\n      logger.info('Avatar created successfully:', {\r\n        avatarId: data.id,\r\n        avatarName: data.name,\r\n        currentCount: currentAvatarsCount + 1,\r\n        tier: org?.subscriptionPlan?.tier\r\n      });\r\n      \r\n      return data;\r\n    } catch (err) {\r\n      logger.error('Error creating avatar:', err);\r\n      setError(err instanceof Error ? err.message : 'Failed to create avatar');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Refresh avatars from database\r\n  const refreshAvatars = async () => {\r\n    if (user) {\r\n      await loadAvatars(user.id);\r\n    }\r\n  };\r\n\r\n  // Sign out the current user\r\n  const signOut = async () => {\r\n    try {\r\n      const { error } = await supabase.auth.signOut();\r\n      if (error) throw error;\r\n    } catch (err) {\r\n      logger.error('Error signing out:', err);\r\n      setError('Failed to sign out');\r\n    }\r\n  };\r\n\r\n  // View As functionality\r\n  const isViewAs = viewAsRole !== null || viewAsAvatar !== null;\r\n  const resetViewAs = () => {\r\n    setViewAsRole(null);\r\n    setViewAsAvatar(null);\r\n  };\r\n\r\n  const contextValue: ExtendedUserContextType = {\r\n    user,\r\n    userProfile,\r\n    avatars,\r\n    currentAvatar,\r\n    loading: !loadingState.isReady, // Simplified loading state for backward compatibility\r\n    error,\r\n    setCurrentAvatar,\r\n    createAvatar,\r\n    refreshAvatars,\r\n    signOut,\r\n    roles,\r\n    org,\r\n    hasRole,\r\n    canAccess,\r\n    getTierLimit,\r\n    viewAsRole,\r\n    viewAsAvatar,\r\n    isViewAs,\r\n    setViewAsRole,\r\n    setViewAsAvatar,\r\n    resetViewAs,\r\n    loadingState, // New: detailed loading state\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={contextValue}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useUser(): ExtendedUserContextType {\r\n  const context = useContext(UserContext);\r\n  if (!context) {\r\n    throw new Error('useUser must be used within a UserProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function useAvatar() {\r\n  const { currentAvatar, setCurrentAvatar, avatars, createAvatar } = useUser();\r\n  \r\n  const switchAvatar = useCallback((avatarId: string) => {\r\n    const avatar = avatars.find(a => a.id === avatarId);\r\n    if (avatar) {\r\n      setCurrentAvatar(avatar);\r\n    }\r\n  }, [avatars, setCurrentAvatar]);\r\n\r\n  return {\r\n    currentAvatar,\r\n    setCurrentAvatar,\r\n    avatars,\r\n    switchAvatar,\r\n    createAvatar\r\n  };\r\n}\r\n\r\nexport function useRoleGuard() {\r\n  const { hasRole, canAccess, roles, loadingState } = useUser();\r\n  \r\n  // Backward compatible hasRole function \r\n  const guardedHasRole = useCallback((roleName: string) => {\r\n    return loadingState.isReady && hasRole(roleName);\r\n  }, [hasRole, loadingState.isReady]);\r\n  \r\n  const requireRole = useCallback((requiredRole: string) => {\r\n    if (!loadingState.isReady) return { allowed: false, reason: 'Loading...' };\r\n    const allowed = hasRole(requiredRole);\r\n    return {\r\n      allowed,\r\n      reason: allowed ? undefined : `Requires ${requiredRole} role`\r\n    };\r\n  }, [hasRole, loadingState.isReady]);\r\n  \r\n  const requireFeature = useCallback((feature: string) => {\r\n    if (!loadingState.isReady) return { allowed: false, reason: 'Loading...' };\r\n    const allowed = canAccess(feature);\r\n    return {\r\n      allowed,\r\n      reason: allowed ? undefined : `Feature ${feature} not available in current plan`\r\n    };\r\n  }, [canAccess, loadingState.isReady]);\r\n\r\n  return {\r\n    // Backward compatible interface\r\n    hasRole: guardedHasRole,\r\n    isReady: loadingState.isReady,\r\n    roles: loadingState.isReady ? roles : [],\r\n    \r\n    // New enhanced interface\r\n    requireRole,\r\n    requireFeature\r\n  };\r\n} "],"names":["UserProvider","useAvatar","useRoleGuard","useUser","UserContext","createContext","undefined","children","user","setUser","useState","userProfile","setUserProfile","avatars","setAvatars","currentAvatar","setCurrentAvatar","error","setError","roles","setRoles","org","setOrg","viewAsRole","setViewAsRole","viewAsAvatar","setViewAsAvatar","userLoading","setUserLoading","rolesLoading","setRolesLoading","avatarsLoading","setAvatarsLoading","isInitialized","setIsInitialized","demoContext","useDemo","loadingState","useMemo","isReady","supabase","createClient","initializationRef","useRef","loadUserProfile","useCallback","userId","logger","debug","data","from","select","eq","single","err","loadAvatars","console","log","order","ascending","length","prev","fetchRolesAndOrg","userProfileData","userProfileError","orgId","org_id","orgInfo","orgData","orgError","subscriptionPlan","subscription_plan_id","planData","planError","id","name","userPolicies","userPoliciesError","userRoles","map","up","permission_policies","policy_name","description","loadDemoUserContext","demoConfig","currentConfig","getDemoConfig","demoUsers","ilike","demoUser","demoOrg","demoPlan","demoRoles","supabaseUser","app_metadata","user_metadata","aud","email","first_name","split","last_name","slice","join","account_type","created_at","Date","toISOString","updated_at","last_login","phone","timezone","locale","ensuredDemoOrg","createDemoSubscriptionPlan","orgName","dbError","warn","info","tier","createDemoRoles","demoAvatars","createDemoAvatars","useEffect","current","loadUser","session","auth","getSession","Promise","all","subscription","onAuthStateChange","event","unsubscribe","handleDemoScenarioChange","customEvent","config","newConfig","detail","window","addEventListener","removeEventListener","hasRole","roleName","some","r","canAccess","feature","features","features_included","getTierLimit","createAvatar","currentAvatarsCount","avatarLimit","avatar_limit","tierName","insert","user_id","trim","theme_settings","game_preferences","avatarId","avatarName","currentCount","Error","message","refreshAvatars","signOut","isViewAs","resetViewAs","contextValue","loading","Provider","value","context","useContext","switchAvatar","avatar","find","a","guardedHasRole","requireRole","requiredRole","allowed","reason","requireFeature"],"mappings":"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"}