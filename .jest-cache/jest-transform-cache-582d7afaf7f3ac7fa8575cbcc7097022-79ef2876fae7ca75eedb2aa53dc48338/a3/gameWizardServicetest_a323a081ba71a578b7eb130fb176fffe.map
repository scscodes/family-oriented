{"version":3,"sources":["C:\\repos\\family-oriented\\src\\utils\\__tests__\\gameWizardService.test.ts"],"sourcesContent":["/// <reference types=\"jest\" />\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport '@testing-library/jest-dom';\r\nimport { gameWizard } from '../gameWizardService';\r\nimport { analyticsService } from '../analyticsService';\r\nimport { gameDiscovery } from '../gameData';\r\n\r\n// Mock dependencies\r\njest.mock('../analyticsService');\r\njest.mock('../gameData');\r\n\r\ndescribe('GameWizardService', () => {\r\n  const mockAvatarId = '00000000-0000-0000-0000-000000000001';\r\n  const mockGameId = '00000000-0000-0000-0000-000000000003';\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n\r\n    // Mock analytics service\r\n    (analyticsService.trackEvent as any).mockResolvedValue(undefined);\r\n\r\n    // Mock game discovery\r\n    (gameDiscovery.getRecommendedGames as any).mockReturnValue([\r\n      {\r\n        game: { id: mockGameId },\r\n        score: 0.8,\r\n        reason: 'Matches preferences'\r\n      }\r\n    ]);\r\n  });\r\n\r\n  describe('startSession', () => {\r\n    it('should create a new wizard session', async () => {\r\n      const session = await gameWizard.startSession(mockAvatarId);\r\n      \r\n      expect(session).toBeDefined();\r\n      expect(session.id).toMatch(/^wizard_\\d+_[a-z0-9]+$/); // Check format instead of exact value\r\n      expect(session.avatarId).toBe(mockAvatarId);\r\n      expect(session.createdAt).toBeInstanceOf(Date);\r\n      expect(analyticsService.trackEvent).toHaveBeenCalledWith(\r\n        session.id, // Use actual session ID\r\n        mockAvatarId,\r\n        'wizard_start',\r\n        expect.any(Object)\r\n      );\r\n    });\r\n\r\n    it('should handle analytics errors gracefully', async () => {\r\n      // Mock analytics error\r\n      (analyticsService.trackEvent as any).mockRejectedValueOnce(new Error('Analytics error'));\r\n\r\n      // Should still create session even if analytics fails\r\n      const session = await gameWizard.startSession(mockAvatarId);\r\n      expect(session).toBeDefined();\r\n      expect(session.avatarId).toBe(mockAvatarId);\r\n    });\r\n  });\r\n\r\n  describe('getRecommendations', () => {\r\n    const mockSelections = {\r\n      age: [4, 5],\r\n      interests: ['Mathematics'],\r\n      time: 'short',\r\n      goals: 'beginner'\r\n    };\r\n\r\n    it('should get recommendations based on selections', async () => {\r\n      // First create a session\r\n      const initialSession = await gameWizard.startSession(mockAvatarId);\r\n      \r\n      // Then get recommendations for that session\r\n      const session = await gameWizard.getRecommendations(initialSession.id, mockSelections);\r\n      \r\n      expect(session).toBeDefined();\r\n      expect(session.id).toBe(initialSession.id);\r\n      expect(session.selectedGames).toContain(mockGameId);\r\n      expect(analyticsService.trackEvent).toHaveBeenCalledWith(\r\n        initialSession.id,\r\n        initialSession.id.split('_')[1] || 'temp', // Uses timestamp from sessionId\r\n        'wizard_complete',\r\n        expect.objectContaining({\r\n          filters: expect.any(Object),\r\n          recommendations: expect.any(Array)\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should handle invalid session ID gracefully', async () => {\r\n      const invalidSessionId = 'invalid-session-id';\r\n      \r\n      // Should not throw but return a valid session with fallback data\r\n      const session = await gameWizard.getRecommendations(invalidSessionId, mockSelections);\r\n      expect(session).toBeDefined();\r\n      expect(session.id).toBe(invalidSessionId);\r\n      expect(session.avatarId).toBe('temp'); // Falls back to 'temp' for invalid format\r\n    });\r\n  });\r\n\r\n  describe('trackCompletion', () => {\r\n    it('should track game completion', async () => {\r\n      // First create a session\r\n      const session = await gameWizard.startSession(mockAvatarId);\r\n      \r\n      await gameWizard.trackCompletion(session.id, mockGameId, 85, 300);\r\n      \r\n      expect(analyticsService.trackEvent).toHaveBeenCalledWith(\r\n        session.id,\r\n        'temp', // trackCompletion method uses 'temp' as avatarId\r\n        'wizard_game_complete',\r\n        expect.objectContaining({\r\n          gameId: mockGameId,\r\n          score: 85,\r\n          timeSpent: 300\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should handle analytics errors gracefully', async () => {\r\n      // Mock analytics error\r\n      (analyticsService.trackEvent as any).mockRejectedValueOnce(new Error('Analytics error'));\r\n      \r\n      const session = await gameWizard.startSession(mockAvatarId);\r\n      \r\n      // Should not throw error even if analytics fails\r\n      await expect(gameWizard.trackCompletion(session.id, mockGameId, 85, 300))\r\n        .resolves.not.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('getSteps', () => {\r\n    it('should return all wizard steps', () => {\r\n      const steps = gameWizard.getSteps();\r\n      \r\n      expect(Array.isArray(steps)).toBe(true);\r\n      expect(steps.length).toBeGreaterThan(0);\r\n      expect(steps[0]).toHaveProperty('id');\r\n      expect(steps[0]).toHaveProperty('title');\r\n      expect(steps[0]).toHaveProperty('description');\r\n      expect(steps[0]).toHaveProperty('options');\r\n    });\r\n  });\r\n}); "],"names":["jest","mock","describe","mockAvatarId","mockGameId","beforeEach","clearAllMocks","analyticsService","trackEvent","mockResolvedValue","undefined","gameDiscovery","getRecommendedGames","mockReturnValue","game","id","score","reason","it","session","gameWizard","startSession","expect","toBeDefined","toMatch","avatarId","toBe","createdAt","toBeInstanceOf","Date","toHaveBeenCalledWith","any","Object","mockRejectedValueOnce","Error","mockSelections","age","interests","time","goals","initialSession","getRecommendations","selectedGames","toContain","split","objectContaining","filters","recommendations","Array","invalidSessionId","trackCompletion","gameId","timeSpent","resolves","not","toThrow","steps","getSteps","isArray","length","toBeGreaterThan","toHaveProperty"],"mappings":"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"}