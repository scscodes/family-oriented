{"version":3,"sources":["C:\\repos\\family-oriented\\src\\hooks\\useGameAnalytics.ts"],"sourcesContent":["/**\r\n * React hook for integrating analytics tracking with game sessions\r\n * Automatically tracks game start, progress, and completion\r\n */\r\n\r\nimport { useEffect, useRef, useState, useCallback } from 'react';\r\nimport { GameType } from '@/utils/gameUtils';\r\nimport { analyticsService, GameSessionData, LearningPathRecommendation, PerformanceMetrics } from '@/utils/analyticsService';\r\nimport { useSettings } from '@/context/SettingsContext';\r\nimport { logger } from '@/utils/logger';\r\n\r\ninterface UseGameAnalyticsOptions {\r\n  gameType: GameType;\r\n  avatarId: string;\r\n  orgId?: string;\r\n  autoTrack?: boolean; // Whether to automatically track events\r\n}\r\n\r\ninterface GameAnalyticsState {\r\n  sessionId: string | null;\r\n  isTracking: boolean;\r\n  sessionData: GameSessionData | null;\r\n  recommendations: LearningPathRecommendation[];\r\n  performanceMetrics: PerformanceMetrics | null;\r\n}\r\n\r\n/**\r\n * Hook for tracking game analytics and learning progression\r\n */\r\nexport function useGameAnalytics(options: UseGameAnalyticsOptions) {\r\n  const { gameType, avatarId, orgId, autoTrack = true } = options;\r\n  const { settings } = useSettings();\r\n  const [state, setState] = useState<GameAnalyticsState>({\r\n    sessionId: null,\r\n    isTracking: false,\r\n    sessionData: null,\r\n    recommendations: [],\r\n    performanceMetrics: null\r\n  });\r\n\r\n  const sessionStartTime = useRef<Date | null>(null);\r\n  const questionsAttempted = useRef(0);\r\n  const questionsCorrect = useRef(0);\r\n\r\n  /**\r\n   * Start a new game session\r\n   */\r\n  const startSession = useCallback(async () => {\r\n    if (state.isTracking) {\r\n      logger.warn('Session already in progress');\r\n      return state.sessionId;\r\n    }\r\n\r\n    try {\r\n      const sessionId = await analyticsService.startGameSession(avatarId, gameType, settings as unknown as Record<string, unknown>, orgId);\r\n      sessionStartTime.current = new Date();\r\n      questionsAttempted.current = 0;\r\n      questionsCorrect.current = 0;\r\n\r\n      setState(prev => ({\r\n        ...prev,\r\n        sessionId,\r\n        isTracking: true,\r\n        sessionData: null // Will be populated when session completes\r\n      }));\r\n\r\n      return sessionId;\r\n    } catch (error) {\r\n      logger.error('Failed to start analytics session:', error);\r\n      return null;\r\n    }\r\n  }, [avatarId, gameType, settings, orgId, state.isTracking, state.sessionId]);\r\n\r\n  /**\r\n   * Track a question attempt\r\n   */\r\n  const trackQuestionAttempt = useCallback(async (isCorrect: boolean, questionData?: Record<string, unknown>) => {\r\n    if (!state.sessionId || !state.isTracking) {\r\n      logger.warn('No active session for question tracking');\r\n      return;\r\n    }\r\n\r\n    questionsAttempted.current++;\r\n    if (isCorrect) {\r\n      questionsCorrect.current++;\r\n    }\r\n\r\n    try {\r\n      await analyticsService.trackEvent(\r\n        state.sessionId,\r\n        avatarId,\r\n        'question_answer',\r\n        {\r\n          correct: isCorrect,\r\n          questionNumber: questionsAttempted.current,\r\n          ...questionData\r\n        }\r\n      );\r\n    } catch (error) {\r\n      logger.error('Failed to track question attempt:', error);\r\n    }\r\n  }, [state.sessionId, state.isTracking, avatarId]);\r\n\r\n  /**\r\n   * Track other game events\r\n   */\r\n  const trackEvent = useCallback(async (eventType: 'game_start' | 'game_complete' | 'question_start' | 'hint_used' | 'game_pause' | 'game_resume' | 'difficulty_change' | 'game_abandon', eventData?: Record<string, unknown>) => {\r\n    if (!state.sessionId || !state.isTracking) {\r\n      logger.warn('No active session for event tracking');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await analyticsService.trackEvent(state.sessionId, avatarId, eventType, eventData || {});\r\n    } catch (error) {\r\n      logger.error(`Failed to track ${eventType} event:`, error);\r\n    }\r\n  }, [state.sessionId, state.isTracking, avatarId]);\r\n\r\n  /**\r\n   * Complete the current session\r\n   */\r\n  const completeSession = useCallback(async (finalScore?: number) => {\r\n    if (!state.sessionId || !state.isTracking) {\r\n      logger.warn('No active session to complete');\r\n      return;\r\n    }\r\n\r\n    const calculatedScore = finalScore ?? (questionsAttempted.current > 0 \r\n      ? (questionsCorrect.current / questionsAttempted.current) * 100 \r\n      : 0);\r\n\r\n    try {\r\n      await analyticsService.completeGameSession(\r\n        state.sessionId,\r\n        calculatedScore,\r\n        questionsAttempted.current,\r\n        questionsCorrect.current\r\n      );\r\n\r\n      setState(prev => ({\r\n        ...prev,\r\n        isTracking: false,\r\n        sessionData: null\r\n      }));\r\n\r\n      // Refresh recommendations and performance metrics after session completion\r\n      setTimeout(async () => {\r\n        try {\r\n          const [recommendations, metrics] = await Promise.all([\r\n            analyticsService.getLearningPathRecommendations(avatarId, 5),\r\n            analyticsService.getPerformanceMetrics(avatarId)\r\n          ]);\r\n          setState(prev => ({\r\n            ...prev,\r\n            recommendations,\r\n            performanceMetrics: metrics\r\n          }));\r\n        } catch (error) {\r\n          logger.error('Failed to load post-session data:', error);\r\n        }\r\n      }, 0);\r\n    } catch (error) {\r\n      logger.error('Failed to complete session:', error);\r\n    }\r\n  }, [state.sessionId, state.isTracking, avatarId]);\r\n\r\n  /**\r\n   * Abandon the current session (user quit without completing)\r\n   */\r\n  const abandonSession = useCallback(async () => {\r\n    if (!state.sessionId || !state.isTracking) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await analyticsService.trackEvent(state.sessionId, avatarId, 'game_abandon', {\r\n        questionsAttempted: questionsAttempted.current,\r\n        questionsCorrect: questionsCorrect.current,\r\n        timeSpent: sessionStartTime.current \r\n          ? Math.floor((Date.now() - sessionStartTime.current.getTime()) / 1000)\r\n          : 0\r\n      });\r\n    } catch (error) {\r\n      logger.error('Failed to track session abandonment:', error);\r\n    }\r\n\r\n    setState(prev => ({\r\n      ...prev,\r\n      isTracking: false,\r\n      sessionData: null,\r\n      sessionId: null\r\n    }));\r\n  }, [state.sessionId, state.isTracking, avatarId, sessionStartTime]);\r\n\r\n  /**\r\n   * Load learning path recommendations\r\n   */\r\n  const loadRecommendations = useCallback(async () => {\r\n    try {\r\n      const recommendations = await analyticsService.getLearningPathRecommendations(avatarId, 5);\r\n      setState(prev => ({\r\n        ...prev,\r\n        recommendations\r\n      }));\r\n    } catch (error) {\r\n      logger.error('Failed to load recommendations:', error);\r\n    }\r\n  }, [avatarId]);\r\n\r\n  /**\r\n   * Load performance metrics\r\n   */\r\n  const loadPerformanceMetrics = useCallback(async () => {\r\n    try {\r\n      const metrics = await analyticsService.getPerformanceMetrics(avatarId);\r\n      setState(prev => ({\r\n        ...prev,\r\n        performanceMetrics: metrics\r\n      }));\r\n    } catch (error) {\r\n      logger.error('Failed to load performance metrics:', error);\r\n    }\r\n  }, [avatarId]);\r\n\r\n  /**\r\n   * Get current session statistics\r\n   */\r\n  const getSessionStats = () => {\r\n    return {\r\n      questionsAttempted: questionsAttempted.current,\r\n      questionsCorrect: questionsCorrect.current,\r\n      accuracy: questionsAttempted.current > 0 \r\n        ? (questionsCorrect.current / questionsAttempted.current) * 100 \r\n        : 0,\r\n      timeElapsed: sessionStartTime.current \r\n        ? Math.floor((Date.now() - sessionStartTime.current.getTime()) / 1000)\r\n        : 0\r\n    };\r\n  };\r\n\r\n  // Auto-start session when component mounts if autoTrack is enabled\r\n  useEffect(() => {\r\n    if (autoTrack && !state.isTracking) {\r\n      startSession();\r\n    }\r\n\r\n    // Load initial data\r\n    loadRecommendations();\r\n    loadPerformanceMetrics();\r\n\r\n    // Cleanup function to abandon session if component unmounts while tracking\r\n    return () => {\r\n      if (state.isTracking) {\r\n        abandonSession();\r\n      }\r\n    };\r\n  }, [gameType, avatarId, autoTrack, state.isTracking, startSession, loadRecommendations, loadPerformanceMetrics, abandonSession]);\r\n\r\n  // Auto-complete session when questions are finished (if autoTrack enabled)\r\n  useEffect(() => {\r\n    if (autoTrack && state.isTracking && questionsAttempted.current >= (settings.questionsPerSession || 10)) {\r\n      completeSession();\r\n    }\r\n  }, [autoTrack, state.isTracking, settings.questionsPerSession, completeSession]);\r\n\r\n  return {\r\n    // Session management\r\n    startSession,\r\n    completeSession,\r\n    abandonSession,\r\n    \r\n    // Event tracking\r\n    trackQuestionAttempt,\r\n    trackEvent,\r\n    \r\n    // Data access\r\n    getSessionStats,\r\n    loadRecommendations,\r\n    loadPerformanceMetrics,\r\n    \r\n    // State\r\n    sessionId: state.sessionId,\r\n    isTracking: state.isTracking,\r\n    recommendations: state.recommendations,\r\n    performanceMetrics: state.performanceMetrics,\r\n    \r\n    // Current session stats\r\n    ...getSessionStats()\r\n  };\r\n}\r\n\r\n/**\r\n * Hook for accessing aggregate analytics (for admin/teacher dashboards)\r\n */\r\nexport function useAggregateAnalytics(orgId?: string) {\r\n  const [analytics, setAnalytics] = useState<ReturnType<typeof analyticsService.getAggregateAnalytics> | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const loadAnalytics = useCallback(async () => {\r\n    setLoading(true);\r\n    try {\r\n      const data = analyticsService.getAggregateAnalytics(orgId);\r\n      setAnalytics(data);\r\n    } catch (error) {\r\n      logger.error('Failed to load aggregate analytics:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [orgId]);\r\n\r\n  useEffect(() => {\r\n    loadAnalytics();\r\n  }, [orgId, loadAnalytics]);\r\n\r\n  return {\r\n    analytics,\r\n    loading,\r\n    refresh: loadAnalytics\r\n  };\r\n} "],"names":["useAggregateAnalytics","useGameAnalytics","options","gameType","avatarId","orgId","autoTrack","settings","useSettings","state","setState","useState","sessionId","isTracking","sessionData","recommendations","performanceMetrics","sessionStartTime","useRef","questionsAttempted","questionsCorrect","startSession","useCallback","logger","warn","analyticsService","startGameSession","current","Date","prev","error","trackQuestionAttempt","isCorrect","questionData","trackEvent","correct","questionNumber","eventType","eventData","completeSession","finalScore","calculatedScore","completeGameSession","setTimeout","metrics","Promise","all","getLearningPathRecommendations","getPerformanceMetrics","abandonSession","timeSpent","Math","floor","now","getTime","loadRecommendations","loadPerformanceMetrics","getSessionStats","accuracy","timeElapsed","useEffect","questionsPerSession","analytics","setAnalytics","loading","setLoading","loadAnalytics","data","getAggregateAnalytics","refresh"],"mappings":"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"}