{"version":3,"sources":["C:\\repos\\family-oriented\\src\\shared\\components\\gates\\SubscriptionBadge.tsx"],"sourcesContent":["/**\r\n * SubscriptionBadge Component\r\n * Shows current subscription tier with status indicators\r\n * Provides upgrade prompts and tier comparison\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport {\r\n  Box,\r\n  Chip,\r\n  Typography,\r\n  Popover,\r\n  Card,\r\n  CardContent,\r\n  Stack,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  CircularProgress\r\n} from '@mui/material';\r\nimport { \r\n  Business,\r\n  Star,\r\n  CheckCircle,\r\n  Lock\r\n} from '@mui/icons-material';\r\nimport { useSubscription } from '@/hooks/useSubscription';\r\nimport { TIER_CONFIGURATIONS, type SubscriptionTier } from '@/utils/subscriptionService';\r\nimport TierTransitionButton from '@/features/subscription/components/TierTransitionButton';\r\n\r\ninterface SubscriptionBadgeProps {\r\n  variant?: 'basic' | 'detailed' | 'compact';\r\n  showUpgradeButton?: boolean;\r\n  showDetails?: boolean;\r\n}\r\n\r\n/**\r\n * Tier color mapping for consistent styling\r\n */\r\nconst TIER_COLORS: Record<SubscriptionTier, 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'info' | 'error'> = {\r\n  personal: 'primary',\r\n  professional: 'success', \r\n  enterprise: 'warning'\r\n};\r\n\r\n/**\r\n * Tier icon mapping\r\n */\r\nconst TIER_ICONS: Record<SubscriptionTier, React.ReactElement> = {\r\n  personal: <Business />,\r\n  professional: <Star />,\r\n  enterprise: <Star sx={{ color: 'gold' }} />\r\n};\r\n\r\n/**\r\n * Main subscription badge component - safe initialization\r\n */\r\nconst SubscriptionBadge = React.memo(({\r\n  variant = 'basic',\r\n  showUpgradeButton = true,\r\n  showDetails = true\r\n}: SubscriptionBadgeProps) => {\r\n  const { tier, subscriptionPlan, isLoaded, getAvailableFeatures } = useSubscription();\r\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);\r\n  \r\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    if (showDetails) {\r\n      setAnchorEl(event.currentTarget);\r\n    }\r\n  };\r\n  \r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  \r\n  const open = Boolean(anchorEl);\r\n\r\n  // Memoize computed values to prevent re-renders\r\n  const computedValues = useMemo(() => {\r\n    if (!isLoaded || !subscriptionPlan || !tier) {\r\n      return null;\r\n    }\r\n    \r\n    return {\r\n      tierConfig: TIER_CONFIGURATIONS[tier as SubscriptionTier],\r\n      availableFeatures: getAvailableFeatures(),\r\n      tierIcon: TIER_ICONS[tier as SubscriptionTier],\r\n      tierColor: TIER_COLORS[tier as SubscriptionTier]\r\n    };\r\n  }, [tier, subscriptionPlan, isLoaded, getAvailableFeatures]);\r\n  \r\n  if (!isLoaded) {\r\n    return (\r\n      <Chip \r\n        label=\"Loading...\" \r\n        variant=\"outlined\" \r\n        size=\"small\"\r\n        icon={<CircularProgress size={16} />}\r\n      />\r\n    );\r\n  }\r\n  \r\n  if (!subscriptionPlan || !tier) {\r\n    return (\r\n      <Chip \r\n        label=\"No Plan\" \r\n        color=\"error\" \r\n        variant=\"outlined\"\r\n        size=\"small\"\r\n        icon={<Lock />}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (!computedValues) {\r\n    return (\r\n      <Chip \r\n        label=\"Loading...\" \r\n        variant=\"outlined\" \r\n        size=\"small\"\r\n      />\r\n    );\r\n  }\r\n  \r\n  const { tierConfig, availableFeatures, tierIcon, tierColor } = computedValues;\r\n  \r\n  if (variant === 'compact') {\r\n    return (\r\n      <Chip\r\n        icon={tierIcon}\r\n        label={tier.toUpperCase()}\r\n        color={tierColor}\r\n        size=\"small\"\r\n        onClick={showDetails ? handleClick : undefined}\r\n        clickable={showDetails}\r\n      />\r\n    );\r\n  }\r\n  \r\n  if (variant === 'basic') {\r\n    return (\r\n      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n        <Chip\r\n          icon={tierIcon}\r\n          label={tierConfig?.displayName || tier}\r\n          color={tierColor}\r\n          onClick={showDetails ? handleClick : undefined}\r\n          clickable={showDetails}\r\n        />\r\n        {showUpgradeButton && tier !== 'enterprise' && (\r\n          <TierTransitionButton \r\n            targetTier={tier === 'personal' ? 'professional' : 'enterprise'}\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n          />\r\n        )}\r\n        \r\n        {showDetails && (\r\n          <SubscriptionDetailsPopover\r\n            open={open}\r\n            anchorEl={anchorEl}\r\n            onClose={handleClose}\r\n            tier={tier as SubscriptionTier}\r\n            tierConfig={tierConfig}\r\n            availableFeatures={availableFeatures}\r\n          />\r\n        )}\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // Detailed variant\r\n  return (\r\n    <Card sx={{ bgcolor: 'grey.50', border: 1, borderColor: 'grey.200' }}>\r\n      <CardContent>\r\n        <Stack spacing={2}>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n              {tierIcon}\r\n              <Typography variant=\"h6\">\r\n                {tierConfig?.displayName || tier}\r\n              </Typography>\r\n              <Chip \r\n                label={tier.toUpperCase()}\r\n                color={tierColor}\r\n                size=\"small\"\r\n              />\r\n            </Box>\r\n            \r\n            {showUpgradeButton && tier !== 'enterprise' && (\r\n              <TierTransitionButton \r\n                targetTier={tier === 'personal' ? 'professional' : 'enterprise'}\r\n                variant=\"contained\"\r\n              />\r\n            )}\r\n          </Box>\r\n          \r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            {tierConfig?.description}\r\n          </Typography>\r\n          \r\n          <Box>\r\n            <Typography variant=\"subtitle2\" gutterBottom>\r\n              Available Features ({availableFeatures.length})\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n              {availableFeatures.slice(0, 6).map((feature) => (\r\n                <Chip\r\n                  key={feature}\r\n                  label={feature.replace(/_/g, ' ')}\r\n                  size=\"small\"\r\n                  variant=\"outlined\"\r\n                  color=\"success\"\r\n                  icon={<CheckCircle />}\r\n                />\r\n              ))}\r\n              {availableFeatures.length > 6 && (\r\n                <Chip\r\n                  label={`+${availableFeatures.length - 6} more`}\r\n                  size=\"small\"\r\n                  variant=\"outlined\"\r\n                  color=\"info\"\r\n                />\r\n              )}\r\n            </Box>\r\n          </Box>\r\n        </Stack>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n});\r\n\r\nSubscriptionBadge.displayName = 'SubscriptionBadge';\r\n\r\n/**\r\n * Detailed popover showing subscription information\r\n */\r\nfunction SubscriptionDetailsPopover({\r\n  open,\r\n  anchorEl,\r\n  onClose,\r\n  tier,\r\n  tierConfig,\r\n  availableFeatures\r\n}: {\r\n  open: boolean;\r\n  anchorEl: HTMLElement | null;\r\n  onClose: () => void;\r\n  tier: SubscriptionTier;\r\n  tierConfig: {\r\n    displayName: string;\r\n    description: string;\r\n    limits: {\r\n      avatars: number;\r\n      collections_per_avatar: number;\r\n      sessions_per_month: number;\r\n    };\r\n  };\r\n  availableFeatures: string[];\r\n}) {\r\n  return (\r\n    <Popover\r\n      open={open}\r\n      anchorEl={anchorEl}\r\n      onClose={onClose}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'left',\r\n      }}\r\n      transformOrigin={{\r\n        vertical: 'top',\r\n        horizontal: 'left',\r\n      }}\r\n    >\r\n      <Card sx={{ maxWidth: 400 }}>\r\n        <CardContent>\r\n          <Stack spacing={2}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n              {TIER_ICONS[tier]}\r\n              <Typography variant=\"h6\">\r\n                {tierConfig?.displayName}\r\n              </Typography>\r\n              <Chip \r\n                label={tier.toUpperCase()}\r\n                color={TIER_COLORS[tier]}\r\n                size=\"small\"\r\n              />\r\n            </Box>\r\n            \r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              {tierConfig?.description}\r\n            </Typography>\r\n            \r\n            <Divider />\r\n            \r\n            <Box>\r\n              <Typography variant=\"subtitle2\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                <CheckCircle color=\"success\" fontSize=\"small\" />\r\n                Available Features\r\n              </Typography>\r\n              <List dense>\r\n                {availableFeatures.map((feature) => (\r\n                  <ListItem key={feature} sx={{ py: 0.5 }}>\r\n                    <ListItemIcon sx={{ minWidth: 32 }}>\r\n                      <CheckCircle color=\"success\" fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    <ListItemText \r\n                      primary={feature.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\r\n                    />\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </Box>\r\n            \r\n            <Divider />\r\n            \r\n            <Box>\r\n              <Typography variant=\"subtitle2\" gutterBottom>\r\n                Usage Limits\r\n              </Typography>\r\n              <Stack spacing={1}>\r\n                <Typography variant=\"body2\">\r\n                  Children: {tierConfig?.limits.avatars === 10000 ? 'Unlimited' : tierConfig?.limits.avatars}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  Collections per Child: {tierConfig?.limits.collections_per_avatar}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  Sessions per Month: {tierConfig?.limits.sessions_per_month.toLocaleString()}\r\n                </Typography>\r\n              </Stack>\r\n            </Box>\r\n            \r\n            {tier !== 'enterprise' && (\r\n              <TierTransitionButton \r\n                targetTier={tier === 'personal' ? 'professional' : 'enterprise'}\r\n                variant=\"contained\"\r\n              />\r\n            )}\r\n          </Stack>\r\n        </CardContent>\r\n      </Card>\r\n    </Popover>\r\n  );\r\n}\r\n\r\n/**\r\n * Simple tier indicator for use in headers or compact spaces\r\n */\r\nexport function TierIndicator({ \r\n  showUpgrade = false \r\n}: { \r\n  showUpgrade?: boolean \r\n}) {\r\n  return (\r\n    <SubscriptionBadge \r\n      variant=\"compact\" \r\n      showUpgradeButton={showUpgrade}\r\n      showDetails={true}\r\n    />\r\n  );\r\n}\r\n\r\nexport default SubscriptionBadge; "],"names":["TierIndicator","TIER_COLORS","personal","professional","enterprise","TIER_ICONS","Business","Star","sx","color","SubscriptionBadge","React","memo","variant","showUpgradeButton","showDetails","tier","subscriptionPlan","isLoaded","getAvailableFeatures","useSubscription","anchorEl","setAnchorEl","useState","handleClick","event","currentTarget","handleClose","open","Boolean","computedValues","useMemo","tierConfig","TIER_CONFIGURATIONS","availableFeatures","tierIcon","tierColor","Chip","label","size","icon","CircularProgress","Lock","toUpperCase","onClick","undefined","clickable","Box","display","alignItems","gap","displayName","TierTransitionButton","targetTier","SubscriptionDetailsPopover","onClose","Card","bgcolor","border","borderColor","CardContent","Stack","spacing","justifyContent","Typography","description","gutterBottom","length","flexWrap","slice","map","feature","replace","CheckCircle","Popover","anchorOrigin","vertical","horizontal","transformOrigin","maxWidth","Divider","fontSize","List","dense","ListItem","py","ListItemIcon","minWidth","ListItemText","primary","l","limits","avatars","collections_per_avatar","sessions_per_month","toLocaleString","showUpgrade"],"mappings":"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"}