{"version":3,"sources":["C:\\repos\\family-oriented\\src\\shared\\components\\gates\\UsageMeter.tsx"],"sourcesContent":["/**\r\n * UsageMeter Component\r\n * Displays subscription usage against limits with visual indicators\r\n * Shows upgrade prompts when approaching or exceeding limits\r\n */\r\n\r\nimport React from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  LinearProgress,\r\n  Chip,\r\n  Stack,\r\n  Button,\r\n  Alert\r\n} from '@mui/material';\r\nimport { \r\n  Warning, \r\n  Error, \r\n  CheckCircle,\r\n  Upgrade \r\n} from '@mui/icons-material';\r\nimport { useSubscription } from '@/hooks/useSubscription';\r\nimport { type UsageLimit } from '@/utils/subscriptionService';\r\nimport TierTransitionButton from '@/features/subscription/components/TierTransitionButton';\r\n\r\ninterface UsageMeterProps {\r\n  limitType: UsageLimit;\r\n  currentUsage: number;\r\n  label?: string;\r\n  showUpgradePrompt?: boolean;\r\n  compact?: boolean;\r\n  warningThreshold?: number; // Percentage at which to show warning (default 80%)\r\n  hideWhenUnlimited?: boolean;\r\n}\r\n\r\n/**\r\n * Usage meter with subscription-aware limits and upgrade prompts\r\n */\r\nexport default function UsageMeter({\r\n  limitType,\r\n  currentUsage,\r\n  label,\r\n  showUpgradePrompt = true,\r\n  compact = false,\r\n  warningThreshold = 0.8,\r\n  hideWhenUnlimited = true\r\n}: UsageMeterProps) {\r\n  const { checkUsageLimit, formatFeatureMessage, tier } = useSubscription();\r\n  \r\n  const usageResult = checkUsageLimit(limitType, currentUsage);\r\n  const limit = usageResult.limit || 0;\r\n  \r\n  // Hide meter for effectively unlimited plans (like enterprise)\r\n  if (hideWhenUnlimited && limit >= 10000) {\r\n    return null;\r\n  }\r\n  \r\n  const percentage = Math.min((currentUsage / limit) * 100, 100);\r\n  const isWarning = currentUsage / limit >= warningThreshold;\r\n  const isError = !usageResult.allowed;\r\n  \r\n  const displayLabel = label || limitType.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\r\n  \r\n  // Determine color and icon based on usage\r\n  let color: 'primary' | 'warning' | 'error' = 'primary';\r\n  let icon = <CheckCircle color=\"success\" />;\r\n  let statusText = 'Good';\r\n  \r\n  if (isError) {\r\n    color = 'error';\r\n    icon = <Error color=\"error\" />;\r\n    statusText = 'Limit Exceeded';\r\n  } else if (isWarning) {\r\n    color = 'warning';\r\n    icon = <Warning color=\"warning\" />;\r\n    statusText = 'Approaching Limit';\r\n  }\r\n  \r\n  if (compact) {\r\n    return (\r\n      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, minWidth: 200 }}>\r\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ minWidth: 80 }}>\r\n          {displayLabel}\r\n        </Typography>\r\n        <Box sx={{ flex: 1 }}>\r\n          <LinearProgress\r\n            variant=\"determinate\"\r\n            value={percentage}\r\n            color={color}\r\n            sx={{ height: 6, borderRadius: 3 }}\r\n          />\r\n        </Box>\r\n        <Typography variant=\"body2\" color={isError ? 'error.main' : 'text.primary'} sx={{ minWidth: 50 }}>\r\n          {currentUsage}/{limit === 10000 ? '∞' : limit}\r\n        </Typography>\r\n        {isError && showUpgradePrompt && usageResult.upgradeRequired && (\r\n          <TierTransitionButton \r\n            targetTier={usageResult.upgradeRequired}\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n          />\r\n        )}\r\n      </Box>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <Box sx={{ mb: 2 }}>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            {displayLabel}\r\n          </Typography>\r\n          <Chip \r\n            icon={icon}\r\n            label={statusText}\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n            color={color}\r\n          />\r\n        </Box>\r\n        <Typography \r\n          variant=\"body2\" \r\n          color={isError ? 'error.main' : 'text.primary'}\r\n          sx={{ fontWeight: isError ? 'bold' : 'normal' }}\r\n        >\r\n          {currentUsage} / {limit === 10000 ? '∞' : limit}\r\n        </Typography>\r\n      </Box>\r\n      \r\n      <LinearProgress\r\n        variant=\"determinate\"\r\n        value={percentage}\r\n        color={color}\r\n        sx={{ \r\n          height: 8, \r\n          borderRadius: 4,\r\n          mb: isError ? 1 : 0\r\n        }}\r\n      />\r\n      \r\n      {isError && (\r\n        <Alert \r\n          severity=\"error\" \r\n          sx={{ mt: 2 }}\r\n          action={\r\n            showUpgradePrompt && usageResult.upgradeRequired ? (\r\n              <TierTransitionButton \r\n                targetTier={usageResult.upgradeRequired}\r\n                size=\"small\"\r\n                variant=\"contained\"\r\n              />\r\n            ) : undefined\r\n          }\r\n        >\r\n          <Typography variant=\"body2\">\r\n            {formatFeatureMessage(usageResult)}\r\n          </Typography>\r\n        </Alert>\r\n      )}\r\n      \r\n      {isWarning && !isError && showUpgradePrompt && (\r\n        <Box sx={{ mt: 1, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n          <Typography variant=\"caption\" color=\"warning.main\">\r\n            Approaching your {tier} plan limit\r\n          </Typography>\r\n          <Button \r\n            size=\"small\" \r\n            startIcon={<Upgrade />}\r\n            onClick={() => {\r\n              // This would open upgrade flow\r\n              console.log('Open upgrade flow for', limitType);\r\n            }}\r\n          >\r\n            Upgrade\r\n          </Button>\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\n/**\r\n * Multi-meter component showing all usage limits\r\n */\r\nexport function UsageOverview({ \r\n  compact = false,\r\n  showUpgradePrompts = true \r\n}: { \r\n  compact?: boolean;\r\n  showUpgradePrompts?: boolean;\r\n}) {\r\n  const { currentUsage } = useSubscription();\r\n  \r\n  return (\r\n    <Stack spacing={compact ? 1 : 2}>\r\n      <UsageMeter\r\n        limitType=\"avatars\"\r\n        currentUsage={currentUsage.avatarsCount}\r\n        label=\"Children (Avatars)\"\r\n        compact={compact}\r\n        showUpgradePrompt={showUpgradePrompts}\r\n      />\r\n      \r\n      {/* Add more meters as needed */}\r\n      <UsageMeter\r\n        limitType=\"collections_per_avatar\"\r\n        currentUsage={5} // This would come from actual data\r\n        label=\"Collections per Child\"\r\n        compact={compact}\r\n        showUpgradePrompt={showUpgradePrompts}\r\n      />\r\n      \r\n      <UsageMeter\r\n        limitType=\"sessions_per_month\"\r\n        currentUsage={150} // This would come from analytics\r\n        label=\"Sessions This Month\"\r\n        compact={compact}\r\n        showUpgradePrompt={showUpgradePrompts}\r\n      />\r\n    </Stack>\r\n  );\r\n} "],"names":["UsageOverview","UsageMeter","limitType","currentUsage","label","showUpgradePrompt","compact","warningThreshold","hideWhenUnlimited","checkUsageLimit","formatFeatureMessage","tier","useSubscription","usageResult","limit","percentage","Math","min","isWarning","isError","allowed","displayLabel","replace","l","toUpperCase","color","icon","CheckCircle","statusText","Error","Warning","Box","sx","display","alignItems","gap","minWidth","Typography","variant","flex","LinearProgress","value","height","borderRadius","upgradeRequired","TierTransitionButton","targetTier","size","mb","justifyContent","Chip","fontWeight","Alert","severity","mt","action","undefined","Button","startIcon","Upgrade","onClick","console","log","showUpgradePrompts","Stack","spacing","avatarsCount"],"mappings":"AAAA;;;;CAIC;;;;;;;;;;;IAsLeA,aAAa;eAAbA;;IAtJhB;;CAEC,GACD,OA8IC;eA9IuBC;;;;8DAjCN;0BASX;;;;;iCAOyB;6EAEC;;;;;;AAelB,SAASA,WAAW,EACjCC,SAAS,EACTC,YAAY,EACZC,KAAK,EACLC,oBAAoB,IAAI,EACxBC,UAAU,KAAK,EACfC,mBAAmB,GAAG,EACtBC,oBAAoB,IAAI,EACR;IAChB,MAAM,EAAEC,eAAe,EAAEC,oBAAoB,EAAEC,IAAI,EAAE,GAAGC,IAAAA,gCAAe;IAEvE,MAAMC,cAAcJ,gBAAgBP,WAAWC;IAC/C,MAAMW,QAAQD,YAAYC,KAAK,IAAI;IAEnC,+DAA+D;IAC/D,IAAIN,qBAAqBM,SAAS,OAAO;QACvC,OAAO;IACT;IAEA,MAAMC,aAAaC,KAAKC,GAAG,CAAC,AAACd,eAAeW,QAAS,KAAK;IAC1D,MAAMI,YAAYf,eAAeW,SAASP;IAC1C,MAAMY,UAAU,CAACN,YAAYO,OAAO;IAEpC,MAAMC,eAAejB,SAASF,UAAUoB,OAAO,CAAC,MAAM,KAAKA,OAAO,CAAC,SAASC,CAAAA,IAAKA,EAAEC,WAAW;IAE9F,0CAA0C;IAC1C,IAAIC,QAAyC;IAC7C,IAAIC,qBAAO,qBAACC,oBAAW;QAACF,OAAM;;IAC9B,IAAIG,aAAa;IAEjB,IAAIT,SAAS;QACXM,QAAQ;QACRC,qBAAO,qBAACG,cAAK;YAACJ,OAAM;;QACpBG,aAAa;IACf,OAAO,IAAIV,WAAW;QACpBO,QAAQ;QACRC,qBAAO,qBAACI,gBAAO;YAACL,OAAM;;QACtBG,aAAa;IACf;IAEA,IAAItB,SAAS;QACX,qBACE,sBAACyB,aAAG;YAACC,IAAI;gBAAEC,SAAS;gBAAQC,YAAY;gBAAUC,KAAK;gBAAGC,UAAU;YAAI;;8BACtE,qBAACC,oBAAU;oBAACC,SAAQ;oBAAQb,OAAM;oBAAiBO,IAAI;wBAAEI,UAAU;oBAAG;8BACnEf;;8BAEH,qBAACU,aAAG;oBAACC,IAAI;wBAAEO,MAAM;oBAAE;8BACjB,cAAA,qBAACC,wBAAc;wBACbF,SAAQ;wBACRG,OAAO1B;wBACPU,OAAOA;wBACPO,IAAI;4BAAEU,QAAQ;4BAAGC,cAAc;wBAAE;;;8BAGrC,sBAACN,oBAAU;oBAACC,SAAQ;oBAAQb,OAAON,UAAU,eAAe;oBAAgBa,IAAI;wBAAEI,UAAU;oBAAG;;wBAC5FjC;wBAAa;wBAAEW,UAAU,QAAQ,MAAMA;;;gBAEzCK,WAAWd,qBAAqBQ,YAAY+B,eAAe,kBAC1D,qBAACC,6BAAoB;oBACnBC,YAAYjC,YAAY+B,eAAe;oBACvCG,MAAK;oBACLT,SAAQ;;;;IAKlB;IAEA,qBACE,sBAACP,aAAG;QAACC,IAAI;YAAEgB,IAAI;QAAE;;0BACf,sBAACjB,aAAG;gBAACC,IAAI;oBAAEC,SAAS;oBAAQgB,gBAAgB;oBAAiBf,YAAY;oBAAUc,IAAI;gBAAE;;kCACvF,sBAACjB,aAAG;wBAACC,IAAI;4BAAEC,SAAS;4BAAQC,YAAY;4BAAUC,KAAK;wBAAE;;0CACvD,qBAACE,oBAAU;gCAACC,SAAQ;gCAAQb,OAAM;0CAC/BJ;;0CAEH,qBAAC6B,cAAI;gCACHxB,MAAMA;gCACNtB,OAAOwB;gCACPmB,MAAK;gCACLT,SAAQ;gCACRb,OAAOA;;;;kCAGX,sBAACY,oBAAU;wBACTC,SAAQ;wBACRb,OAAON,UAAU,eAAe;wBAChCa,IAAI;4BAAEmB,YAAYhC,UAAU,SAAS;wBAAS;;4BAE7ChB;4BAAa;4BAAIW,UAAU,QAAQ,MAAMA;;;;;0BAI9C,qBAAC0B,wBAAc;gBACbF,SAAQ;gBACRG,OAAO1B;gBACPU,OAAOA;gBACPO,IAAI;oBACFU,QAAQ;oBACRC,cAAc;oBACdK,IAAI7B,UAAU,IAAI;gBACpB;;YAGDA,yBACC,qBAACiC,eAAK;gBACJC,UAAS;gBACTrB,IAAI;oBAAEsB,IAAI;gBAAE;gBACZC,QACElD,qBAAqBQ,YAAY+B,eAAe,iBAC9C,qBAACC,6BAAoB;oBACnBC,YAAYjC,YAAY+B,eAAe;oBACvCG,MAAK;oBACLT,SAAQ;qBAERkB;0BAGN,cAAA,qBAACnB,oBAAU;oBAACC,SAAQ;8BACjB5B,qBAAqBG;;;YAK3BK,aAAa,CAACC,WAAWd,mCACxB,sBAAC0B,aAAG;gBAACC,IAAI;oBAAEsB,IAAI;oBAAGrB,SAAS;oBAAQgB,gBAAgB;oBAAiBf,YAAY;gBAAS;;kCACvF,sBAACG,oBAAU;wBAACC,SAAQ;wBAAUb,OAAM;;4BAAe;4BAC/Bd;4BAAK;;;kCAEzB,qBAAC8C,gBAAM;wBACLV,MAAK;wBACLW,yBAAW,qBAACC,gBAAO;wBACnBC,SAAS;4BACP,+BAA+B;4BAC/BC,QAAQC,GAAG,CAAC,yBAAyB5D;wBACvC;kCACD;;;;;;AAOX;AAKO,SAASF,cAAc,EAC5BM,UAAU,KAAK,EACfyD,qBAAqB,IAAI,EAI1B;IACC,MAAM,EAAE5D,YAAY,EAAE,GAAGS,IAAAA,gCAAe;IAExC,qBACE,sBAACoD,eAAK;QAACC,SAAS3D,UAAU,IAAI;;0BAC5B,qBAACL;gBACCC,WAAU;gBACVC,cAAcA,aAAa+D,YAAY;gBACvC9D,OAAM;gBACNE,SAASA;gBACTD,mBAAmB0D;;0BAIrB,qBAAC9D;gBACCC,WAAU;gBACVC,cAAc;gBACdC,OAAM;gBACNE,SAASA;gBACTD,mBAAmB0D;;0BAGrB,qBAAC9D;gBACCC,WAAU;gBACVC,cAAc;gBACdC,OAAM;gBACNE,SAASA;gBACTD,mBAAmB0D;;;;AAI3B"}