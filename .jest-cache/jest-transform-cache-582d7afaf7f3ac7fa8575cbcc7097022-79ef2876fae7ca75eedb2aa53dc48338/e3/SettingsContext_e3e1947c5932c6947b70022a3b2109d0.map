{"version":3,"sources":["C:\\repos\\family-oriented\\src\\context\\SettingsContext.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { logger } from '@/utils/logger';\r\n\r\n// Define the structure for our global settings\r\nexport interface GlobalSettings {\r\n  // General settings\r\n  questionsPerSession: number;\r\n  \r\n  // Numbers game settings\r\n  numberRange: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  \r\n  // Fill in the blank settings\r\n  wordComplexity: 'easy' | 'medium' | 'hard';\r\n  \r\n  // Math settings\r\n  mathOperations: {\r\n    addition: boolean;\r\n    subtraction: boolean;\r\n  };\r\n  mathRange: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  showVisualAids: boolean;\r\n}\r\n\r\n// Default settings\r\nconst defaultSettings: GlobalSettings = {\r\n  questionsPerSession: 10,\r\n  numberRange: {\r\n    min: 1,\r\n    max: 20,\r\n  },\r\n  wordComplexity: 'easy',\r\n  mathOperations: {\r\n    addition: true,\r\n    subtraction: true,\r\n  },\r\n  mathRange: {\r\n    min: 1,\r\n    max: 10,\r\n  },\r\n  showVisualAids: true,\r\n};\r\n\r\n// Create the context\r\ntype SettingsContextType = {\r\n  settings: GlobalSettings;\r\n  updateSettings: (newSettings: Partial<GlobalSettings>) => void;\r\n  updateNumberRange: (min: number, max: number) => void;\r\n  updateMathRange: (min: number, max: number) => void;\r\n  resetSettings: () => void;\r\n};\r\n\r\nconst SettingsContext = createContext<SettingsContextType | undefined>(undefined);\r\n\r\n// Provider component\r\nexport function SettingsProvider({ children }: { children: ReactNode }) {\r\n  // Initialize state with default settings - always start with defaults to prevent hydration mismatch\r\n  const [settings, setSettings] = useState<GlobalSettings>(defaultSettings);\r\n  const [isHydrated, setIsHydrated] = useState(false);\r\n\r\n  // Load settings from localStorage after hydration\r\n  useEffect(() => {\r\n    setIsHydrated(true);\r\n    \r\n    if (typeof window !== 'undefined') {\r\n      try {\r\n        const savedSettings = localStorage.getItem('globalGameSettings');\r\n        if (savedSettings) {\r\n          const parsedSettings = JSON.parse(savedSettings);\r\n          \r\n          // Ensure all required properties exist by merging with defaults\r\n          const mergedSettings = {\r\n            ...defaultSettings,\r\n            ...parsedSettings,\r\n            // Ensure nested objects are properly merged\r\n            numberRange: {\r\n              ...defaultSettings.numberRange,\r\n              ...(parsedSettings.numberRange || {})\r\n            },\r\n            mathOperations: {\r\n              ...defaultSettings.mathOperations,\r\n              ...(parsedSettings.mathOperations || {})\r\n            },\r\n            mathRange: {\r\n              ...defaultSettings.mathRange,\r\n              ...(parsedSettings.mathRange || {})\r\n            }\r\n          };\r\n          \r\n          setSettings(mergedSettings);\r\n        }\r\n      } catch (error) {\r\n        logger.error('Error loading settings from localStorage:', error);\r\n        // If there's an error, keep defaults\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Save settings to localStorage when they change (only after hydration)\r\n  useEffect(() => {\r\n    if (isHydrated && typeof window !== 'undefined') {\r\n      try {\r\n        localStorage.setItem('globalGameSettings', JSON.stringify(settings));\r\n      } catch (error) {\r\n        logger.error('Error saving settings to localStorage:', error);\r\n      }\r\n    }\r\n  }, [settings, isHydrated]);\r\n\r\n  // Update specific settings\r\n  const updateSettings = (newSettings: Partial<GlobalSettings>) => {\r\n    setSettings(prev => {\r\n      // Handle nested objects carefully\r\n      const updated = { ...prev, ...newSettings };\r\n      \r\n      // Ensure numberRange is properly updated if provided\r\n      if (newSettings.numberRange) {\r\n        updated.numberRange = {\r\n          ...prev.numberRange,\r\n          ...newSettings.numberRange\r\n        };\r\n      }\r\n      \r\n      // Ensure mathRange is properly updated if provided\r\n      if (newSettings.mathRange) {\r\n        updated.mathRange = {\r\n          ...prev.mathRange,\r\n          ...newSettings.mathRange\r\n        };\r\n      }\r\n      \r\n      // Ensure mathOperations is properly updated if provided\r\n      if (newSettings.mathOperations) {\r\n        updated.mathOperations = {\r\n          ...prev.mathOperations,\r\n          ...newSettings.mathOperations\r\n        };\r\n      }\r\n      \r\n      return updated;\r\n    });\r\n  };\r\n\r\n  // Helper for updating number range\r\n  const updateNumberRange = (min: number, max: number) => {\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      numberRange: { min, max },\r\n    }));\r\n  };\r\n\r\n  // Helper for updating math range\r\n  const updateMathRange = (min: number, max: number) => {\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      mathRange: { min, max },\r\n    }));\r\n  };\r\n\r\n  // Reset to defaults\r\n  const resetSettings = () => {\r\n    setSettings(defaultSettings);\r\n  };\r\n\r\n  return (\r\n    <SettingsContext.Provider\r\n      value={{\r\n        settings,\r\n        updateSettings,\r\n        updateNumberRange,\r\n        updateMathRange,\r\n        resetSettings,\r\n      }}\r\n    >\r\n      {children}\r\n    </SettingsContext.Provider>\r\n  );\r\n}\r\n\r\n// Custom hook for using the settings context\r\nexport function useSettings() {\r\n  const context = useContext(SettingsContext);\r\n  if (context === undefined) {\r\n    throw new Error('useSettings must be used within a SettingsProvider');\r\n  }\r\n  return context;\r\n} "],"names":["SettingsProvider","useSettings","defaultSettings","questionsPerSession","numberRange","min","max","wordComplexity","mathOperations","addition","subtraction","mathRange","showVisualAids","SettingsContext","createContext","undefined","children","settings","setSettings","useState","isHydrated","setIsHydrated","useEffect","window","savedSettings","localStorage","getItem","parsedSettings","JSON","parse","mergedSettings","error","logger","setItem","stringify","updateSettings","newSettings","prev","updated","updateNumberRange","updateMathRange","resetSettings","Provider","value","context","useContext","Error"],"mappings":"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"}