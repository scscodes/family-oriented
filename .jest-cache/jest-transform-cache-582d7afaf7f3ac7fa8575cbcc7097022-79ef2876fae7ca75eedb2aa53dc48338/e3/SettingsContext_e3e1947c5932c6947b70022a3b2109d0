3e94ba114b15733f446b515aaa3f0ab5
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    SettingsProvider: function() {
        return SettingsProvider;
    },
    useSettings: function() {
        return useSettings;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _logger = require("../utils/logger");
// Default settings
const defaultSettings = {
    questionsPerSession: 10,
    numberRange: {
        min: 1,
        max: 20
    },
    wordComplexity: 'easy',
    mathOperations: {
        addition: true,
        subtraction: true
    },
    mathRange: {
        min: 1,
        max: 10
    },
    showVisualAids: true
};
const SettingsContext = /*#__PURE__*/ (0, _react.createContext)(undefined);
function SettingsProvider({ children }) {
    // Initialize state with default settings - always start with defaults to prevent hydration mismatch
    const [settings, setSettings] = (0, _react.useState)(defaultSettings);
    const [isHydrated, setIsHydrated] = (0, _react.useState)(false);
    // Load settings from localStorage after hydration
    (0, _react.useEffect)(()=>{
        setIsHydrated(true);
        if (typeof window !== 'undefined') {
            try {
                const savedSettings = localStorage.getItem('globalGameSettings');
                if (savedSettings) {
                    const parsedSettings = JSON.parse(savedSettings);
                    // Ensure all required properties exist by merging with defaults
                    const mergedSettings = {
                        ...defaultSettings,
                        ...parsedSettings,
                        // Ensure nested objects are properly merged
                        numberRange: {
                            ...defaultSettings.numberRange,
                            ...parsedSettings.numberRange || {}
                        },
                        mathOperations: {
                            ...defaultSettings.mathOperations,
                            ...parsedSettings.mathOperations || {}
                        },
                        mathRange: {
                            ...defaultSettings.mathRange,
                            ...parsedSettings.mathRange || {}
                        }
                    };
                    setSettings(mergedSettings);
                }
            } catch (error) {
                _logger.logger.error('Error loading settings from localStorage:', error);
            // If there's an error, keep defaults
            }
        }
    }, []);
    // Save settings to localStorage when they change (only after hydration)
    (0, _react.useEffect)(()=>{
        if (isHydrated && typeof window !== 'undefined') {
            try {
                localStorage.setItem('globalGameSettings', JSON.stringify(settings));
            } catch (error) {
                _logger.logger.error('Error saving settings to localStorage:', error);
            }
        }
    }, [
        settings,
        isHydrated
    ]);
    // Update specific settings
    const updateSettings = (newSettings)=>{
        setSettings((prev)=>{
            // Handle nested objects carefully
            const updated = {
                ...prev,
                ...newSettings
            };
            // Ensure numberRange is properly updated if provided
            if (newSettings.numberRange) {
                updated.numberRange = {
                    ...prev.numberRange,
                    ...newSettings.numberRange
                };
            }
            // Ensure mathRange is properly updated if provided
            if (newSettings.mathRange) {
                updated.mathRange = {
                    ...prev.mathRange,
                    ...newSettings.mathRange
                };
            }
            // Ensure mathOperations is properly updated if provided
            if (newSettings.mathOperations) {
                updated.mathOperations = {
                    ...prev.mathOperations,
                    ...newSettings.mathOperations
                };
            }
            return updated;
        });
    };
    // Helper for updating number range
    const updateNumberRange = (min, max)=>{
        setSettings((prev)=>({
                ...prev,
                numberRange: {
                    min,
                    max
                }
            }));
    };
    // Helper for updating math range
    const updateMathRange = (min, max)=>{
        setSettings((prev)=>({
                ...prev,
                mathRange: {
                    min,
                    max
                }
            }));
    };
    // Reset to defaults
    const resetSettings = ()=>{
        setSettings(defaultSettings);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(SettingsContext.Provider, {
        value: {
            settings,
            updateSettings,
            updateNumberRange,
            updateMathRange,
            resetSettings
        },
        children: children
    });
}
function useSettings() {
    const context = (0, _react.useContext)(SettingsContext);
    if (context === undefined) {
        throw new Error('useSettings must be used within a SettingsProvider');
    }
    return context;
}

//# sourceMappingURL=data:application/json;base64,