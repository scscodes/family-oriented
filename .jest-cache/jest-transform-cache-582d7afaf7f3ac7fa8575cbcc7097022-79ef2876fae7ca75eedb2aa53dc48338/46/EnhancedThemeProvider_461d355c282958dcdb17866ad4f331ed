a183e94f9feece517b3885c8998784c8
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    EnhancedThemeProvider: function() {
        return EnhancedThemeProvider;
    },
    useEnhancedTheme: function() {
        return useEnhancedTheme;
    },
    useHeadingColors: function() {
        return useHeadingColors;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _style = /*#__PURE__*/ _interop_require_default(require("styled-jsx/style"));
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _material = require("@mui/material");
const _theme = require("./theme");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const EnhancedThemeContext = /*#__PURE__*/ (0, _react.createContext)(undefined);
function EnhancedThemeProvider({ children }) {
    const [currentTheme, setCurrentTheme] = (0, _react.useState)('purple');
    const [muiTheme, setMuiTheme] = (0, _react.useState)(()=>(0, _theme.createEnhancedTheme)('purple'));
    const [isHydrated, setIsHydrated] = (0, _react.useState)(false);
    // Load theme from localStorage after hydration
    (0, _react.useEffect)(()=>{
        setIsHydrated(true);
        const savedTheme = localStorage.getItem('selectedTheme');
        if (savedTheme && _theme.themeVariants[savedTheme]) {
            setCurrentTheme(savedTheme);
            setMuiTheme((0, _theme.createEnhancedTheme)(savedTheme));
        }
    }, []);
    // Save theme to localStorage and update MUI theme when changed
    const setTheme = (theme)=>{
        setCurrentTheme(theme);
        setMuiTheme((0, _theme.createEnhancedTheme)(theme));
        if (isHydrated) {
            localStorage.setItem('selectedTheme', theme);
        }
    };
    const contextValue = {
        currentTheme,
        setTheme,
        themeConfig: _theme.themeVariants[currentTheme],
        availableThemes: _theme.themeVariants,
        isHydrated
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(EnhancedThemeContext.Provider, {
        value: contextValue,
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.ThemeProvider, {
            theme: muiTheme,
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.CssBaseline, {}),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_style.default, {
                    id: "b957d6fa25a36b3",
                    dynamic: [
                        _theme.rubik.style.fontFamily,
                        _theme.varelaRound.style.fontFamily,
                        _theme.nunito.style.fontFamily
                    ],
                    children: `:root{--rubik-font:${_theme.rubik.style.fontFamily};--varela-round-font:${_theme.varelaRound.style.fontFamily};--nunito-font:${_theme.nunito.style.fontFamily}}body{background:-webkit-linear-gradient(top left,#f8f9fa,#eef1f8);background:-moz-linear-gradient(top left,#f8f9fa,#eef1f8);background:-o-linear-gradient(top left,#f8f9fa,#eef1f8);background:linear-gradient(to bottom right,#f8f9fa,#eef1f8);min-height:100vh}*:focus-visible{outline:2px solid rgba(46,196,182,.6);outline-offset:2px}@media(max-width:768px){button,.MuiIconButton-root,.MuiChip-root{min-height:44px;min-width:44px}}`
                }),
                children
            ]
        })
    });
}
function useEnhancedTheme() {
    const context = (0, _react.useContext)(EnhancedThemeContext);
    if (context === undefined) {
        throw new Error('useEnhancedTheme must be used within an EnhancedThemeProvider');
    }
    return context;
}
function useHeadingColors() {
    const context = (0, _react.useContext)(EnhancedThemeContext);
    if (context === undefined) {
        throw new Error('useHeadingColors must be used within an EnhancedThemeProvider');
    }
    // Access heading colors from MUI theme palette
    return context.themeConfig;
}

//# sourceMappingURL=data:application/json;base64,