34c8614909c52dd60b106902c66b4ea0
/**
 * Enhanced useGameAnalytics Hook Tests
 * Updated to use new testing standards with timeout protection and safety measures
 */ "use strict";
jest.mock('@/utils/analyticsService');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _useGameAnalytics = require("../useGameAnalytics");
const _analyticsService = require("../../utils/analyticsService");
const _SettingsContext = require("../../context/SettingsContext");
// Test timeout constants
const TEST_TIMEOUTS = {
    FAST: 2000,
    MEDIUM: 5000,
    SLOW: 8000
};
// Test data constants
const MOCK_DATA = {
    avatarId: '00000000-0000-0000-0000-000000000004',
    gameType: 'numbers',
    sessionId: 'session-123',
    recommendations: [
        {
            gameId: 'letters',
            reason: 'Try letters next!',
            priority: 8,
            estimatedDifficulty: 'beginner',
            learningObjectives: [],
            prerequisitesMet: true
        }
    ],
    metrics: {
        totalGamesPlayed: 1,
        averageSessionDuration: 60,
        overallCompletionRate: 1,
        skillLevelDistribution: {
            beginner: 1
        },
        subjectPreferences: {
            Mathematics: 1
        },
        learningVelocity: 1,
        engagementScore: 80
    }
};
// Type the mocked service
const mockAnalyticsService = _analyticsService.analyticsService;
beforeEach(()=>{
    jest.clearAllMocks();
    // Setup default successful mock implementations
    mockAnalyticsService.startGameSession.mockResolvedValue(MOCK_DATA.sessionId);
    mockAnalyticsService.trackEvent.mockResolvedValue(undefined);
    mockAnalyticsService.completeGameSession.mockResolvedValue(undefined);
    mockAnalyticsService.getLearningPathRecommendations.mockResolvedValue(MOCK_DATA.recommendations);
    mockAnalyticsService.getPerformanceMetrics.mockResolvedValue(MOCK_DATA.metrics);
});
// Cleanup after each test
afterEach(()=>{
    jest.resetAllMocks();
});
describe('useGameAnalytics - Enhanced Tests', ()=>{
    const wrapper = ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_SettingsContext.SettingsProvider, {
            children: children
        });
    describe('Session Management', ()=>{
        it('should start a session with timeout protection', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useGameAnalytics.useGameAnalytics)({
                    gameType: MOCK_DATA.gameType,
                    avatarId: MOCK_DATA.avatarId,
                    autoTrack: false
                }), {
                wrapper
            });
            // Start session with timeout protection using real timer
            await (0, _react.act)(async ()=>{
                const startPromise = result.current.startSession();
                // Use real timer for timeout to avoid fake timer conflicts
                const timeoutPromise = new Promise((_, reject)=>{
                    const originalSetTimeout = globalThis.setTimeout;
                    originalSetTimeout(()=>reject(new Error('Session start timeout')), TEST_TIMEOUTS.FAST);
                });
                await Promise.race([
                    startPromise,
                    timeoutPromise
                ]);
            });
            expect(mockAnalyticsService.startGameSession).toHaveBeenCalledWith(MOCK_DATA.avatarId, MOCK_DATA.gameType, expect.any(Object), undefined);
            expect(result.current.sessionId).toBe(MOCK_DATA.sessionId);
        }, TEST_TIMEOUTS.MEDIUM);
        it('should handle session start failures gracefully', async ()=>{
            const testError = new Error('Session start failed');
            mockAnalyticsService.startGameSession.mockRejectedValue(testError);
            const { result } = (0, _react.renderHook)(()=>(0, _useGameAnalytics.useGameAnalytics)({
                    gameType: MOCK_DATA.gameType,
                    avatarId: MOCK_DATA.avatarId,
                    autoTrack: false
                }), {
                wrapper
            });
            // Capture console errors during test
            const consoleSpy = jest.spyOn(console, 'error').mockImplementation(()=>{});
            await (0, _react.act)(async ()=>{
                try {
                    await result.current.startSession();
                } catch  {
                // Expected to fail
                }
            });
            expect(result.current.sessionId).toBeNull();
            expect(result.current.isTracking).toBe(false);
            consoleSpy.mockRestore();
        }, TEST_TIMEOUTS.FAST);
    });
    describe('Event Tracking', ()=>{
        it('should track question attempts with validation', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useGameAnalytics.useGameAnalytics)({
                    gameType: MOCK_DATA.gameType,
                    avatarId: MOCK_DATA.avatarId,
                    autoTrack: false
                }), {
                wrapper
            });
            await (0, _react.act)(async ()=>{
                await result.current.startSession();
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.sessionId).toBe(MOCK_DATA.sessionId);
            }, {
                timeout: TEST_TIMEOUTS.FAST
            });
            await (0, _react.act)(async ()=>{
                await result.current.trackQuestionAttempt(true, {
                    questionIndex: 0,
                    responseTime: 1500
                });
            });
            expect(mockAnalyticsService.trackEvent).toHaveBeenCalledWith(MOCK_DATA.sessionId, MOCK_DATA.avatarId, 'question_answer', expect.objectContaining({
                correct: true,
                questionIndex: 0,
                responseTime: 1500
            }));
        }, TEST_TIMEOUTS.MEDIUM);
    });
    describe('Session Completion', ()=>{
        it('should complete session and load analytics data', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useGameAnalytics.useGameAnalytics)({
                    gameType: MOCK_DATA.gameType,
                    avatarId: MOCK_DATA.avatarId,
                    autoTrack: false
                }), {
                wrapper
            });
            await (0, _react.act)(async ()=>{
                await result.current.startSession();
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.isTracking).toBe(true);
            }, {
                timeout: TEST_TIMEOUTS.FAST
            });
            await (0, _react.act)(async ()=>{
                await result.current.completeSession(90);
            });
            expect(mockAnalyticsService.completeGameSession).toHaveBeenCalledWith(MOCK_DATA.sessionId, 90, expect.any(Number), expect.any(Number));
            await (0, _react.waitFor)(()=>{
                expect(result.current.recommendations).toEqual(MOCK_DATA.recommendations);
                expect(result.current.performanceMetrics).toEqual(MOCK_DATA.metrics);
            }, {
                timeout: TEST_TIMEOUTS.MEDIUM
            });
        }, TEST_TIMEOUTS.SLOW);
    });
});

//# sourceMappingURL=data:application/json;base64,