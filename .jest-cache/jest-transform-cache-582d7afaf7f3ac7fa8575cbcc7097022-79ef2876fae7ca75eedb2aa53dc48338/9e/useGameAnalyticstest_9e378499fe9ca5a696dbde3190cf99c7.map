{"version":3,"sources":["C:\\repos\\family-oriented\\src\\hooks\\__tests__\\useGameAnalytics.test.tsx"],"sourcesContent":["/**\r\n * Enhanced useGameAnalytics Hook Tests\r\n * Updated to use new testing standards with timeout protection and safety measures\r\n */\r\n\r\nimport { renderHook, act, waitFor } from '@testing-library/react';\r\nimport { useGameAnalytics } from '../useGameAnalytics';\r\nimport { analyticsService } from '@/utils/analyticsService';\r\nimport { SettingsProvider } from '@/context/SettingsContext';\r\n\r\njest.mock('@/utils/analyticsService');\r\n\r\n// Test timeout constants\r\nconst TEST_TIMEOUTS = {\r\n  FAST: 2000,\r\n  MEDIUM: 5000,\r\n  SLOW: 8000\r\n} as const;\r\n\r\n// Test data constants\r\nconst MOCK_DATA = {\r\n  avatarId: '00000000-0000-0000-0000-000000000004',\r\n  gameType: 'numbers' as const,\r\n  sessionId: 'session-123',\r\n  recommendations: [\r\n    { gameId: 'letters', reason: 'Try letters next!', priority: 8, estimatedDifficulty: 'beginner', learningObjectives: [], prerequisitesMet: true }\r\n  ],\r\n  metrics: {\r\n    totalGamesPlayed: 1,\r\n    averageSessionDuration: 60,\r\n    overallCompletionRate: 1,\r\n    skillLevelDistribution: { beginner: 1 },\r\n    subjectPreferences: { Mathematics: 1 },\r\n    learningVelocity: 1,\r\n    engagementScore: 80\r\n  }\r\n} as const;\r\n\r\n// Type the mocked service\r\nconst mockAnalyticsService = analyticsService as jest.Mocked<typeof analyticsService>;\r\n\r\nbeforeEach(() => {\r\n  jest.clearAllMocks();\r\n  \r\n  // Setup default successful mock implementations\r\n  mockAnalyticsService.startGameSession.mockResolvedValue(MOCK_DATA.sessionId);\r\n  mockAnalyticsService.trackEvent.mockResolvedValue(undefined);\r\n  mockAnalyticsService.completeGameSession.mockResolvedValue(undefined);\r\n  mockAnalyticsService.getLearningPathRecommendations.mockResolvedValue(MOCK_DATA.recommendations);\r\n  mockAnalyticsService.getPerformanceMetrics.mockResolvedValue(MOCK_DATA.metrics);\r\n});\r\n\r\n// Cleanup after each test\r\nafterEach(() => {\r\n  jest.resetAllMocks();\r\n});\r\n\r\ndescribe('useGameAnalytics - Enhanced Tests', () => {\r\n  const wrapper = ({ children }: { children: React.ReactNode }) => (\r\n    <SettingsProvider>{children}</SettingsProvider>\r\n  );\r\n\r\n  describe('Session Management', () => {\r\n    it('should start a session with timeout protection', async () => {\r\n      const { result } = renderHook(() => useGameAnalytics({\r\n        gameType: MOCK_DATA.gameType,\r\n        avatarId: MOCK_DATA.avatarId,\r\n        autoTrack: false\r\n      }), { wrapper });\r\n\r\n      // Start session with timeout protection using real timer\r\n      await act(async () => {\r\n        const startPromise = result.current.startSession();\r\n        \r\n        // Use real timer for timeout to avoid fake timer conflicts\r\n        const timeoutPromise = new Promise<never>((_, reject) => {\r\n          const originalSetTimeout = globalThis.setTimeout;\r\n          originalSetTimeout(() => reject(new Error('Session start timeout')), TEST_TIMEOUTS.FAST);\r\n        });\r\n        \r\n        await Promise.race([startPromise, timeoutPromise]);\r\n      });\r\n\r\n      expect(mockAnalyticsService.startGameSession).toHaveBeenCalledWith(\r\n        MOCK_DATA.avatarId,\r\n        MOCK_DATA.gameType,\r\n        expect.any(Object),\r\n        undefined\r\n      );\r\n      expect(result.current.sessionId).toBe(MOCK_DATA.sessionId);\r\n    }, TEST_TIMEOUTS.MEDIUM);\r\n\r\n    it('should handle session start failures gracefully', async () => {\r\n      const testError = new Error('Session start failed');\r\n      mockAnalyticsService.startGameSession.mockRejectedValue(testError);\r\n\r\n      const { result } = renderHook(() => useGameAnalytics({\r\n        gameType: MOCK_DATA.gameType,\r\n        avatarId: MOCK_DATA.avatarId,\r\n        autoTrack: false\r\n      }), { wrapper });\r\n\r\n      // Capture console errors during test\r\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\r\n\r\n      await act(async () => {\r\n        try {\r\n          await result.current.startSession();\r\n        } catch {\r\n          // Expected to fail\r\n        }\r\n      });\r\n\r\n      expect(result.current.sessionId).toBeNull();\r\n      expect(result.current.isTracking).toBe(false);\r\n      consoleSpy.mockRestore();\r\n    }, TEST_TIMEOUTS.FAST);\r\n  });\r\n\r\n  describe('Event Tracking', () => {\r\n    it('should track question attempts with validation', async () => {\r\n      const { result } = renderHook(() => useGameAnalytics({\r\n        gameType: MOCK_DATA.gameType,\r\n        avatarId: MOCK_DATA.avatarId,\r\n        autoTrack: false\r\n      }), { wrapper });\r\n\r\n      await act(async () => {\r\n        await result.current.startSession();\r\n      });\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.sessionId).toBe(MOCK_DATA.sessionId);\r\n      }, { timeout: TEST_TIMEOUTS.FAST });\r\n\r\n      await act(async () => {\r\n        await result.current.trackQuestionAttempt(true, { \r\n          questionIndex: 0,\r\n          responseTime: 1500\r\n        });\r\n      });\r\n\r\n      expect(mockAnalyticsService.trackEvent).toHaveBeenCalledWith(\r\n        MOCK_DATA.sessionId,\r\n        MOCK_DATA.avatarId,\r\n        'question_answer',\r\n        expect.objectContaining({ \r\n          correct: true, \r\n          questionIndex: 0,\r\n          responseTime: 1500\r\n        })\r\n      );\r\n    }, TEST_TIMEOUTS.MEDIUM);\r\n  });\r\n\r\n  describe('Session Completion', () => {\r\n    it('should complete session and load analytics data', async () => {\r\n      const { result } = renderHook(() => useGameAnalytics({\r\n        gameType: MOCK_DATA.gameType,\r\n        avatarId: MOCK_DATA.avatarId,\r\n        autoTrack: false\r\n      }), { wrapper });\r\n\r\n      await act(async () => {\r\n        await result.current.startSession();\r\n      });\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.isTracking).toBe(true);\r\n      }, { timeout: TEST_TIMEOUTS.FAST });\r\n\r\n      await act(async () => {\r\n        await result.current.completeSession(90);\r\n      });\r\n\r\n      expect(mockAnalyticsService.completeGameSession).toHaveBeenCalledWith(\r\n        MOCK_DATA.sessionId,\r\n        90,\r\n        expect.any(Number),\r\n        expect.any(Number)\r\n      );\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.recommendations).toEqual(MOCK_DATA.recommendations);\r\n        expect(result.current.performanceMetrics).toEqual(MOCK_DATA.metrics);\r\n      }, { timeout: TEST_TIMEOUTS.MEDIUM });\r\n    }, TEST_TIMEOUTS.SLOW);\r\n  });\r\n}); "],"names":["jest","mock","TEST_TIMEOUTS","FAST","MEDIUM","SLOW","MOCK_DATA","avatarId","gameType","sessionId","recommendations","gameId","reason","priority","estimatedDifficulty","learningObjectives","prerequisitesMet","metrics","totalGamesPlayed","averageSessionDuration","overallCompletionRate","skillLevelDistribution","beginner","subjectPreferences","Mathematics","learningVelocity","engagementScore","mockAnalyticsService","analyticsService","beforeEach","clearAllMocks","startGameSession","mockResolvedValue","trackEvent","undefined","completeGameSession","getLearningPathRecommendations","getPerformanceMetrics","afterEach","resetAllMocks","describe","wrapper","children","SettingsProvider","it","result","renderHook","useGameAnalytics","autoTrack","act","startPromise","current","startSession","timeoutPromise","Promise","_","reject","originalSetTimeout","globalThis","setTimeout","Error","race","expect","toHaveBeenCalledWith","any","Object","toBe","testError","mockRejectedValue","consoleSpy","spyOn","console","mockImplementation","toBeNull","isTracking","mockRestore","waitFor","timeout","trackQuestionAttempt","questionIndex","responseTime","objectContaining","correct","completeSession","Number","toEqual","performanceMetrics"],"mappings":"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"}