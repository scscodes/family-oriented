{"version":3,"sources":["C:\\repos\\family-oriented\\src\\utils\\subscriptionService.ts"],"sourcesContent":["/**\r\n * Subscription Service - Tier-based Feature Gating and Usage Limits\r\n * Provides centralized subscription tier enforcement across the application\r\n * \r\n * Enhanced with:\r\n * - Comprehensive feature gating for all app features\r\n * - Smart upgrade recommendations\r\n * - Demo mode support with proper tier simulation\r\n * - Real-time usage tracking and enforcement\r\n */\r\n\r\nimport { logger } from './logger';\r\nimport type { SubscriptionPlan } from '@/lib/supabase/database.types';\r\n\r\n// Subscription tier definitions\r\nexport type SubscriptionTier = 'personal' | 'professional' | 'enterprise';\r\n\r\n// Feature definitions that can be gated by subscription tier\r\nexport type SubscriptionFeature = \r\n  | 'analytics' \r\n  | 'user_management' \r\n  | 'premium_themes' \r\n  | 'custom_branding'\r\n  | 'collections'\r\n  | 'scheduling'\r\n  | 'bulk_operations'\r\n  | 'api_access'\r\n  | 'export_data'\r\n  | 'advanced_reporting';\r\n\r\n// Usage limit types\r\nexport type UsageLimit = \r\n  | 'avatars'\r\n  | 'collections_per_avatar'\r\n  | 'sessions_per_month'\r\n  | 'data_retention_months';\r\n\r\n/**\r\n * Default tier configurations\r\n */\r\nexport const TIER_CONFIGURATIONS: Record<SubscriptionTier, {\r\n  features: Record<SubscriptionFeature, boolean>;\r\n  limits: Record<UsageLimit, number>;\r\n  displayName: string;\r\n  description: string;\r\n  basePrice: number;\r\n}> = {\r\n  personal: {\r\n    displayName: 'Personal Plan',\r\n    description: 'Perfect for families with up to 5 children',\r\n    basePrice: 9.99,\r\n    features: {\r\n      analytics: true,\r\n      user_management: false,\r\n      premium_themes: false,\r\n      custom_branding: false,\r\n      collections: true,\r\n      scheduling: false,\r\n      bulk_operations: false,\r\n      api_access: false,\r\n      export_data: false,\r\n      advanced_reporting: false\r\n    },\r\n    limits: {\r\n      avatars: 5,\r\n      collections_per_avatar: 10,\r\n      sessions_per_month: 1000,\r\n      data_retention_months: 12\r\n    }\r\n  },\r\n  professional: {\r\n    displayName: 'Professional Plan',\r\n    description: 'For educators and small organizations with up to 30 children',\r\n    basePrice: 19.99,\r\n    features: {\r\n      analytics: true,\r\n      user_management: true,\r\n      premium_themes: true,\r\n      custom_branding: false,\r\n      collections: true,\r\n      scheduling: true,\r\n      bulk_operations: true,\r\n      api_access: false,\r\n      export_data: true,\r\n      advanced_reporting: true\r\n    },\r\n    limits: {\r\n      avatars: 30,\r\n      collections_per_avatar: 25,\r\n      sessions_per_month: 5000,\r\n      data_retention_months: 24\r\n    }\r\n  },\r\n  enterprise: {\r\n    displayName: 'Enterprise Plan',\r\n    description: 'For large organizations with unlimited children and full customization',\r\n    basePrice: 49.99,\r\n    features: {\r\n      analytics: true,\r\n      user_management: true,\r\n      premium_themes: true,\r\n      custom_branding: true,\r\n      collections: true,\r\n      scheduling: true,\r\n      bulk_operations: true,\r\n      api_access: true,\r\n      export_data: true,\r\n      advanced_reporting: true\r\n    },\r\n    limits: {\r\n      avatars: 10000, // Effectively unlimited\r\n      collections_per_avatar: 100,\r\n      sessions_per_month: 50000,\r\n      data_retention_months: 60\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Usage tracking and enforcement\r\n */\r\nexport interface UsageData {\r\n  avatarsCount: number;\r\n  collectionsCount: number;\r\n  sessionsThisMonth: number;\r\n  dataRetentionMonths: number;\r\n}\r\n\r\nexport interface FeatureGateResult {\r\n  allowed: boolean;\r\n  reason?: string;\r\n  upgradeRequired?: SubscriptionTier;\r\n  currentUsage?: number;\r\n  limit?: number;\r\n}\r\n\r\n/**\r\n * Subscription Service Class\r\n */\r\nexport class SubscriptionService {\r\n  \r\n  /**\r\n   * Check if a feature is available for the given subscription plan\r\n   * Enhanced with better error handling and logging\r\n   */\r\n  static canAccessFeature(\r\n    subscriptionPlan: SubscriptionPlan | null, \r\n    feature: SubscriptionFeature\r\n  ): FeatureGateResult {\r\n    // Handle no subscription plan (demo mode or logged out)\r\n    if (!subscriptionPlan) {\r\n      logger.warn('Feature access check without subscription plan:', feature);\r\n      return {\r\n        allowed: false,\r\n        reason: 'No active subscription plan',\r\n        upgradeRequired: 'personal'\r\n      };\r\n    }\r\n\r\n    const tier = subscriptionPlan.tier as SubscriptionTier;\r\n    const tierConfig = TIER_CONFIGURATIONS[tier];\r\n    \r\n    // Validate tier configuration\r\n    if (!tierConfig) {\r\n      logger.error('Unknown subscription tier during feature check:', { tier, feature });\r\n      return {\r\n        allowed: false,\r\n        reason: 'Invalid subscription tier configuration'\r\n      };\r\n    }\r\n\r\n    // Check feature inclusion from database plan or fallback to tier defaults\r\n    const featuresIncluded = subscriptionPlan.features_included || {};\r\n    const hasFeature = featuresIncluded[feature] ?? tierConfig.features[feature];\r\n\r\n    if (hasFeature) {\r\n      logger.debug('Feature access granted:', { tier, feature });\r\n      return { allowed: true };\r\n    }\r\n\r\n    // Determine minimum tier required for this feature\r\n    const upgradeRequired = this.getMinimumTierForFeature(feature);\r\n    \r\n    logger.info('Feature access denied - upgrade required:', { \r\n      currentTier: tier, \r\n      feature, \r\n      upgradeRequired \r\n    });\r\n\r\n    return {\r\n      allowed: false,\r\n      reason: `${feature.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())} requires ${TIER_CONFIGURATIONS[upgradeRequired].displayName}`,\r\n      upgradeRequired\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Check usage against limits\r\n   */\r\n  static checkUsageLimit(\r\n    subscriptionPlan: SubscriptionPlan | null,\r\n    limitType: UsageLimit,\r\n    currentUsage: number\r\n  ): FeatureGateResult {\r\n    if (!subscriptionPlan) {\r\n      return {\r\n        allowed: false,\r\n        reason: 'No active subscription plan',\r\n        upgradeRequired: 'personal'\r\n      };\r\n    }\r\n\r\n    const tier = subscriptionPlan.tier as SubscriptionTier;\r\n    const tierConfig = TIER_CONFIGURATIONS[tier];\r\n    \r\n    if (!tierConfig) {\r\n      return {\r\n        allowed: false,\r\n        reason: 'Invalid subscription tier'\r\n      };\r\n    }\r\n\r\n    // Get limit from database plan or fallback to defaults\r\n    const limitKey = limitType === 'avatars' ? 'avatar_limit' : `${limitType}_limit`;\r\n    const limit = subscriptionPlan[limitKey] ?? tierConfig.limits[limitType];\r\n\r\n    if (currentUsage < limit) {\r\n      return { \r\n        allowed: true, \r\n        currentUsage, \r\n        limit \r\n      };\r\n    }\r\n\r\n    // Usage exceeded - suggest upgrade\r\n    const upgradeRequired = this.getNextTierWithHigherLimit(tier, limitType, currentUsage);\r\n\r\n    return {\r\n      allowed: false,\r\n      reason: `${limitType} limit exceeded (${currentUsage}/${limit})`,\r\n      upgradeRequired,\r\n      currentUsage,\r\n      limit\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Avatar creation enforcement\r\n   */\r\n  static canCreateAvatar(\r\n    subscriptionPlan: SubscriptionPlan | null,\r\n    currentAvatarsCount: number\r\n  ): FeatureGateResult {\r\n    return this.checkUsageLimit(subscriptionPlan, 'avatars', currentAvatarsCount);\r\n  }\r\n\r\n  /**\r\n   * Collection creation enforcement\r\n   */\r\n  static canCreateCollection(\r\n    subscriptionPlan: SubscriptionPlan | null,\r\n    currentCollectionsCount: number\r\n  ): FeatureGateResult {\r\n    return this.checkUsageLimit(subscriptionPlan, 'collections_per_avatar', currentCollectionsCount + 1);\r\n  }\r\n\r\n  /**\r\n   * Get all available features for a subscription plan\r\n   */\r\n  static getAvailableFeatures(subscriptionPlan: SubscriptionPlan | null): SubscriptionFeature[] {\r\n    if (!subscriptionPlan) return [];\r\n\r\n    const tier = subscriptionPlan.tier as SubscriptionTier;\r\n    const tierConfig = TIER_CONFIGURATIONS[tier];\r\n    const featuresIncluded = subscriptionPlan.features_included || {};\r\n\r\n    const availableFeatures: SubscriptionFeature[] = [];\r\n    \r\n    for (const feature of Object.keys(tierConfig.features) as SubscriptionFeature[]) {\r\n      const hasFeature = featuresIncluded[feature] ?? tierConfig.features[feature];\r\n      if (hasFeature) {\r\n        availableFeatures.push(feature);\r\n      }\r\n    }\r\n\r\n    return availableFeatures;\r\n  }\r\n\r\n  /**\r\n   * Get usage summary for a subscription plan\r\n   */\r\n  static getUsageSummary(\r\n    subscriptionPlan: SubscriptionPlan | null,\r\n    usageData: UsageData\r\n  ): Record<UsageLimit, FeatureGateResult> {\r\n    const summary: Record<UsageLimit, FeatureGateResult> = {} as Record<UsageLimit, FeatureGateResult>;\r\n\r\n    for (const limitType of Object.keys(TIER_CONFIGURATIONS.personal.limits) as UsageLimit[]) {\r\n      const currentUsage = this.getCurrentUsageValue(usageData, limitType);\r\n      summary[limitType] = this.checkUsageLimit(subscriptionPlan, limitType, currentUsage);\r\n    }\r\n\r\n    return summary;\r\n  }\r\n\r\n  /**\r\n   * Helper: Get minimum tier required for a feature\r\n   */\r\n  private static getMinimumTierForFeature(feature: SubscriptionFeature): SubscriptionTier {\r\n    const tiers: SubscriptionTier[] = ['personal', 'professional', 'enterprise'];\r\n    \r\n    for (const tier of tiers) {\r\n      if (TIER_CONFIGURATIONS[tier].features[feature]) {\r\n        return tier;\r\n      }\r\n    }\r\n    \r\n    return 'enterprise'; // Fallback to highest tier\r\n  }\r\n\r\n  /**\r\n   * Helper: Get next tier with higher limit\r\n   */\r\n  private static getNextTierWithHigherLimit(\r\n    currentTier: SubscriptionTier, \r\n    limitType: UsageLimit, \r\n    requiredUsage: number\r\n  ): SubscriptionTier {\r\n    const tiers: SubscriptionTier[] = ['personal', 'professional', 'enterprise'];\r\n    const currentIndex = tiers.indexOf(currentTier);\r\n    \r\n    for (let i = currentIndex + 1; i < tiers.length; i++) {\r\n      const tier = tiers[i];\r\n      if (TIER_CONFIGURATIONS[tier].limits[limitType] >= requiredUsage) {\r\n        return tier;\r\n      }\r\n    }\r\n    \r\n    return 'enterprise'; // Fallback to highest tier\r\n  }\r\n\r\n  /**\r\n   * Helper: Extract current usage value from usage data\r\n   */\r\n  private static getCurrentUsageValue(usageData: UsageData, limitType: UsageLimit): number {\r\n    switch (limitType) {\r\n      case 'avatars':\r\n        return usageData.avatarsCount;\r\n      case 'collections_per_avatar':\r\n        return usageData.collectionsCount;\r\n      case 'sessions_per_month':\r\n        return usageData.sessionsThisMonth;\r\n      case 'data_retention_months':\r\n        return usageData.dataRetentionMonths;\r\n      default:\r\n        return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Format feature gate result for UI display\r\n   */\r\n  static formatFeatureGateMessage(result: FeatureGateResult): string {\r\n    if (result.allowed) {\r\n      return 'Feature available';\r\n    }\r\n\r\n    if (result.upgradeRequired) {\r\n      const tierName = TIER_CONFIGURATIONS[result.upgradeRequired].displayName;\r\n      return `${result.reason}. Upgrade to ${tierName} to unlock this feature.`;\r\n    }\r\n\r\n    return result.reason || 'Feature not available';\r\n  }\r\n\r\n  /**\r\n   * Get plan comparison data for upgrade UI\r\n   */\r\n  static getPlanComparison(): Record<SubscriptionTier, {\r\n    displayName: string;\r\n    description: string;\r\n    features: string[];\r\n    limits: string[];\r\n    price: number;\r\n  }> {\r\n    const comparison: Record<SubscriptionTier, {\r\n      displayName: string;\r\n      description: string;\r\n      features: string[];\r\n      limits: string[];\r\n      price: number;\r\n    }> = {} as Record<SubscriptionTier, {\r\n      displayName: string;\r\n      description: string;\r\n      features: string[];\r\n      limits: string[];\r\n      price: number;\r\n    }>;\r\n\r\n    for (const [tier, config] of Object.entries(TIER_CONFIGURATIONS)) {\r\n      const enabledFeatures = Object.entries(config.features)\r\n        .filter(([, enabled]) => enabled)\r\n        .map(([featureName]) => featureName);\r\n\r\n      const limitsDisplay = Object.entries(config.limits)\r\n        .map(([limit, value]) => `${limit}: ${value === 10000 ? 'Unlimited' : value}`);\r\n\r\n      comparison[tier as SubscriptionTier] = {\r\n        displayName: config.displayName,\r\n        description: config.description,\r\n        price: config.basePrice,\r\n        features: enabledFeatures,\r\n        limits: limitsDisplay\r\n      };\r\n    }\r\n\r\n    return comparison;\r\n  }\r\n\r\n  /**\r\n   * Analyze tier transition impact\r\n   */\r\n  static analyzeTierTransition(\r\n    currentTier: SubscriptionTier,\r\n    targetTier: SubscriptionTier,\r\n    currentUsage: UsageData\r\n  ): {\r\n    isUpgrade: boolean;\r\n    isDowngrade: boolean;\r\n    featureChanges: {\r\n      gained: SubscriptionFeature[];\r\n      lost: SubscriptionFeature[];\r\n    };\r\n    usageImpact: {\r\n      overLimitItems: Array<{\r\n        type: UsageLimit;\r\n        current: number;\r\n        newLimit: number;\r\n        impact: string;\r\n      }>;\r\n    };\r\n    costImpact: {\r\n      currentCost: number;\r\n      newCost: number;\r\n      monthlyDifference: number;\r\n      prorationAmount: number;\r\n      prorationDescription: string;\r\n    };\r\n    warnings: string[];\r\n    canTransition: boolean;\r\n  } {\r\n    const currentConfig = TIER_CONFIGURATIONS[currentTier];\r\n    const targetConfig = TIER_CONFIGURATIONS[targetTier];\r\n    \r\n    // Safety check for invalid tiers\r\n    if (!currentConfig || !targetConfig) {\r\n      return {\r\n        isUpgrade: false,\r\n        isDowngrade: false,\r\n        featureChanges: { gained: [], lost: [] },\r\n        usageImpact: { overLimitItems: [] },\r\n        costImpact: {\r\n          currentCost: 0,\r\n          newCost: 0,\r\n          monthlyDifference: 0,\r\n          prorationAmount: 0,\r\n          prorationDescription: 'Invalid tier configuration'\r\n        },\r\n        warnings: ['Invalid tier configuration'],\r\n        canTransition: false\r\n      };\r\n    }\r\n    \r\n    const tierOrder = { personal: 1, professional: 2, enterprise: 3 };\r\n    \r\n    const isUpgrade = tierOrder[targetTier] > tierOrder[currentTier];\r\n    const isDowngrade = tierOrder[targetTier] < tierOrder[currentTier];\r\n\r\n    // Analyze feature changes\r\n    const gainedFeatures: SubscriptionFeature[] = [];\r\n    const lostFeatures: SubscriptionFeature[] = [];\r\n\r\n    Object.entries(targetConfig.features).forEach(([featureName, enabled]) => {\r\n      const currentlyEnabled = currentConfig.features[featureName as SubscriptionFeature];\r\n      if (enabled && !currentlyEnabled) {\r\n        gainedFeatures.push(featureName as SubscriptionFeature);\r\n      } else if (!enabled && currentlyEnabled) {\r\n        lostFeatures.push(featureName as SubscriptionFeature);\r\n      }\r\n    });\r\n\r\n    // Analyze usage impact\r\n    const overLimitItems: Array<{\r\n      type: UsageLimit;\r\n      current: number;\r\n      newLimit: number;\r\n      impact: string;\r\n    }> = [];\r\n    const warnings = [];\r\n\r\n    Object.entries(targetConfig.limits).forEach(([limitType, newLimit]) => {\r\n      const currentUsageValue = this.getCurrentUsageValue(currentUsage, limitType as UsageLimit);\r\n      \r\n      if (currentUsageValue > newLimit) {\r\n        const impact = this.getUsageLimitImpactMessage(limitType as UsageLimit, currentUsageValue, newLimit);\r\n        overLimitItems.push({\r\n          type: limitType as UsageLimit,\r\n          current: currentUsageValue,\r\n          newLimit,\r\n          impact\r\n        });\r\n        warnings.push(`${limitType}: ${impact}`);\r\n      }\r\n    });\r\n\r\n    // Add feature-specific warnings\r\n    if (lostFeatures.length > 0) {\r\n      warnings.push(`You will lose access to: ${lostFeatures.join(', ')}`);\r\n    }\r\n\r\n    if (currentTier === 'enterprise' && targetTier !== 'enterprise') {\r\n      warnings.push('You will lose custom branding and advanced enterprise features');\r\n    }\r\n\r\n    // Calculate cost impact\r\n    const currentCost = currentConfig.basePrice || 0;\r\n    const newCost = targetConfig.basePrice || 0;\r\n    const monthlyDifference = newCost - currentCost;\r\n    const proration = this.calculateProration(currentCost, newCost);\r\n\r\n    const canTransition = overLimitItems.length === 0 || isUpgrade;\r\n\r\n    return {\r\n      isUpgrade,\r\n      isDowngrade,\r\n      featureChanges: {\r\n        gained: gainedFeatures,\r\n        lost: lostFeatures\r\n      },\r\n      usageImpact: {\r\n        overLimitItems\r\n      },\r\n      costImpact: {\r\n        currentCost,\r\n        newCost,\r\n        monthlyDifference,\r\n        prorationAmount: proration.prorationAmount,\r\n        prorationDescription: proration.description\r\n      },\r\n      warnings,\r\n      canTransition\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get available tier transitions\r\n   */\r\n  static getAvailableTransitions(currentTier: SubscriptionTier): {\r\n    upgrades: SubscriptionTier[];\r\n    downgrades: SubscriptionTier[];\r\n  } {\r\n    const allTiers: SubscriptionTier[] = ['personal', 'professional', 'enterprise'];\r\n    const tierOrder = { personal: 1, professional: 2, enterprise: 3 };\r\n    const currentOrder = tierOrder[currentTier];\r\n\r\n    return {\r\n      upgrades: allTiers.filter(tier => tierOrder[tier] > currentOrder),\r\n      downgrades: allTiers.filter(tier => tierOrder[tier] < currentOrder)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate proration amount for tier change\r\n   */\r\n  static calculateProration(\r\n    currentMonthlyPrice: number,\r\n    newMonthlyPrice: number,\r\n    daysPassed: number = new Date().getDate(),\r\n    daysInMonth: number = new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0).getDate()\r\n  ): {\r\n    prorationAmount: number;\r\n    description: string;\r\n  } {\r\n    const remainingDays = daysInMonth - daysPassed;\r\n    const dailyDifference = (newMonthlyPrice - currentMonthlyPrice) / daysInMonth;\r\n    const prorationAmount = Math.round(dailyDifference * remainingDays * 100) / 100;\r\n\r\n    const description = prorationAmount > 0 \r\n      ? `You'll be charged $${Math.abs(prorationAmount).toFixed(2)} for the remaining ${remainingDays} days of this billing cycle.`\r\n      : prorationAmount < 0\r\n      ? `You'll receive a credit of $${Math.abs(prorationAmount).toFixed(2)} for the remaining ${remainingDays} days.`\r\n      : 'No proration required.';\r\n\r\n    return {\r\n      prorationAmount,\r\n      description\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Helper: Get usage limit impact message\r\n   */\r\n  private static getUsageLimitImpactMessage(\r\n    limitType: UsageLimit,\r\n    currentUsage: number,\r\n    newLimit: number\r\n  ): string {\r\n    const excess = currentUsage - newLimit;\r\n    \r\n    switch (limitType) {\r\n      case 'avatars':\r\n        return `${excess} avatar(s) will need to be removed or archived`;\r\n      case 'collections_per_avatar':\r\n        return `Some collections may need to be removed or consolidated`;\r\n      case 'sessions_per_month':\r\n        return `Monthly session limit will be reduced from ${currentUsage} to ${newLimit}`;\r\n      case 'data_retention_months':\r\n        return `Data retention will be reduced from ${currentUsage} to ${newLimit} months`;\r\n      default:\r\n        return `Usage will be limited to ${newLimit} (currently ${currentUsage})`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate if a tier transition is safe\r\n   */\r\n  static validateTierTransition(\r\n    currentTier: SubscriptionTier,\r\n    targetTier: SubscriptionTier,\r\n    currentUsage: UsageData\r\n  ): {\r\n    valid: boolean;\r\n    reasons: string[];\r\n  } {\r\n    if (currentTier === targetTier) {\r\n      return {\r\n        valid: false,\r\n        reasons: ['Cannot transition to the same tier']\r\n      };\r\n    }\r\n\r\n    const analysis = this.analyzeTierTransition(currentTier, targetTier, currentUsage);\r\n    \r\n    if (!analysis.canTransition) {\r\n      return {\r\n        valid: false,\r\n        reasons: analysis.warnings\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      reasons: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Enhanced feature enforcement for specific app features\r\n   */\r\n  static canAccessDashboard(subscriptionPlan: SubscriptionPlan | null): FeatureGateResult {\r\n    return this.canAccessFeature(subscriptionPlan, 'analytics');\r\n  }\r\n\r\n  static canAccessUserManagement(subscriptionPlan: SubscriptionPlan | null): FeatureGateResult {\r\n    return this.canAccessFeature(subscriptionPlan, 'user_management');\r\n  }\r\n\r\n  static canAccessPremiumThemes(subscriptionPlan: SubscriptionPlan | null): FeatureGateResult {\r\n    return this.canAccessFeature(subscriptionPlan, 'premium_themes');\r\n  }\r\n\r\n  static canAccessAdvancedReporting(subscriptionPlan: SubscriptionPlan | null): FeatureGateResult {\r\n    return this.canAccessFeature(subscriptionPlan, 'advanced_reporting');\r\n  }\r\n\r\n  static canExportData(subscriptionPlan: SubscriptionPlan | null): FeatureGateResult {\r\n    return this.canAccessFeature(subscriptionPlan, 'export_data');\r\n  }\r\n\r\n  /**\r\n   * Bulk operations for feature checking (for UI components)\r\n   */\r\n  static checkMultipleFeatures(\r\n    subscriptionPlan: SubscriptionPlan | null,\r\n    features: SubscriptionFeature[]\r\n  ): Record<SubscriptionFeature, FeatureGateResult> {\r\n    const results: Record<string, FeatureGateResult> = {};\r\n    \r\n    features.forEach(feature => {\r\n      results[feature] = this.canAccessFeature(subscriptionPlan, feature);\r\n    });\r\n    \r\n    return results as Record<SubscriptionFeature, FeatureGateResult>;\r\n  }\r\n\r\n  /**\r\n   * Get features that are locked for the current tier (for upgrade prompts)\r\n   */\r\n  static getLockedFeatures(subscriptionPlan: SubscriptionPlan | null): SubscriptionFeature[] {\r\n    if (!subscriptionPlan) {\r\n      return Object.keys(TIER_CONFIGURATIONS.personal.features) as SubscriptionFeature[];\r\n    }\r\n\r\n    const tier = subscriptionPlan.tier as SubscriptionTier;\r\n    const tierConfig = TIER_CONFIGURATIONS[tier];\r\n    const featuresIncluded = subscriptionPlan.features_included || {};\r\n    \r\n    const lockedFeatures: SubscriptionFeature[] = [];\r\n    \r\n    // Check all possible features\r\n    const allFeatures = new Set<SubscriptionFeature>();\r\n    Object.values(TIER_CONFIGURATIONS).forEach(config => {\r\n      Object.keys(config.features).forEach(feature => {\r\n        allFeatures.add(feature as SubscriptionFeature);\r\n      });\r\n    });\r\n    \r\n    allFeatures.forEach(feature => {\r\n      const hasFeature = featuresIncluded[feature] ?? tierConfig?.features[feature] ?? false;\r\n      if (!hasFeature) {\r\n        lockedFeatures.push(feature);\r\n      }\r\n    });\r\n    \r\n    return lockedFeatures;\r\n  }\r\n\r\n  /**\r\n   * Smart upgrade recommendations based on usage patterns\r\n   */\r\n  static getSmartUpgradeRecommendation(\r\n    subscriptionPlan: SubscriptionPlan | null,\r\n    usageData: UsageData,\r\n    lockedFeaturesAccessed: SubscriptionFeature[] = []\r\n  ): {\r\n    recommended: boolean;\r\n    targetTier: SubscriptionTier;\r\n    reasons: string[];\r\n    benefits: string[];\r\n    urgency: 'low' | 'medium' | 'high';\r\n  } {\r\n    if (!subscriptionPlan) {\r\n      return {\r\n        recommended: true,\r\n        targetTier: 'personal',\r\n        reasons: ['No active subscription'],\r\n        benefits: ['Access to analytics', 'Create up to 5 children', 'Save collections'],\r\n        urgency: 'high'\r\n      };\r\n    }\r\n\r\n    const tier = subscriptionPlan.tier as SubscriptionTier;\r\n    const reasons: string[] = [];\r\n    const benefits: string[] = [];\r\n    let urgency: 'low' | 'medium' | 'high' = 'low';\r\n    let targetTier: SubscriptionTier = tier;\r\n\r\n    // Check usage against limits\r\n    const usageSummary = this.getUsageSummary(subscriptionPlan, usageData);\r\n    \r\n    Object.entries(usageSummary).forEach(([limitType, result]) => {\r\n      if (!result.allowed) {\r\n        reasons.push(`${limitType} limit exceeded`);\r\n        urgency = 'high';\r\n        targetTier = result.upgradeRequired || 'professional';\r\n      } else if (result.currentUsage && result.limit && (result.currentUsage / result.limit) > 0.8) {\r\n        reasons.push(`Approaching ${limitType} limit`);\r\n        urgency = urgency === 'low' ? 'medium' : urgency;\r\n      }\r\n    });\r\n\r\n    // Check feature access patterns\r\n    if (lockedFeaturesAccessed.length > 0) {\r\n      reasons.push(`Attempted to access ${lockedFeaturesAccessed.length} premium feature(s)`);\r\n      urgency = urgency === 'low' ? 'medium' : urgency;\r\n      \r\n      // Find minimum tier needed for these features\r\n      lockedFeaturesAccessed.forEach(feature => {\r\n        const requiredTier = this.getMinimumTierForFeature(feature);\r\n        if (this.getTierPriority(requiredTier) > this.getTierPriority(targetTier)) {\r\n          targetTier = requiredTier;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Generate benefits list\r\n    if (targetTier !== tier) {\r\n      const targetConfig = TIER_CONFIGURATIONS[targetTier];\r\n      const currentConfig = TIER_CONFIGURATIONS[tier];\r\n      \r\n      // Highlight new features\r\n      Object.entries(targetConfig.features).forEach(([feature, enabled]) => {\r\n        if (enabled && !currentConfig.features[feature as SubscriptionFeature]) {\r\n          benefits.push(feature.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()));\r\n        }\r\n      });\r\n      \r\n      // Highlight limit increases\r\n      Object.entries(targetConfig.limits).forEach(([limitType, newLimit]) => {\r\n        const currentLimit = currentConfig.limits[limitType as UsageLimit];\r\n        if (newLimit > currentLimit) {\r\n          if (newLimit >= 10000) {\r\n            benefits.push(`Unlimited ${limitType.replace(/_/g, ' ')}`);\r\n          } else {\r\n            benefits.push(`${newLimit} ${limitType.replace(/_/g, ' ')} (was ${currentLimit})`);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      recommended: targetTier !== tier,\r\n      targetTier,\r\n      reasons,\r\n      benefits,\r\n      urgency\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Helper: Get tier priority for comparison\r\n   */\r\n  private static getTierPriority(tier: SubscriptionTier): number {\r\n    const priorities = { personal: 1, professional: 2, enterprise: 3 };\r\n    return priorities[tier];\r\n  }\r\n}\r\n\r\n// Export for convenience\r\nexport const subscriptionService = SubscriptionService; "],"names":["SubscriptionService","TIER_CONFIGURATIONS","subscriptionService","personal","displayName","description","basePrice","features","analytics","user_management","premium_themes","custom_branding","collections","scheduling","bulk_operations","api_access","export_data","advanced_reporting","limits","avatars","collections_per_avatar","sessions_per_month","data_retention_months","professional","enterprise","canAccessFeature","subscriptionPlan","feature","logger","warn","allowed","reason","upgradeRequired","tier","tierConfig","error","featuresIncluded","features_included","hasFeature","debug","getMinimumTierForFeature","info","currentTier","replace","l","toUpperCase","checkUsageLimit","limitType","currentUsage","limitKey","limit","getNextTierWithHigherLimit","canCreateAvatar","currentAvatarsCount","canCreateCollection","currentCollectionsCount","getAvailableFeatures","availableFeatures","Object","keys","push","getUsageSummary","usageData","summary","getCurrentUsageValue","tiers","requiredUsage","currentIndex","indexOf","i","length","avatarsCount","collectionsCount","sessionsThisMonth","dataRetentionMonths","formatFeatureGateMessage","result","tierName","getPlanComparison","comparison","config","entries","enabledFeatures","filter","enabled","map","featureName","limitsDisplay","value","price","analyzeTierTransition","targetTier","currentConfig","targetConfig","isUpgrade","isDowngrade","featureChanges","gained","lost","usageImpact","overLimitItems","costImpact","currentCost","newCost","monthlyDifference","prorationAmount","prorationDescription","warnings","canTransition","tierOrder","gainedFeatures","lostFeatures","forEach","currentlyEnabled","newLimit","currentUsageValue","impact","getUsageLimitImpactMessage","type","current","join","proration","calculateProration","getAvailableTransitions","allTiers","currentOrder","upgrades","downgrades","currentMonthlyPrice","newMonthlyPrice","daysPassed","Date","getDate","daysInMonth","getFullYear","getMonth","remainingDays","dailyDifference","Math","round","abs","toFixed","excess","validateTierTransition","valid","reasons","analysis","canAccessDashboard","canAccessUserManagement","canAccessPremiumThemes","canAccessAdvancedReporting","canExportData","checkMultipleFeatures","results","getLockedFeatures","lockedFeatures","allFeatures","Set","values","add","getSmartUpgradeRecommendation","lockedFeaturesAccessed","recommended","benefits","urgency","usageSummary","requiredTier","getTierPriority","currentLimit","priorities"],"mappings":"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"}