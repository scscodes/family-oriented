9a1bb2bdec4fd659797c5b1476a5b2e8
/**
 * Subscription Service - Tier-based Feature Gating and Usage Limits
 * Provides centralized subscription tier enforcement across the application
 * 
 * Enhanced with:
 * - Comprehensive feature gating for all app features
 * - Smart upgrade recommendations
 * - Demo mode support with proper tier simulation
 * - Real-time usage tracking and enforcement
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    SubscriptionService: function() {
        return SubscriptionService;
    },
    TIER_CONFIGURATIONS: function() {
        return TIER_CONFIGURATIONS;
    },
    subscriptionService: function() {
        return subscriptionService;
    }
});
const _logger = require("./logger");
const TIER_CONFIGURATIONS = {
    personal: {
        displayName: 'Personal Plan',
        description: 'Perfect for families with up to 5 children',
        basePrice: 9.99,
        features: {
            analytics: true,
            user_management: false,
            premium_themes: false,
            custom_branding: false,
            collections: true,
            scheduling: false,
            bulk_operations: false,
            api_access: false,
            export_data: false,
            advanced_reporting: false
        },
        limits: {
            avatars: 5,
            collections_per_avatar: 10,
            sessions_per_month: 1000,
            data_retention_months: 12
        }
    },
    professional: {
        displayName: 'Professional Plan',
        description: 'For educators and small organizations with up to 30 children',
        basePrice: 19.99,
        features: {
            analytics: true,
            user_management: true,
            premium_themes: true,
            custom_branding: false,
            collections: true,
            scheduling: true,
            bulk_operations: true,
            api_access: false,
            export_data: true,
            advanced_reporting: true
        },
        limits: {
            avatars: 30,
            collections_per_avatar: 25,
            sessions_per_month: 5000,
            data_retention_months: 24
        }
    },
    enterprise: {
        displayName: 'Enterprise Plan',
        description: 'For large organizations with unlimited children and full customization',
        basePrice: 49.99,
        features: {
            analytics: true,
            user_management: true,
            premium_themes: true,
            custom_branding: true,
            collections: true,
            scheduling: true,
            bulk_operations: true,
            api_access: true,
            export_data: true,
            advanced_reporting: true
        },
        limits: {
            avatars: 10000,
            collections_per_avatar: 100,
            sessions_per_month: 50000,
            data_retention_months: 60
        }
    }
};
class SubscriptionService {
    /**
   * Check if a feature is available for the given subscription plan
   * Enhanced with better error handling and logging
   */ static canAccessFeature(subscriptionPlan, feature) {
        // Handle no subscription plan (demo mode or logged out)
        if (!subscriptionPlan) {
            _logger.logger.warn('Feature access check without subscription plan:', feature);
            return {
                allowed: false,
                reason: 'No active subscription plan',
                upgradeRequired: 'personal'
            };
        }
        const tier = subscriptionPlan.tier;
        const tierConfig = TIER_CONFIGURATIONS[tier];
        // Validate tier configuration
        if (!tierConfig) {
            _logger.logger.error('Unknown subscription tier during feature check:', {
                tier,
                feature
            });
            return {
                allowed: false,
                reason: 'Invalid subscription tier configuration'
            };
        }
        // Check feature inclusion from database plan or fallback to tier defaults
        const featuresIncluded = subscriptionPlan.features_included || {};
        const hasFeature = featuresIncluded[feature] ?? tierConfig.features[feature];
        if (hasFeature) {
            _logger.logger.debug('Feature access granted:', {
                tier,
                feature
            });
            return {
                allowed: true
            };
        }
        // Determine minimum tier required for this feature
        const upgradeRequired = this.getMinimumTierForFeature(feature);
        _logger.logger.info('Feature access denied - upgrade required:', {
            currentTier: tier,
            feature,
            upgradeRequired
        });
        return {
            allowed: false,
            reason: `${feature.replace(/_/g, ' ').replace(/\b\w/g, (l)=>l.toUpperCase())} requires ${TIER_CONFIGURATIONS[upgradeRequired].displayName}`,
            upgradeRequired
        };
    }
    /**
   * Check usage against limits
   */ static checkUsageLimit(subscriptionPlan, limitType, currentUsage) {
        if (!subscriptionPlan) {
            return {
                allowed: false,
                reason: 'No active subscription plan',
                upgradeRequired: 'personal'
            };
        }
        const tier = subscriptionPlan.tier;
        const tierConfig = TIER_CONFIGURATIONS[tier];
        if (!tierConfig) {
            return {
                allowed: false,
                reason: 'Invalid subscription tier'
            };
        }
        // Get limit from database plan or fallback to defaults
        const limitKey = limitType === 'avatars' ? 'avatar_limit' : `${limitType}_limit`;
        const limit = subscriptionPlan[limitKey] ?? tierConfig.limits[limitType];
        if (currentUsage < limit) {
            return {
                allowed: true,
                currentUsage,
                limit
            };
        }
        // Usage exceeded - suggest upgrade
        const upgradeRequired = this.getNextTierWithHigherLimit(tier, limitType, currentUsage);
        return {
            allowed: false,
            reason: `${limitType} limit exceeded (${currentUsage}/${limit})`,
            upgradeRequired,
            currentUsage,
            limit
        };
    }
    /**
   * Avatar creation enforcement
   */ static canCreateAvatar(subscriptionPlan, currentAvatarsCount) {
        return this.checkUsageLimit(subscriptionPlan, 'avatars', currentAvatarsCount);
    }
    /**
   * Collection creation enforcement
   */ static canCreateCollection(subscriptionPlan, currentCollectionsCount) {
        return this.checkUsageLimit(subscriptionPlan, 'collections_per_avatar', currentCollectionsCount + 1);
    }
    /**
   * Get all available features for a subscription plan
   */ static getAvailableFeatures(subscriptionPlan) {
        if (!subscriptionPlan) return [];
        const tier = subscriptionPlan.tier;
        const tierConfig = TIER_CONFIGURATIONS[tier];
        const featuresIncluded = subscriptionPlan.features_included || {};
        const availableFeatures = [];
        for (const feature of Object.keys(tierConfig.features)){
            const hasFeature = featuresIncluded[feature] ?? tierConfig.features[feature];
            if (hasFeature) {
                availableFeatures.push(feature);
            }
        }
        return availableFeatures;
    }
    /**
   * Get usage summary for a subscription plan
   */ static getUsageSummary(subscriptionPlan, usageData) {
        const summary = {};
        for (const limitType of Object.keys(TIER_CONFIGURATIONS.personal.limits)){
            const currentUsage = this.getCurrentUsageValue(usageData, limitType);
            summary[limitType] = this.checkUsageLimit(subscriptionPlan, limitType, currentUsage);
        }
        return summary;
    }
    /**
   * Helper: Get minimum tier required for a feature
   */ static getMinimumTierForFeature(feature) {
        const tiers = [
            'personal',
            'professional',
            'enterprise'
        ];
        for (const tier of tiers){
            if (TIER_CONFIGURATIONS[tier].features[feature]) {
                return tier;
            }
        }
        return 'enterprise'; // Fallback to highest tier
    }
    /**
   * Helper: Get next tier with higher limit
   */ static getNextTierWithHigherLimit(currentTier, limitType, requiredUsage) {
        const tiers = [
            'personal',
            'professional',
            'enterprise'
        ];
        const currentIndex = tiers.indexOf(currentTier);
        for(let i = currentIndex + 1; i < tiers.length; i++){
            const tier = tiers[i];
            if (TIER_CONFIGURATIONS[tier].limits[limitType] >= requiredUsage) {
                return tier;
            }
        }
        return 'enterprise'; // Fallback to highest tier
    }
    /**
   * Helper: Extract current usage value from usage data
   */ static getCurrentUsageValue(usageData, limitType) {
        switch(limitType){
            case 'avatars':
                return usageData.avatarsCount;
            case 'collections_per_avatar':
                return usageData.collectionsCount;
            case 'sessions_per_month':
                return usageData.sessionsThisMonth;
            case 'data_retention_months':
                return usageData.dataRetentionMonths;
            default:
                return 0;
        }
    }
    /**
   * Format feature gate result for UI display
   */ static formatFeatureGateMessage(result) {
        if (result.allowed) {
            return 'Feature available';
        }
        if (result.upgradeRequired) {
            const tierName = TIER_CONFIGURATIONS[result.upgradeRequired].displayName;
            return `${result.reason}. Upgrade to ${tierName} to unlock this feature.`;
        }
        return result.reason || 'Feature not available';
    }
    /**
   * Get plan comparison data for upgrade UI
   */ static getPlanComparison() {
        const comparison = {};
        for (const [tier, config] of Object.entries(TIER_CONFIGURATIONS)){
            const enabledFeatures = Object.entries(config.features).filter(([, enabled])=>enabled).map(([featureName])=>featureName);
            const limitsDisplay = Object.entries(config.limits).map(([limit, value])=>`${limit}: ${value === 10000 ? 'Unlimited' : value}`);
            comparison[tier] = {
                displayName: config.displayName,
                description: config.description,
                price: config.basePrice,
                features: enabledFeatures,
                limits: limitsDisplay
            };
        }
        return comparison;
    }
    /**
   * Analyze tier transition impact
   */ static analyzeTierTransition(currentTier, targetTier, currentUsage) {
        const currentConfig = TIER_CONFIGURATIONS[currentTier];
        const targetConfig = TIER_CONFIGURATIONS[targetTier];
        // Safety check for invalid tiers
        if (!currentConfig || !targetConfig) {
            return {
                isUpgrade: false,
                isDowngrade: false,
                featureChanges: {
                    gained: [],
                    lost: []
                },
                usageImpact: {
                    overLimitItems: []
                },
                costImpact: {
                    currentCost: 0,
                    newCost: 0,
                    monthlyDifference: 0,
                    prorationAmount: 0,
                    prorationDescription: 'Invalid tier configuration'
                },
                warnings: [
                    'Invalid tier configuration'
                ],
                canTransition: false
            };
        }
        const tierOrder = {
            personal: 1,
            professional: 2,
            enterprise: 3
        };
        const isUpgrade = tierOrder[targetTier] > tierOrder[currentTier];
        const isDowngrade = tierOrder[targetTier] < tierOrder[currentTier];
        // Analyze feature changes
        const gainedFeatures = [];
        const lostFeatures = [];
        Object.entries(targetConfig.features).forEach(([featureName, enabled])=>{
            const currentlyEnabled = currentConfig.features[featureName];
            if (enabled && !currentlyEnabled) {
                gainedFeatures.push(featureName);
            } else if (!enabled && currentlyEnabled) {
                lostFeatures.push(featureName);
            }
        });
        // Analyze usage impact
        const overLimitItems = [];
        const warnings = [];
        Object.entries(targetConfig.limits).forEach(([limitType, newLimit])=>{
            const currentUsageValue = this.getCurrentUsageValue(currentUsage, limitType);
            if (currentUsageValue > newLimit) {
                const impact = this.getUsageLimitImpactMessage(limitType, currentUsageValue, newLimit);
                overLimitItems.push({
                    type: limitType,
                    current: currentUsageValue,
                    newLimit,
                    impact
                });
                warnings.push(`${limitType}: ${impact}`);
            }
        });
        // Add feature-specific warnings
        if (lostFeatures.length > 0) {
            warnings.push(`You will lose access to: ${lostFeatures.join(', ')}`);
        }
        if (currentTier === 'enterprise' && targetTier !== 'enterprise') {
            warnings.push('You will lose custom branding and advanced enterprise features');
        }
        // Calculate cost impact
        const currentCost = currentConfig.basePrice || 0;
        const newCost = targetConfig.basePrice || 0;
        const monthlyDifference = newCost - currentCost;
        const proration = this.calculateProration(currentCost, newCost);
        const canTransition = overLimitItems.length === 0 || isUpgrade;
        return {
            isUpgrade,
            isDowngrade,
            featureChanges: {
                gained: gainedFeatures,
                lost: lostFeatures
            },
            usageImpact: {
                overLimitItems
            },
            costImpact: {
                currentCost,
                newCost,
                monthlyDifference,
                prorationAmount: proration.prorationAmount,
                prorationDescription: proration.description
            },
            warnings,
            canTransition
        };
    }
    /**
   * Get available tier transitions
   */ static getAvailableTransitions(currentTier) {
        const allTiers = [
            'personal',
            'professional',
            'enterprise'
        ];
        const tierOrder = {
            personal: 1,
            professional: 2,
            enterprise: 3
        };
        const currentOrder = tierOrder[currentTier];
        return {
            upgrades: allTiers.filter((tier)=>tierOrder[tier] > currentOrder),
            downgrades: allTiers.filter((tier)=>tierOrder[tier] < currentOrder)
        };
    }
    /**
   * Calculate proration amount for tier change
   */ static calculateProration(currentMonthlyPrice, newMonthlyPrice, daysPassed = new Date().getDate(), daysInMonth = new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0).getDate()) {
        const remainingDays = daysInMonth - daysPassed;
        const dailyDifference = (newMonthlyPrice - currentMonthlyPrice) / daysInMonth;
        const prorationAmount = Math.round(dailyDifference * remainingDays * 100) / 100;
        const description = prorationAmount > 0 ? `You'll be charged $${Math.abs(prorationAmount).toFixed(2)} for the remaining ${remainingDays} days of this billing cycle.` : prorationAmount < 0 ? `You'll receive a credit of $${Math.abs(prorationAmount).toFixed(2)} for the remaining ${remainingDays} days.` : 'No proration required.';
        return {
            prorationAmount,
            description
        };
    }
    /**
   * Helper: Get usage limit impact message
   */ static getUsageLimitImpactMessage(limitType, currentUsage, newLimit) {
        const excess = currentUsage - newLimit;
        switch(limitType){
            case 'avatars':
                return `${excess} avatar(s) will need to be removed or archived`;
            case 'collections_per_avatar':
                return `Some collections may need to be removed or consolidated`;
            case 'sessions_per_month':
                return `Monthly session limit will be reduced from ${currentUsage} to ${newLimit}`;
            case 'data_retention_months':
                return `Data retention will be reduced from ${currentUsage} to ${newLimit} months`;
            default:
                return `Usage will be limited to ${newLimit} (currently ${currentUsage})`;
        }
    }
    /**
   * Validate if a tier transition is safe
   */ static validateTierTransition(currentTier, targetTier, currentUsage) {
        if (currentTier === targetTier) {
            return {
                valid: false,
                reasons: [
                    'Cannot transition to the same tier'
                ]
            };
        }
        const analysis = this.analyzeTierTransition(currentTier, targetTier, currentUsage);
        if (!analysis.canTransition) {
            return {
                valid: false,
                reasons: analysis.warnings
            };
        }
        return {
            valid: true,
            reasons: []
        };
    }
    /**
   * Enhanced feature enforcement for specific app features
   */ static canAccessDashboard(subscriptionPlan) {
        return this.canAccessFeature(subscriptionPlan, 'analytics');
    }
    static canAccessUserManagement(subscriptionPlan) {
        return this.canAccessFeature(subscriptionPlan, 'user_management');
    }
    static canAccessPremiumThemes(subscriptionPlan) {
        return this.canAccessFeature(subscriptionPlan, 'premium_themes');
    }
    static canAccessAdvancedReporting(subscriptionPlan) {
        return this.canAccessFeature(subscriptionPlan, 'advanced_reporting');
    }
    static canExportData(subscriptionPlan) {
        return this.canAccessFeature(subscriptionPlan, 'export_data');
    }
    /**
   * Bulk operations for feature checking (for UI components)
   */ static checkMultipleFeatures(subscriptionPlan, features) {
        const results = {};
        features.forEach((feature)=>{
            results[feature] = this.canAccessFeature(subscriptionPlan, feature);
        });
        return results;
    }
    /**
   * Get features that are locked for the current tier (for upgrade prompts)
   */ static getLockedFeatures(subscriptionPlan) {
        if (!subscriptionPlan) {
            return Object.keys(TIER_CONFIGURATIONS.personal.features);
        }
        const tier = subscriptionPlan.tier;
        const tierConfig = TIER_CONFIGURATIONS[tier];
        const featuresIncluded = subscriptionPlan.features_included || {};
        const lockedFeatures = [];
        // Check all possible features
        const allFeatures = new Set();
        Object.values(TIER_CONFIGURATIONS).forEach((config)=>{
            Object.keys(config.features).forEach((feature)=>{
                allFeatures.add(feature);
            });
        });
        allFeatures.forEach((feature)=>{
            const hasFeature = featuresIncluded[feature] ?? tierConfig?.features[feature] ?? false;
            if (!hasFeature) {
                lockedFeatures.push(feature);
            }
        });
        return lockedFeatures;
    }
    /**
   * Smart upgrade recommendations based on usage patterns
   */ static getSmartUpgradeRecommendation(subscriptionPlan, usageData, lockedFeaturesAccessed = []) {
        if (!subscriptionPlan) {
            return {
                recommended: true,
                targetTier: 'personal',
                reasons: [
                    'No active subscription'
                ],
                benefits: [
                    'Access to analytics',
                    'Create up to 5 children',
                    'Save collections'
                ],
                urgency: 'high'
            };
        }
        const tier = subscriptionPlan.tier;
        const reasons = [];
        const benefits = [];
        let urgency = 'low';
        let targetTier = tier;
        // Check usage against limits
        const usageSummary = this.getUsageSummary(subscriptionPlan, usageData);
        Object.entries(usageSummary).forEach(([limitType, result])=>{
            if (!result.allowed) {
                reasons.push(`${limitType} limit exceeded`);
                urgency = 'high';
                targetTier = result.upgradeRequired || 'professional';
            } else if (result.currentUsage && result.limit && result.currentUsage / result.limit > 0.8) {
                reasons.push(`Approaching ${limitType} limit`);
                urgency = urgency === 'low' ? 'medium' : urgency;
            }
        });
        // Check feature access patterns
        if (lockedFeaturesAccessed.length > 0) {
            reasons.push(`Attempted to access ${lockedFeaturesAccessed.length} premium feature(s)`);
            urgency = urgency === 'low' ? 'medium' : urgency;
            // Find minimum tier needed for these features
            lockedFeaturesAccessed.forEach((feature)=>{
                const requiredTier = this.getMinimumTierForFeature(feature);
                if (this.getTierPriority(requiredTier) > this.getTierPriority(targetTier)) {
                    targetTier = requiredTier;
                }
            });
        }
        // Generate benefits list
        if (targetTier !== tier) {
            const targetConfig = TIER_CONFIGURATIONS[targetTier];
            const currentConfig = TIER_CONFIGURATIONS[tier];
            // Highlight new features
            Object.entries(targetConfig.features).forEach(([feature, enabled])=>{
                if (enabled && !currentConfig.features[feature]) {
                    benefits.push(feature.replace(/_/g, ' ').replace(/\b\w/g, (l)=>l.toUpperCase()));
                }
            });
            // Highlight limit increases
            Object.entries(targetConfig.limits).forEach(([limitType, newLimit])=>{
                const currentLimit = currentConfig.limits[limitType];
                if (newLimit > currentLimit) {
                    if (newLimit >= 10000) {
                        benefits.push(`Unlimited ${limitType.replace(/_/g, ' ')}`);
                    } else {
                        benefits.push(`${newLimit} ${limitType.replace(/_/g, ' ')} (was ${currentLimit})`);
                    }
                }
            });
        }
        return {
            recommended: targetTier !== tier,
            targetTier,
            reasons,
            benefits,
            urgency
        };
    }
    /**
   * Helper: Get tier priority for comparison
   */ static getTierPriority(tier) {
        const priorities = {
            personal: 1,
            professional: 2,
            enterprise: 3
        };
        return priorities[tier];
    }
}
const subscriptionService = SubscriptionService;

//# sourceMappingURL=data:application/json;base64,